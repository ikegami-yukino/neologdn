/* Generated by Cython 3.1.0a1 */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
/* InitLimitedAPI */
#if defined(Py_LIMITED_API) && !defined(CYTHON_LIMITED_API)
  #define CYTHON_LIMITED_API 1
#endif

#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x03080000
    #error Cython requires Python 3.8+.
#else
#define __PYX_ABI_VERSION "3_1_0a1"
#define CYTHON_HEX_VERSION 0x030100A1
#define CYTHON_FUTURE_DIVISION 1
/* CModulePreamble */
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(_WIN32) && !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #define HAVE_LONG_LONG
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#define __PYX_LIMITED_VERSION_HEX PY_VERSION_HEX
#if defined(GRAALVM_PYTHON)
  /* For very preliminary testing purposes. Most variables are set the same as PyPy.
     The existence of this section does not imply that anything works or is even tested */
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 1
  #define CYTHON_COMPILING_IN_CPYTHON_FREETHREADING 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
  #define CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_ASSUME_SAFE_SIZE
  #define CYTHON_ASSUME_SAFE_SIZE 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_SYS_MONITORING
  #define CYTHON_USE_SYS_MONITORING 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_AM_SEND
  #define CYTHON_USE_AM_SEND 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 1
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(PYPY_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_CPYTHON_FREETHREADING 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 1
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
  #define CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #ifndef CYTHON_ASSUME_SAFE_SIZE
    #define CYTHON_ASSUME_SAFE_SIZE 1
  #endif
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #if PY_VERSION_HEX < 0x03090000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_SYS_MONITORING
  #define CYTHON_USE_SYS_MONITORING 0
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PYPY_VERSION_NUM >= 0x07030C00)
  #endif
  #undef CYTHON_USE_AM_SEND
  #define CYTHON_USE_AM_SEND 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(CYTHON_LIMITED_API)
  #ifdef Py_LIMITED_API
    #undef __PYX_LIMITED_VERSION_HEX
    #define __PYX_LIMITED_VERSION_HEX Py_LIMITED_API
  #endif
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 1
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_CPYTHON_FREETHREADING 0
  #undef CYTHON_CLINE_IN_TRACEBACK
  #define CYTHON_CLINE_IN_TRACEBACK 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 1
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #endif
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
    #define CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS 0
  #endif
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_ASSUME_SAFE_SIZE
  #define CYTHON_ASSUME_SAFE_SIZE 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL (__PYX_LIMITED_VERSION_HEX >= 0x030C0000)
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 1
  #endif
  #undef CYTHON_USE_SYS_MONITORING
  #define CYTHON_USE_SYS_MONITORING 0
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #endif
  #ifndef CYTHON_USE_AM_SEND
    #define CYTHON_USE_AM_SEND (__PYX_LIMITED_VERSION_HEX >= 0x030A0000)
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #ifdef Py_GIL_DISABLED
    #define CYTHON_COMPILING_IN_CPYTHON_FREETHREADING 1
  #else
    #define CYTHON_COMPILING_IN_CPYTHON_FREETHREADING 0
  #endif
  #if PY_VERSION_HEX < 0x030A0000
    #undef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #elif !defined(CYTHON_USE_TYPE_SLOTS)
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #ifndef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    #undef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLIST_INTERNALS)
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    #undef CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
    #define CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS 1
  #elif !defined(CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS)
    #define CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_ASSUME_SAFE_SIZE
    #define CYTHON_ASSUME_SAFE_SIZE 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    #undef CYTHON_FAST_GIL
    #define CYTHON_FAST_GIL 0
  #elif !defined(CYTHON_FAST_GIL)
    #define CYTHON_FAST_GIL (PY_VERSION_HEX < 0x030C00A6)
  #endif
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #ifndef CYTHON_USE_SYS_MONITORING
    #define CYTHON_USE_SYS_MONITORING (PY_VERSION_HEX >= 0x030d00B1)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #ifndef CYTHON_USE_AM_SEND
    #define CYTHON_USE_AM_SEND 1
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    #undef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS 0
  #elif !defined(CYTHON_USE_DICT_VERSIONS)
    #define CYTHON_USE_DICT_VERSIONS  (PY_VERSION_HEX < 0x030C00A5 && !CYTHON_USE_MODULE_STATE)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 1
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
  #ifndef CYTHON_USE_FREELISTS
    #define CYTHON_USE_FREELISTS (!CYTHON_COMPILING_IN_CPYTHON_FREETHREADING)
  #endif
#endif
#ifndef CYTHON_FAST_PYCCALL
#define CYTHON_FAST_PYCCALL  CYTHON_FAST_PYCALL
#endif
#ifndef CYTHON_VECTORCALL
#if CYTHON_COMPILING_IN_LIMITED_API
#define CYTHON_VECTORCALL  (__PYX_LIMITED_VERSION_HEX >= 0x030C0000)
#else
#define CYTHON_VECTORCALL  (CYTHON_FAST_PYCCALL && PY_VERSION_HEX >= 0x030800B1)
#endif
#endif
#define CYTHON_BACKPORT_VECTORCALL (CYTHON_METH_FASTCALL && PY_VERSION_HEX < 0x030800B1)
#if CYTHON_USE_PYLONG_INTERNALS
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(maybe_unused) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(maybe_unused)
        #define CYTHON_UNUSED [[maybe_unused]]
      #endif
    #endif
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
  #define CYTHON_MAYBE_UNUSED_VAR(x) CYTHON_UNUSED_VAR(x)
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_USE_CPP_STD_MOVE
  #if defined(__cplusplus) && (\
    __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600))
    #define CYTHON_USE_CPP_STD_MOVE 1
  #else
    #define CYTHON_USE_CPP_STD_MOVE 0
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
            typedef unsigned char     uint8_t;
            typedef unsigned short    uint16_t;
            typedef unsigned int      uint32_t;
        #else
            typedef unsigned __int8   uint8_t;
            typedef unsigned __int16  uint16_t;
            typedef unsigned __int32  uint32_t;
        #endif
    #endif
    #if _MSC_VER < 1300
        #ifdef _WIN64
            typedef unsigned long long  __pyx_uintptr_t;
        #else
            typedef unsigned int        __pyx_uintptr_t;
        #endif
    #else
        #ifdef _WIN64
            typedef unsigned __int64    __pyx_uintptr_t;
        #else
            typedef unsigned __int32    __pyx_uintptr_t;
        #endif
    #endif
#else
    #include <stdint.h>
    typedef uintptr_t  __pyx_uintptr_t;
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(fallthrough) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(fallthrough)
        #define CYTHON_FALLTHROUGH [[fallthrough]]
      #endif
    #endif
    #ifndef CYTHON_FALLTHROUGH
      #if __has_cpp_attribute(clang::fallthrough)
        #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
      #elif __has_cpp_attribute(gnu::fallthrough)
        #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
      #endif
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif
#ifndef Py_UNREACHABLE
  #define Py_UNREACHABLE()  assert(0); abort()
#endif
#ifdef __cplusplus
  template <typename T>
  struct __PYX_IS_UNSIGNED_IMPL {static const bool value = T(0) < T(-1);};
  #define __PYX_IS_UNSIGNED(type) (__PYX_IS_UNSIGNED_IMPL<type>::value)
#else
  #define __PYX_IS_UNSIGNED(type) (((type)-1) > 0)
#endif
#if CYTHON_COMPILING_IN_PYPY == 1
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x030A0000)
#else
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000)
#endif
#define __PYX_REINTERPRET_FUNCION(func_pointer, other_pointer) ((func_pointer)(void(*)(void))(other_pointer))

/* CppInitCode */
#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(const U& other) const { return *ptr == other; }
    template<typename U> bool operator !=(const U& other) const { return *ptr != other; }
    template<typename U> bool operator==(const __Pyx_FakeReference<U>& other) const { return *ptr == *other.ptr; }
    template<typename U> bool operator!=(const __Pyx_FakeReference<U>& other) const { return *ptr != *other.ptr; }
  private:
    T *ptr;
};

/* PythonCompatibility */
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#define __Pyx_BUILTIN_MODULE_NAME "builtins"
#define __Pyx_DefaultClassType PyType_Type
#if CYTHON_COMPILING_IN_LIMITED_API
    #ifndef CO_OPTIMIZED
    #define CO_OPTIMIZED 0x0001
    #endif
    #ifndef CO_NEWLOCALS
    #define CO_NEWLOCALS 0x0002
    #endif
    #ifndef CO_VARARGS
    #define CO_VARARGS 0x0004
    #endif
    #ifndef CO_VARKEYWORDS
    #define CO_VARKEYWORDS 0x0008
    #endif
    #ifndef CO_ASYNC_GENERATOR
    #define CO_ASYNC_GENERATOR 0x0200
    #endif
    #ifndef CO_GENERATOR
    #define CO_GENERATOR 0x0020
    #endif
    #ifndef CO_COROUTINE
    #define CO_COROUTINE 0x0080
    #endif
#endif
#if PY_VERSION_HEX >= 0x030900A4 || defined(Py_IS_TYPE)
  #define __Pyx_IS_TYPE(ob, type) Py_IS_TYPE(ob, type)
#else
  #define __Pyx_IS_TYPE(ob, type) (((const PyObject*)ob)->ob_type == (type))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_Is)
  #define __Pyx_Py_Is(x, y)  Py_Is(x, y)
#else
  #define __Pyx_Py_Is(x, y) ((x) == (y))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsNone)
  #define __Pyx_Py_IsNone(ob) Py_IsNone(ob)
#else
  #define __Pyx_Py_IsNone(ob) __Pyx_Py_Is((ob), Py_None)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsTrue)
  #define __Pyx_Py_IsTrue(ob) Py_IsTrue(ob)
#else
  #define __Pyx_Py_IsTrue(ob) __Pyx_Py_Is((ob), Py_True)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsFalse)
  #define __Pyx_Py_IsFalse(ob) Py_IsFalse(ob)
#else
  #define __Pyx_Py_IsFalse(ob) __Pyx_Py_Is((ob), Py_False)
#endif
#define __Pyx_NoneAsNull(obj)  (__Pyx_Py_IsNone(obj) ? NULL : (obj))
#if PY_VERSION_HEX >= 0x030900F0 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyObject_GC_IsFinalized(o) PyObject_GC_IsFinalized(o)
#else
  #define __Pyx_PyObject_GC_IsFinalized(o) _PyGC_FINALIZED(o)
#endif
#ifndef CO_COROUTINE
  #define CO_COROUTINE 0x80
#endif
#ifndef CO_ASYNC_GENERATOR
  #define CO_ASYNC_GENERATOR 0x200
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef Py_TPFLAGS_SEQUENCE
  #define Py_TPFLAGS_SEQUENCE 0
#endif
#ifndef Py_TPFLAGS_MAPPING
  #define Py_TPFLAGS_MAPPING 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#ifndef METH_FASTCALL
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #if PY_VERSION_HEX >= 0x030d00A4
  #  define __Pyx_PyCFunctionFast PyCFunctionFast
  #  define __Pyx_PyCFunctionFastWithKeywords PyCFunctionFastWithKeywords
  #else
  #  define __Pyx_PyCFunctionFast _PyCFunctionFast
  #  define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
  #endif
#endif
#if CYTHON_METH_FASTCALL
  #define __Pyx_METH_FASTCALL METH_FASTCALL
  #define __Pyx_PyCFunction_FastCall __Pyx_PyCFunctionFast
  #define __Pyx_PyCFunction_FastCallWithKeywords __Pyx_PyCFunctionFastWithKeywords
#else
  #define __Pyx_METH_FASTCALL METH_VARARGS
  #define __Pyx_PyCFunction_FastCall PyCFunction
  #define __Pyx_PyCFunction_FastCallWithKeywords PyCFunctionWithKeywords
#endif
#if CYTHON_VECTORCALL
  #define __pyx_vectorcallfunc vectorcallfunc
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  PY_VECTORCALL_ARGUMENTS_OFFSET
  #define __Pyx_PyVectorcall_NARGS(n)  PyVectorcall_NARGS((size_t)(n))
#elif CYTHON_BACKPORT_VECTORCALL
  typedef PyObject *(*__pyx_vectorcallfunc)(PyObject *callable, PyObject *const *args,
                                            size_t nargsf, PyObject *kwnames);
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  ((size_t)1 << (8 * sizeof(size_t) - 1))
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(((size_t)(n)) & ~__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET))
#else
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  0
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(n))
#endif
#if PY_VERSION_HEX >= 0x030900B1
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_CheckExact(func)
#else
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_Check(func)
#endif
#define __Pyx_CyOrPyCFunction_Check(func)  PyCFunction_Check(func)
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  (((PyCFunctionObject*)(func))->m_ml->ml_meth)
#elif !CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  PyCFunction_GET_FUNCTION(func)
#endif
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FLAGS(func)  (((PyCFunctionObject*)(func))->m_ml->ml_flags)
static CYTHON_INLINE PyObject* __Pyx_CyOrPyCFunction_GET_SELF(PyObject *func) {
    return (__Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_STATIC) ? NULL : ((PyCFunctionObject*)func)->m_self;
}
#endif
static CYTHON_INLINE int __Pyx__IsSameCFunction(PyObject *func, void *cfunc) {
#if CYTHON_COMPILING_IN_LIMITED_API
    return PyCFunction_Check(func) && PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
#else
    return PyCFunction_Check(func) && PyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
#endif
}
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCFunction(func, cfunc)
#if __PYX_LIMITED_VERSION_HEX < 0x030900B1
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  ((void)m, PyType_FromSpecWithBases(s, b))
  typedef PyObject *(*__Pyx_PyCMethod)(PyObject *, PyTypeObject *, PyObject *const *, size_t, PyObject *);
#else
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  PyType_FromModuleAndSpec(m, s, b)
  #define __Pyx_PyCMethod  PyCMethod
#endif
#ifndef METH_METHOD
  #define METH_METHOD 0x200
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)
#elif CYTHON_COMPILING_IN_GRAAL
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) _PyFrame_SetLineNumber((frame), (lineno))
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyThreadState_Current PyThreadState_Get()
#elif !CYTHON_FAST_THREAD_STATE
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyThreadState_Current PyThreadState_GetUnchecked()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#endif
#if CYTHON_USE_MODULE_STATE
static CYTHON_INLINE void *__Pyx__PyModule_GetState(PyObject *op)
{
    void *result;
    result = PyModule_GetState(op);
    if (!result)
        Py_FatalError("Couldn't find the module state");
    return result;
}
#define __Pyx_PyModule_GetState(o) (__pyx_mstatetype *)__Pyx__PyModule_GetState(o)
#else
#define __Pyx_PyModule_GetState(op) ((void)op,__pyx_mstate_global)
#endif
#define __Pyx_PyObject_GetSlot(obj, name, func_ctype)  __Pyx_PyType_GetSlot(Py_TYPE((PyObject *) obj), name, func_ctype)
#define __Pyx_PyObject_TryGetSlot(obj, name, func_ctype) __Pyx_PyType_TryGetSlot(Py_TYPE(obj), name, func_ctype)
#define __Pyx_PyObject_TryGetSubSlot(obj, sub, name, func_ctype) __Pyx_PyType_TryGetSubSlot(Py_TYPE(obj), sub, name, func_ctype)
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((type)->name)
  #define __Pyx_PyType_TryGetSlot(type, name, func_ctype) __Pyx_PyType_GetSlot(type, name, func_ctype)
  #define __Pyx_PyType_TryGetSubSlot(type, sub, name, func_ctype) (((type)->sub) ? ((type)->sub->name) : NULL)
#else
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((func_ctype) PyType_GetSlot((type), Py_##name))
  #define __Pyx_PyType_TryGetSlot(type, name, func_ctype)\
    ((__PYX_LIMITED_VERSION_HEX >= 0x030A0000 ||\
     (PyType_GetFlags(type) & Py_TPFLAGS_HEAPTYPE) || __Pyx_get_runtime_version() >= 0x030A0000) ?\
     __Pyx_PyType_GetSlot(type, name, func_ctype) : NULL)
  #define __Pyx_PyType_TryGetSubSlot(obj, sub, name, func_ctype) __Pyx_PyType_TryGetSlot(obj, name, func_ctype)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030d0000 || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
#define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030d0000 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStrWithError(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStr(PyObject *dict, PyObject *name) {
    PyObject *res = __Pyx_PyDict_GetItemStrWithError(dict, name);
    if (res == NULL) PyErr_Clear();
    return res;
}
#elif !CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000
#define __Pyx_PyDict_GetItemStrWithError  PyDict_GetItemWithError
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#else
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStrWithError(PyObject *dict, PyObject *name) {
#if CYTHON_COMPILING_IN_PYPY
    return PyDict_GetItem(dict, name);
#else
    PyDictEntry *ep;
    PyDictObject *mp = (PyDictObject*) dict;
    long hash = ((PyStringObject *) name)->ob_shash;
    assert(hash != -1);
    ep = (mp->ma_lookup)(mp, name, hash);
    if (ep == NULL) {
        return NULL;
    }
    return ep->me_value;
#endif
}
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#endif
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_GetFlags(tp)   (((PyTypeObject *)tp)->tp_flags)
  #define __Pyx_PyType_HasFeature(type, feature)  ((__Pyx_PyType_GetFlags(type) & (feature)) != 0)
#else
  #define __Pyx_PyType_GetFlags(tp)   (PyType_GetFlags((PyTypeObject *)tp))
  #define __Pyx_PyType_HasFeature(type, feature)  PyType_HasFeature(type, feature)
#endif
#define __Pyx_PyObject_GetIterNextFunc(iterator)  __Pyx_PyObject_GetSlot(iterator, tp_iternext, iternextfunc)
#if CYTHON_USE_TYPE_SPECS && PY_VERSION_HEX >= 0x03080000
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  {\
    PyTypeObject *type = Py_TYPE((PyObject*)obj);\
    assert(__Pyx_PyType_HasFeature(type, Py_TPFLAGS_HEAPTYPE));\
    PyObject_GC_Del(obj);\
    Py_DECREF(type);\
}
#else
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  PyObject_GC_Del(obj)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_ReadChar(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((void)u, 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((void)u, (0))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)u)
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)k, PyUnicode_ReadChar((PyObject*)(d), i))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GetLength(u))
#else
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         ((int)PyUnicode_KIND(u))
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, (Py_UCS4) ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #if !defined(PyUnicode_DecodeUnicodeEscape)
    #define PyUnicode_DecodeUnicodeEscape(s, size, errors)  PyUnicode_Decode(s, size, "unicode_escape", errors)
  #endif
  #if !defined(PyUnicode_Contains)
    #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
  #endif
  #if !defined(PyByteArray_Check)
    #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
  #endif
  #if !defined(PyObject_Format)
    #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
  #endif
#endif
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if CYTHON_COMPILING_IN_CPYTHON
  #define __Pyx_PySequence_ListKeepNew(obj)\
    (likely(PyList_CheckExact(obj) && Py_REFCNT(obj) == 1) ? __Pyx_NewRef(obj) : PySequence_List(obj))
#else
  #define __Pyx_PySequence_ListKeepNew(obj)  PySequence_List(obj)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        __Pyx_IS_TYPE(obj, &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS && PY_VERSION_HEX >= 0x030d00b1
#define __Pyx_PyList_GetItemRef(o, i) PyList_GetItemRef(o, i)
#define __Pyx_PyDict_GetItemRef(dict, key, result) PyDict_GetItemRef(dict, key, result)
#elif !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_ASSUME_SAFE_MACROS
#define __Pyx_PyList_GetItemRef(o, i) __Pyx_NewRef(PyList_GET_ITEM(o, i))
#else
#define __Pyx_PyList_GetItemRef(o, i) PySequence_GetItem(o, i)
#endif
static CYTHON_INLINE int __Pyx_PyDict_GetItemRef(PyObject *dict, PyObject *key, PyObject **result) {
  *result = PyDict_GetItem(dict, key);
  if (*result == NULL) {
    return 0;
  }
  Py_INCREF(*result);
  return 1;
}
#else
#define __Pyx_PyList_GetItemRef(o, i) PySequence_GetItem(o, i)
static CYTHON_INLINE int __Pyx_PyDict_GetItemRef(PyObject *dict, PyObject *key, PyObject **result) {
  *result = PyObject_GetItem(dict, key);
  if (PyErr_Occurred()) {
    return -1;
  } else if (*result == NULL) {
    return 0;
  }
  return 1;
}
#endif
#if defined(CYTHON_DEBUG_VISIT_CONST) && CYTHON_DEBUG_VISIT_CONST
  #define __Pyx_VISIT_CONST(obj)  Py_VISIT(obj)
#else
  #define __Pyx_VISIT_CONST(obj)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_ITEM(o, i) PySequence_ITEM(o, i)
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) (PyTuple_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyTuple_GET_ITEM(o, i) PyTuple_GET_ITEM(o, i)
  #define __Pyx_PyList_SET_ITEM(o, i, v) (PyList_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyList_GET_ITEM(o, i) PyList_GET_ITEM(o, i)
#else
  #define __Pyx_PySequence_ITEM(o, i) PySequence_GetItem(o, i)
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) PyTuple_SetItem(o, i, v)
  #define __Pyx_PyTuple_GET_ITEM(o, i) PyTuple_GetItem(o, i)
  #define __Pyx_PyList_SET_ITEM(o, i, v) PyList_SetItem(o, i, v)
  #define __Pyx_PyList_GET_ITEM(o, i) PyList_GetItem(o, i)
#endif
#if CYTHON_ASSUME_SAFE_SIZE
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_GET_SIZE(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_GET_SIZE(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_GET_SIZE(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_GET_SIZE(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_GET_SIZE(o)
  #define __Pyx_PyUnicode_GET_LENGTH(o) PyUnicode_GET_LENGTH(o)
#else
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_Size(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_Size(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_Size(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_Size(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_Size(o)
  #define __Pyx_PyUnicode_GET_LENGTH(o) PyUnicode_GetLength(o)
#endif
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyImport_AddModuleRef(name) PyImport_AddModuleRef(name)
#else
  static CYTHON_INLINE PyObject *__Pyx_PyImport_AddModuleRef(const char *name) {
      PyObject *module = PyImport_AddModule(name);
      Py_XINCREF(module);
      return module;
  }
#endif
#define PyBoolObject                 PyLongObject
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_InternFromString)
  #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
#endif
#define __Pyx_PyLong_FromHash_t PyLong_FromSsize_t
#define __Pyx_PyLong_AsHash_t   __Pyx_PyIndex_AsSsize_t
#if __PYX_LIMITED_VERSION_HEX >= 0x030A0000
    #define __Pyx_PySendResult PySendResult
#else
    typedef enum {
        PYGEN_RETURN = 0,
        PYGEN_ERROR = -1,
        PYGEN_NEXT = 1,
    } __Pyx_PySendResult;
#endif
#if CYTHON_COMPILING_IN_LIMITED_API || PY_VERSION_HEX < 0x030A00A3
  typedef __Pyx_PySendResult (*__Pyx_pyiter_sendfunc)(PyObject *iter, PyObject *value, PyObject **result);
#else
  #define __Pyx_pyiter_sendfunc sendfunc
#endif
#define __PYX_HAS_PY_AM_SEND  (!CYTHON_USE_TYPE_SPECS || CYTHON_USE_AM_SEND && __PYX_LIMITED_VERSION_HEX >= 0x030A0000)
#if __PYX_LIMITED_VERSION_HEX >= 0x030A0000
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_SlotTpAsAsync(s) (&(s))
#else
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
        __Pyx_pyiter_sendfunc am_send;
    } __Pyx_PyAsyncMethodsStruct;
    #define __Pyx_SlotTpAsAsync(s) ((PyAsyncMethods*)&(s))
#endif
#if CYTHON_USE_AM_SEND && PY_VERSION_HEX < 0x030A00F0
    #define __Pyx_TPFLAGS_HAVE_AM_SEND (1UL << 21)
#else
    #define __Pyx_TPFLAGS_HAVE_AM_SEND (0)
#endif

/* MathInitCode */
#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #ifndef _USE_MATH_DEFINES
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#ifndef CYTHON_CLINE_IN_TRACEBACK_RUNTIME
#define CYTHON_CLINE_IN_TRACEBACK_RUNTIME 0
#endif
#ifndef CYTHON_CLINE_IN_TRACEBACK
#define CYTHON_CLINE_IN_TRACEBACK CYTHON_CLINE_IN_TRACEBACK_RUNTIME
#endif
#if CYTHON_CLINE_IN_TRACEBACK
#define __PYX_MARK_ERR_POS(f_index, lineno)  { __pyx_filename = __pyx_f[f_index]; (void) __pyx_filename; __pyx_lineno = lineno; (void) __pyx_lineno; __pyx_clineno = __LINE__; (void) __pyx_clineno; }
#else
#define __PYX_MARK_ERR_POS(f_index, lineno)  { __pyx_filename = __pyx_f[f_index]; (void) __pyx_filename; __pyx_lineno = lineno; (void) __pyx_lineno; (void) __pyx_clineno; }
#endif
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifdef CYTHON_EXTERN_C
    #undef __PYX_EXTERN_C
    #define __PYX_EXTERN_C CYTHON_EXTERN_C
#elif defined(__PYX_EXTERN_C)
    #ifdef _MSC_VER
    #pragma message ("Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.")
    #else
    #warning Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.
    #endif
#else
    #define __PYX_EXTERN_C extern "C++"
#endif

#define __PYX_HAVE__neologdn
#define __PYX_HAVE_API__neologdn
/* Early includes */
#include <string.h>
#include <stdlib.h>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <utility>

    #if __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600)
    // move should be defined for these versions of MSVC, but __cplusplus isn't set usefully
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include <unordered_map>
#include <unordered_set>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s);
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char*);
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if CYTHON_ASSUME_SAFE_MACROS
    #define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
    #define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
    #define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
    #define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
    #define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
    #define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#else
    #define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AsString(s))
    #define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AsString(s))
    #define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AsString(s))
    #define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AsString(s))
    #define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AsString(s))
    #define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AsString(s))
#endif
#define __Pyx_PyObject_AsWritableString(s)    ((char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#define __Pyx_PyUnicode_FromOrdinal(o)       PyUnicode_FromOrdinal((int)o)
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
static CYTHON_INLINE PyObject *__Pyx_NewRef(PyObject *obj) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030a0000 || defined(Py_NewRef)
    return Py_NewRef(obj);
#else
    Py_INCREF(obj);
    return obj;
#endif
}
static CYTHON_INLINE PyObject *__Pyx_XNewRef(PyObject *obj) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030a0000 || defined(Py_XNewRef)
    return Py_XNewRef(obj);
#else
    Py_XINCREF(obj);
    return obj;
#endif
}
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Long(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyLong_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __Pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#define __Pyx_PyFloat_AS_DOUBLE(x) PyFloat_AS_DOUBLE(x)
#else
#define __Pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#define __Pyx_PyFloat_AS_DOUBLE(x) PyFloat_AsDouble(x)
#endif
#define __Pyx_PyFloat_AsFloat(x) ((float) __Pyx_PyFloat_AsDouble(x))
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_VERSION_HEX >= 0x030C00A7
  #ifndef _PyLong_SIGN_MASK
    #define _PyLong_SIGN_MASK 3
  #endif
  #ifndef _PyLong_NON_SIZE_BITS
    #define _PyLong_NON_SIZE_BITS 3
  #endif
  #define __Pyx_PyLong_Sign(x)  (((PyLongObject*)x)->long_value.lv_tag & _PyLong_SIGN_MASK)
  #define __Pyx_PyLong_IsNeg(x)  ((__Pyx_PyLong_Sign(x) & 2) != 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (!__Pyx_PyLong_IsNeg(x))
  #define __Pyx_PyLong_IsZero(x)  (__Pyx_PyLong_Sign(x) & 1)
  #define __Pyx_PyLong_IsPos(x)  (__Pyx_PyLong_Sign(x) == 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  (__Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  ((Py_ssize_t) (((PyLongObject*)x)->long_value.lv_tag >> _PyLong_NON_SIZE_BITS))
  #define __Pyx_PyLong_SignedDigitCount(x)\
        ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * __Pyx_PyLong_DigitCount(x))
  #if defined(PyUnstable_Long_IsCompact) && defined(PyUnstable_Long_CompactValue)
    #define __Pyx_PyLong_IsCompact(x)     PyUnstable_Long_IsCompact((PyLongObject*) x)
    #define __Pyx_PyLong_CompactValue(x)  PyUnstable_Long_CompactValue((PyLongObject*) x)
  #else
    #define __Pyx_PyLong_IsCompact(x)     (((PyLongObject*)x)->long_value.lv_tag < (2 << _PyLong_NON_SIZE_BITS))
    #define __Pyx_PyLong_CompactValue(x)  ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * (Py_ssize_t) __Pyx_PyLong_Digits(x)[0])
  #endif
  typedef Py_ssize_t  __Pyx_compact_pylong;
  typedef size_t  __Pyx_compact_upylong;
  #else
  #define __Pyx_PyLong_IsNeg(x)  (Py_SIZE(x) < 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (Py_SIZE(x) >= 0)
  #define __Pyx_PyLong_IsZero(x)  (Py_SIZE(x) == 0)
  #define __Pyx_PyLong_IsPos(x)  (Py_SIZE(x) > 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  ((Py_SIZE(x) == 0) ? 0 : __Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  __Pyx_sst_abs(Py_SIZE(x))
  #define __Pyx_PyLong_SignedDigitCount(x)  Py_SIZE(x)
  #define __Pyx_PyLong_IsCompact(x)  (Py_SIZE(x) == 0 || Py_SIZE(x) == 1 || Py_SIZE(x) == -1)
  #define __Pyx_PyLong_CompactValue(x)\
        ((Py_SIZE(x) == 0) ? (sdigit) 0 : ((Py_SIZE(x) < 0) ? -(sdigit)__Pyx_PyLong_Digits(x)[0] : (sdigit)__Pyx_PyLong_Digits(x)[0]))
  typedef sdigit  __Pyx_compact_pylong;
  typedef digit  __Pyx_compact_upylong;
  #endif
  #if PY_VERSION_HEX >= 0x030C00A5
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->long_value.ob_digit)
  #else
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->ob_digit)
  #endif
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_UTF8
  #define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#elif __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
  #define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeASCII(c_str, size, NULL)
#else
  #define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
/* PretendToInitialize */
#ifdef __cplusplus
#include <type_traits>
template <typename T>
static void __Pyx_pretend_to_initialize(T* ptr) {
#if __cplusplus > 201103L
    if ((std::is_trivially_default_constructible<T>::value))
#endif
        *ptr = T();
    (void)ptr;
}
#else
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }
#endif


#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_m = NULL;
#endif
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * const __pyx_cfilenm = __FILE__;
static const char *__pyx_filename;

/* #### Code section: filename_table ### */

static const char* const __pyx_f[] = {
  "neologdn.pyx",
};
/* #### Code section: utility_code_proto_before_types ### */
/* IncludeStructmemberH.proto */
#include <structmember.h>

/* #### Code section: numeric_typedefs ### */
/* #### Code section: complex_type_declarations ### */
/* #### Code section: type_declarations ### */

/*--- Type declarations ---*/
struct __pyx_opt_args_8neologdn_shorten_repeat;
struct __pyx_opt_args_8neologdn_normalize;

/* "neologdn.pyx":110
 * 
 * 
 * cpdef unicode shorten_repeat(unicode text, int repeat_threshould, int max_repeat_substr_length=8):             # <<<<<<<<<<<<<<
 *     cdef int text_length, i, repeat_length, right_start, right_end, num_repeat_substrs
 *     cdef int upper_repeat_substr_length
*/
struct __pyx_opt_args_8neologdn_shorten_repeat {
  int __pyx_n;
  int max_repeat_substr_length;
};

/* "neologdn.pyx":140
 * 
 * 
 * cpdef unicode normalize(unicode text, int repeat=0, bint remove_space=True,             # <<<<<<<<<<<<<<
 *                         int max_repeat_substr_length=8, unicode tilde='remove'):
 *     cdef Py_UCS4 *buf = <Py_UCS4 *>malloc(sizeof(Py_UCS4) * (len(text) + 1))
*/
struct __pyx_opt_args_8neologdn_normalize {
  int __pyx_n;
  int repeat;
  int remove_space;
  int max_repeat_substr_length;
  PyObject *tilde;
};
/* #### Code section: utility_code_proto ### */

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, Py_ssize_t);
    void (*DECREF)(void*, PyObject*, Py_ssize_t);
    void (*GOTREF)(void*, PyObject*, Py_ssize_t);
    void (*GIVEREF)(void*, PyObject*, Py_ssize_t);
    void* (*SetupContext)(const char*, Py_ssize_t, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_XINCREF(r)  do { if((r) == NULL); else {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) == NULL); else {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) == NULL); else {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) == NULL); else {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContextNogil()
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_Py_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; Py_XDECREF(tmp);\
    } while (0)
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#if PY_VERSION_HEX >= 0x030C00A6
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->current_exception != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->current_exception ? (PyObject*) Py_TYPE(__pyx_tstate->current_exception) : (PyObject*) NULL)
#else
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->curexc_type != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->curexc_type)
#endif
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  (PyErr_Occurred() != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A6
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* DivInt[long].proto */
static CYTHON_INLINE long __Pyx_div_long(long, long);

/* PyUnicode_Substring.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_Substring(
            PyObject* text, Py_ssize_t start, Py_ssize_t stop);

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeConcatInPlace.proto */
# if CYTHON_COMPILING_IN_CPYTHON
    #if CYTHON_REFNANNY
        #define __Pyx_PyUnicode_ConcatInPlace(left, right) __Pyx_PyUnicode_ConcatInPlaceImpl(&left, right, __pyx_refnanny)
    #else
        #define __Pyx_PyUnicode_ConcatInPlace(left, right) __Pyx_PyUnicode_ConcatInPlaceImpl(&left, right)
    #endif
    static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **p_left, PyObject *right
        #if CYTHON_REFNANNY
        , void* __pyx_refnanny
        #endif
    );
#else
#define __Pyx_PyUnicode_ConcatInPlace __Pyx_PyUnicode_Concat
#endif
#define __Pyx_PyUnicode_ConcatInPlaceSafe(left, right) ((unlikely((left) == Py_None) || unlikely((right) == Py_None)) ?\
    PyNumber_InPlaceAdd(left, right) : __Pyx_PyUnicode_ConcatInPlace(left, right))

/* TupleAndListFromArray.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n);
#endif
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject* __Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n);
#endif

/* fastcall.proto */
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_Arg_VARARGS(args, i) PySequence_GetItem(args, i)
#elif CYTHON_ASSUME_SAFE_MACROS
    #define __Pyx_Arg_VARARGS(args, i) PyTuple_GET_ITEM(args, i)
#else
    #define __Pyx_Arg_VARARGS(args, i) PyTuple_GetItem(args, i)
#endif
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_Arg_NewRef_VARARGS(arg) __Pyx_NewRef(arg)
    #define __Pyx_Arg_XDECREF_VARARGS(arg) Py_XDECREF(arg)
#else
    #define __Pyx_Arg_NewRef_VARARGS(arg) arg
    #define __Pyx_Arg_XDECREF_VARARGS(arg)
#endif
#define __Pyx_NumKwargs_VARARGS(kwds) PyDict_Size(kwds)
#define __Pyx_KwValues_VARARGS(args, nargs) NULL
#define __Pyx_GetKwValue_VARARGS(kw, kwvalues, s) __Pyx_PyDict_GetItemStrWithError(kw, s)
#define __Pyx_KwargsAsDict_VARARGS(kw, kwvalues) PyDict_Copy(kw)
#if CYTHON_METH_FASTCALL
    #define __Pyx_Arg_FASTCALL(args, i) args[i]
    #define __Pyx_NumKwargs_FASTCALL(kwds) __Pyx_PyTuple_GET_SIZE(kwds)
    #define __Pyx_KwValues_FASTCALL(args, nargs) ((args) + (nargs))
    static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s);
  #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
    CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues);
  #else
    #define __Pyx_KwargsAsDict_FASTCALL(kw, kwvalues) _PyStack_AsDict(kwvalues, kw)
  #endif
    #define __Pyx_Arg_NewRef_FASTCALL(arg) arg  /* no-op, __Pyx_Arg_FASTCALL is direct and this needs
                                                   to have the same reference counting */
    #define __Pyx_Arg_XDECREF_FASTCALL(arg)
#else
    #define __Pyx_Arg_FASTCALL __Pyx_Arg_VARARGS
    #define __Pyx_NumKwargs_FASTCALL __Pyx_NumKwargs_VARARGS
    #define __Pyx_KwValues_FASTCALL __Pyx_KwValues_VARARGS
    #define __Pyx_GetKwValue_FASTCALL __Pyx_GetKwValue_VARARGS
    #define __Pyx_KwargsAsDict_FASTCALL __Pyx_KwargsAsDict_VARARGS
    #define __Pyx_Arg_NewRef_FASTCALL(arg) __Pyx_Arg_NewRef_VARARGS(arg)
    #define __Pyx_Arg_XDECREF_FASTCALL(arg) __Pyx_Arg_XDECREF_VARARGS(arg)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_VARARGS(args, start), stop - start)
#else
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) PyTuple_GetSlice(args, start, stop)
#endif
#if CYTHON_METH_FASTCALL || (CYTHON_COMPILING_IN_CPYTHON && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_FASTCALL(args, start), stop - start)
#else
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) PyTuple_GetSlice(args, start, stop)
#endif

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,
    const char* function_name);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely(__Pyx_IS_TYPE(obj, type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* unicode_iter.proto */
static CYTHON_INLINE int __Pyx_init_unicode_iteration(
    PyObject* ustring, Py_ssize_t *length, void** data, int *kind);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  do {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_mstate_global->__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  do {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* RaiseUnexpectedTypeError.proto */
static int __Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj);

/* PyVersionSanityCheck.proto */
static int __Pyx_VersionSanityCheck(void);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportDottedModule.proto */
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple);
static PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple);

/* ListPack.proto */
static PyObject *__Pyx_PyList_Pack(Py_ssize_t n, ...);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#if !CYTHON_VECTORCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if !CYTHON_VECTORCALL
#if PY_VERSION_HEX >= 0x03080000
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()
  #define __Pyx_PyFrame_GetLocalsplus(frame)  ((frame)->f_localsplus)
#else
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif
#endif
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectFastCall.proto */
#define __Pyx_PyObject_FastCall(func, args, nargs)  __Pyx_PyObject_FastCallDict(func, args, (size_t)(nargs), NULL)
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs);

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* FixUpExtensionType.proto */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type);
#endif

/* FetchSharedCythonModule.proto */
static PyObject *__Pyx_FetchSharedCythonABIModule(void);

/* FetchCommonType.proto */
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);
#else
static PyTypeObject* __Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases);
#endif

/* CallTypeTraverse.proto */
#if !CYTHON_USE_TYPE_SPECS || (!CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x03090000)
#define __Pyx_call_type_traverse(o, always_call, visit, arg) 0
#else
static int __Pyx_call_type_traverse(PyObject *o, int always_call, visitproc visit, void *arg);
#endif

/* PyMethodNew.proto */
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ);

/* PyVectorcallFastCallDict.proto */
#if CYTHON_METH_FASTCALL && (CYTHON_VECTORCALL || CYTHON_BACKPORT_VECTORCALL)
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw);
#endif

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CYFUNCTION_COROUTINE     0x08
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_CyFunction_GetClassObj(f)\
      (((__pyx_CyFunctionObject *) (f))->func_classobj)
#else
  #define __Pyx_CyFunction_GetClassObj(f)\
      ((PyObject*) ((PyCMethodObject *) (f))->mm_class)
#endif
#define __Pyx_CyFunction_SetClassObj(f, classobj)\
    __Pyx__CyFunction_SetClassObj((__pyx_CyFunctionObject *) (f), (classobj))
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject_HEAD
    PyObject *func;
#elif PY_VERSION_HEX < 0x030900B1
    PyCFunctionObject func;
#else
    PyCMethodObject func;
#endif
#if CYTHON_BACKPORT_VECTORCALL ||\
        (CYTHON_COMPILING_IN_LIMITED_API && CYTHON_METH_FASTCALL)
    __pyx_vectorcallfunc func_vectorcall;
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_classobj;
#endif
    PyObject *defaults;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
    PyObject *func_is_coroutine;
} __pyx_CyFunctionObject;
#undef __Pyx_CyOrPyCFunction_Check
#define __Pyx_CyFunction_Check(obj)  __Pyx_TypeCheck(obj, __pyx_mstate_global->__pyx_CyFunctionType)
#define __Pyx_CyOrPyCFunction_Check(obj)  __Pyx_TypeCheck2(obj, __pyx_mstate_global->__pyx_CyFunctionType, &PyCFunction_Type)
#define __Pyx_CyFunction_CheckExact(obj)  __Pyx_IS_TYPE(obj, __pyx_mstate_global->__pyx_CyFunctionType)
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc);
#undef __Pyx_IsSameCFunction
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCyOrCFunction(func, cfunc)
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj);
static CYTHON_INLINE PyObject *__Pyx_CyFunction_InitDefaults(PyObject *func,
                                                         PyTypeObject *defaults_type);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(PyObject *module);
#if CYTHON_METH_FASTCALL
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
#if CYTHON_BACKPORT_VECTORCALL || CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyFunction_func_vectorcall(f) (((__pyx_CyFunctionObject*)f)->func_vectorcall)
#else
#define __Pyx_CyFunction_func_vectorcall(f) (((PyCFunctionObject*)f)->vectorcall)
#endif
#endif

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* CLineInTraceback.proto */
#if CYTHON_CLINE_IN_TRACEBACK && CYTHON_CLINE_IN_TRACEBACK_RUNTIME
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#else
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#endif

/* CodeObjectCache.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject __Pyx_CachedCodeObjectType;
#else
typedef PyCodeObject __Pyx_CachedCodeObjectType;
#endif
typedef struct {
    __Pyx_CachedCodeObjectType* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static __Pyx_CachedCodeObjectType *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, __Pyx_CachedCodeObjectType* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* UnicodeAsUCS4.proto */
static CYTHON_INLINE Py_UCS4 __Pyx_PyUnicode_AsPy_UCS4(PyObject*);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* GCCDiagnostics.proto */
#if !defined(__INTEL_COMPILER) && defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* ObjectAsUCS4.proto */
static Py_UCS4 __Pyx__PyObject_AsPy_UCS4(PyObject*);
static CYTHON_INLINE Py_UCS4 __Pyx_PyObject_AsPy_UCS4(PyObject *x) {
    return (likely(PyUnicode_Check(x)) ? __Pyx_PyUnicode_AsPy_UCS4(x) : __Pyx__PyObject_AsPy_UCS4(x));
}

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyLong_As_int(PyObject *);

/* PyObjectVectorCallKwBuilder.proto */
CYTHON_UNUSED static int __Pyx_VectorcallBuilder_AddArg_Check(PyObject *key, PyObject *value, PyObject *builder, PyObject **args, int n);
#if CYTHON_VECTORCALL
#if PY_VERSION_HEX >= 0x03090000
#define __Pyx_Object_Vectorcall_CallFromBuilder PyObject_Vectorcall
#else
#define __Pyx_Object_Vectorcall_CallFromBuilder _PyObject_Vectorcall
#endif
#define __Pyx_MakeVectorcallBuilderKwds(n) PyTuple_New(n)
static int __Pyx_VectorcallBuilder_AddArg(PyObject *key, PyObject *value, PyObject *builder, PyObject **args, int n);
static int __Pyx_VectorcallBuilder_AddArgStr(const char *key, PyObject *value, PyObject *builder, PyObject **args, int n);
#else
#define __Pyx_Object_Vectorcall_CallFromBuilder __Pyx_PyObject_FastCallDict
#define __Pyx_MakeVectorcallBuilderKwds(n) PyDict_New()
#define __Pyx_VectorcallBuilder_AddArg(key, value, builder, args, n) PyDict_SetItem(builder, key, value)
#define __Pyx_VectorcallBuilder_AddArgStr(key, value, builder, args, n) PyDict_SetItemString(builder, key, value)
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyLong_From_int(int value);

/* FormatTypeName.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%U"
static __Pyx_TypeName __Pyx_PyType_GetName(PyTypeObject* tp);
#define __Pyx_DECREF_TypeName(obj) Py_XDECREF(obj)
#else
typedef const char *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%.200s"
#define __Pyx_PyType_GetName(tp) ((tp)->tp_name)
#define __Pyx_DECREF_TypeName(obj)
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyLong_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyLong_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) __Pyx_IsAnySubtype2(Py_TYPE(obj), (PyTypeObject *)type1, (PyTypeObject *)type2)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) (PyObject_TypeCheck(obj, (PyTypeObject *)type1) || PyObject_TypeCheck(obj, (PyTypeObject *)type2))
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2) {
    return PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2);
}
#endif
#define __Pyx_PyErr_ExceptionMatches2(err1, err2)  __Pyx_PyErr_GivenExceptionMatches2(__Pyx_PyErr_CurrentExceptionType(), err1, err2)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)
#ifdef PyExceptionInstance_Check
  #define __Pyx_PyBaseException_Check(obj) PyExceptionInstance_Check(obj)
#else
  #define __Pyx_PyBaseException_Check(obj) __Pyx_TypeCheck(obj, PyExc_BaseException)
#endif

/* GetRuntimeVersion.proto */
static unsigned long __Pyx_get_runtime_version(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer);

/* #### Code section: module_declarations ### */
/* CythonABIVersion.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
    #define __PYX_LIMITED_ABI_SUFFIX  "limited"
#else
    #define __PYX_LIMITED_ABI_SUFFIX
#endif
#ifndef __PYX_MONITORING_ABI_SUFFIX
    #define __PYX_MONITORING_ABI_SUFFIX
#endif
#if CYTHON_USE_TP_FINALIZE
    #define __PYX_TP_FINALIZE_ABI_SUFFIX
#else
    #define __PYX_TP_FINALIZE_ABI_SUFFIX "nofinalize"
#endif
#if CYTHON_USE_FREELISTS || !defined(__Pyx_AsyncGen_USED)
    #define __PYX_FREELISTS_ABI_SUFFIX
#else
    #define __PYX_FREELISTS_ABI_SUFFIX "nofreelists"
#endif
#define CYTHON_ABI  __PYX_ABI_VERSION __PYX_LIMITED_ABI_SUFFIX __PYX_MONITORING_ABI_SUFFIX __PYX_TP_FINALIZE_ABI_SUFFIX __PYX_FREELISTS_ABI_SUFFIX
#define __PYX_ABI_MODULE_NAME "_cython_" CYTHON_ABI
#define __PYX_TYPE_MODULE_PREFIX __PYX_ABI_MODULE_NAME "."


/* Module declarations from "libc.string" */

/* Module declarations from "libc.stdlib" */

/* Module declarations from "libcpp.utility" */

/* Module declarations from "libcpp.unordered_map" */

/* Module declarations from "libcpp.unordered_set" */

/* Module declarations from "neologdn" */
static std::unordered_map<Py_UCS4,Py_UCS4>  __pyx_v_8neologdn_conversion_map;
static std::unordered_map<Py_UCS4,Py_UCS4>  __pyx_v_8neologdn_kana_ten_map;
static std::unordered_map<Py_UCS4,Py_UCS4>  __pyx_v_8neologdn_kana_maru_map;
static std::unordered_set<Py_UCS4>  __pyx_v_8neologdn_blocks;
static std::unordered_set<Py_UCS4>  __pyx_v_8neologdn_basic_latin;
static PyObject *__pyx_f_8neologdn_py_ucs4_to_unicode(Py_UCS4 *, Py_ssize_t); /*proto*/
static PyObject *__pyx_f_8neologdn_shorten_repeat(PyObject *, int, int __pyx_skip_dispatch, struct __pyx_opt_args_8neologdn_shorten_repeat *__pyx_optional_args); /*proto*/
static PyObject *__pyx_f_8neologdn_normalize(PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_8neologdn_normalize *__pyx_optional_args); /*proto*/
/* #### Code section: typeinfo ### */
/* #### Code section: before_global_var ### */
#define __Pyx_MODULE_NAME "neologdn"
extern int __pyx_module_is_main_neologdn;
int __pyx_module_is_main_neologdn = 0;

/* Implementation of "neologdn" */
/* #### Code section: global_var ### */
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_map;
/* #### Code section: string_decls ### */
static const char __pyx_k_[] = ".";
static const char __pyx_k_0[] = "0";
static const char __pyx_k_1[] = "1";
static const char __pyx_k_2[] = "2";
static const char __pyx_k_3[] = "3";
static const char __pyx_k_4[] = "4";
static const char __pyx_k_5[] = "5";
static const char __pyx_k_6[] = "6";
static const char __pyx_k_7[] = "7";
static const char __pyx_k_8[] = "8";
static const char __pyx_k_9[] = "9";
static const char __pyx_k_A[] = "A";
static const char __pyx_k_B[] = "B";
static const char __pyx_k_C[] = "C";
static const char __pyx_k_D[] = "D";
static const char __pyx_k_E[] = "E";
static const char __pyx_k_F[] = "F";
static const char __pyx_k_G[] = "G";
static const char __pyx_k_H[] = "H";
static const char __pyx_k_I[] = "I";
static const char __pyx_k_J[] = "J";
static const char __pyx_k_K[] = "K";
static const char __pyx_k_L[] = "L";
static const char __pyx_k_M[] = "M";
static const char __pyx_k_N[] = "N";
static const char __pyx_k_O[] = "O";
static const char __pyx_k_P[] = "P";
static const char __pyx_k_Q[] = "Q";
static const char __pyx_k_R[] = "R";
static const char __pyx_k_S[] = "S";
static const char __pyx_k_T[] = "T";
static const char __pyx_k_U[] = "U";
static const char __pyx_k_V[] = "V";
static const char __pyx_k_W[] = "W";
static const char __pyx_k_X[] = "X";
static const char __pyx_k_Y[] = "Y";
static const char __pyx_k_Z[] = "Z";
static const char __pyx_k_a[] = "a";
static const char __pyx_k_b[] = "b";
static const char __pyx_k_c[] = "c";
static const char __pyx_k_d[] = "d";
static const char __pyx_k_e[] = "e";
static const char __pyx_k_f[] = "f";
static const char __pyx_k_g[] = "g";
static const char __pyx_k_h[] = "h";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_j[] = "j";
static const char __pyx_k_k[] = "k";
static const char __pyx_k_l[] = "l";
static const char __pyx_k_m[] = "m";
static const char __pyx_k_n[] = "n";
static const char __pyx_k_o[] = "o";
static const char __pyx_k_p[] = "p";
static const char __pyx_k_q[] = "q";
static const char __pyx_k_r[] = "r";
static const char __pyx_k_s[] = "s";
static const char __pyx_k_t[] = "t";
static const char __pyx_k_u[] = "u";
static const char __pyx_k_v[] = "v";
static const char __pyx_k_w[] = "w";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_y[] = "y";
static const char __pyx_k_z[] = "z";
static const char __pyx_k__2[] = "\357\275\201";
static const char __pyx_k__3[] = "\357\275\202";
static const char __pyx_k__4[] = "\357\275\203";
static const char __pyx_k__5[] = "\357\275\204";
static const char __pyx_k__6[] = "\357\275\205";
static const char __pyx_k__7[] = "\357\275\206";
static const char __pyx_k__8[] = "\357\275\207";
static const char __pyx_k__9[] = "\357\275\210";
static const char __pyx_k__10[] = "\357\275\211";
static const char __pyx_k__11[] = "\357\275\212";
static const char __pyx_k__12[] = "\357\275\213";
static const char __pyx_k__13[] = "\357\275\214";
static const char __pyx_k__14[] = "\357\275\215";
static const char __pyx_k__15[] = "\357\275\216";
static const char __pyx_k__16[] = "\357\275\217";
static const char __pyx_k__17[] = "\357\275\220";
static const char __pyx_k__18[] = "\357\275\221";
static const char __pyx_k__19[] = "\357\275\222";
static const char __pyx_k__20[] = "\357\275\223";
static const char __pyx_k__21[] = "\357\275\224";
static const char __pyx_k__22[] = "\357\275\225";
static const char __pyx_k__23[] = "\357\275\226";
static const char __pyx_k__24[] = "\357\275\227";
static const char __pyx_k__25[] = "\357\275\230";
static const char __pyx_k__26[] = "\357\275\231";
static const char __pyx_k__27[] = "\357\275\232";
static const char __pyx_k__28[] = "\357\274\241";
static const char __pyx_k__29[] = "\357\274\242";
static const char __pyx_k__30[] = "\357\274\243";
static const char __pyx_k__31[] = "\357\274\244";
static const char __pyx_k__32[] = "\357\274\245";
static const char __pyx_k__33[] = "\357\274\246";
static const char __pyx_k__34[] = "\357\274\247";
static const char __pyx_k__35[] = "\357\274\250";
static const char __pyx_k__36[] = "\357\274\251";
static const char __pyx_k__37[] = "\357\274\252";
static const char __pyx_k__38[] = "\357\274\253";
static const char __pyx_k__39[] = "\357\274\254";
static const char __pyx_k__40[] = "\357\274\255";
static const char __pyx_k__41[] = "\357\274\256";
static const char __pyx_k__42[] = "\357\274\257";
static const char __pyx_k__43[] = "\357\274\260";
static const char __pyx_k__44[] = "\357\274\261";
static const char __pyx_k__45[] = "\357\274\262";
static const char __pyx_k__46[] = "\357\274\263";
static const char __pyx_k__47[] = "\357\274\264";
static const char __pyx_k__48[] = "\357\274\265";
static const char __pyx_k__49[] = "\357\274\266";
static const char __pyx_k__50[] = "\357\274\267";
static const char __pyx_k__51[] = "\357\274\270";
static const char __pyx_k__52[] = "\357\274\271";
static const char __pyx_k__53[] = "\357\274\272";
static const char __pyx_k__54[] = "\357\274\201";
static const char __pyx_k__55[] = "!";
static const char __pyx_k__56[] = "\342\200\235";
static const char __pyx_k__57[] = "\"";
static const char __pyx_k__58[] = "\357\274\203";
static const char __pyx_k__59[] = "#";
static const char __pyx_k__60[] = "\357\274\204";
static const char __pyx_k__61[] = "$";
static const char __pyx_k__62[] = "\357\274\205";
static const char __pyx_k__63[] = "%";
static const char __pyx_k__64[] = "\357\274\206";
static const char __pyx_k__65[] = "&";
static const char __pyx_k__66[] = "\342\200\231";
static const char __pyx_k__67[] = "'";
static const char __pyx_k__68[] = "\357\274\210";
static const char __pyx_k__69[] = "(";
static const char __pyx_k__70[] = "\357\274\211";
static const char __pyx_k__71[] = ")";
static const char __pyx_k__72[] = "\357\274\212";
static const char __pyx_k__73[] = "*";
static const char __pyx_k__74[] = "\357\274\213";
static const char __pyx_k__75[] = "+";
static const char __pyx_k__76[] = "\357\274\214";
static const char __pyx_k__77[] = ",";
static const char __pyx_k__78[] = "\342\210\222";
static const char __pyx_k__79[] = "-";
static const char __pyx_k__80[] = "\357\274\216";
static const char __pyx_k__81[] = "\357\274\217";
static const char __pyx_k__82[] = "/";
static const char __pyx_k__83[] = "\357\274\232";
static const char __pyx_k__84[] = ":";
static const char __pyx_k__85[] = "\357\274\233";
static const char __pyx_k__86[] = ";";
static const char __pyx_k__87[] = "\357\274\234";
static const char __pyx_k__88[] = "<";
static const char __pyx_k__89[] = "\357\274\235";
static const char __pyx_k__90[] = "=";
static const char __pyx_k__91[] = "\357\274\236";
static const char __pyx_k__92[] = ">";
static const char __pyx_k__93[] = "\357\274\237";
static const char __pyx_k__94[] = "?";
static const char __pyx_k__95[] = "\357\274\240";
static const char __pyx_k__96[] = "@";
static const char __pyx_k__97[] = "\357\274\273";
static const char __pyx_k__98[] = "[";
static const char __pyx_k__99[] = "\302\245";
static const char __pyx_k_chr[] = "chr";
static const char __pyx_k_map[] = "map";
static const char __pyx_k_sys[] = "sys";
static const char __pyx_k_KANA[] = "KANA";
static const char __pyx_k__100[] = "\\";
static const char __pyx_k__101[] = "\357\274\275";
static const char __pyx_k__102[] = "]";
static const char __pyx_k__103[] = "\357\274\276";
static const char __pyx_k__104[] = "^";
static const char __pyx_k__105[] = "\357\274\277";
static const char __pyx_k__106[] = "_";
static const char __pyx_k__107[] = "\342\200\230";
static const char __pyx_k__108[] = "`";
static const char __pyx_k__109[] = "\357\275\233";
static const char __pyx_k__110[] = "{";
static const char __pyx_k__111[] = "\357\275\234";
static const char __pyx_k__112[] = "|";
static const char __pyx_k__113[] = "\357\275\235";
static const char __pyx_k__114[] = "}";
static const char __pyx_k__115[] = "\357\275\261";
static const char __pyx_k__116[] = "\343\202\242";
static const char __pyx_k__117[] = "\357\275\262";
static const char __pyx_k__118[] = "\343\202\244";
static const char __pyx_k__119[] = "\357\275\263";
static const char __pyx_k__120[] = "\343\202\246";
static const char __pyx_k__121[] = "\357\275\264";
static const char __pyx_k__122[] = "\343\202\250";
static const char __pyx_k__123[] = "\357\275\265";
static const char __pyx_k__124[] = "\343\202\252";
static const char __pyx_k__125[] = "\357\275\266";
static const char __pyx_k__126[] = "\343\202\253";
static const char __pyx_k__127[] = "\357\275\267";
static const char __pyx_k__128[] = "\343\202\255";
static const char __pyx_k__129[] = "\357\275\270";
static const char __pyx_k__130[] = "\343\202\257";
static const char __pyx_k__131[] = "\357\275\271";
static const char __pyx_k__132[] = "\343\202\261";
static const char __pyx_k__133[] = "\357\275\272";
static const char __pyx_k__134[] = "\343\202\263";
static const char __pyx_k__135[] = "\357\275\273";
static const char __pyx_k__136[] = "\343\202\265";
static const char __pyx_k__137[] = "\357\275\274";
static const char __pyx_k__138[] = "\343\202\267";
static const char __pyx_k__139[] = "\357\275\275";
static const char __pyx_k__140[] = "\343\202\271";
static const char __pyx_k__141[] = "\357\275\276";
static const char __pyx_k__142[] = "\343\202\273";
static const char __pyx_k__143[] = "\357\275\277";
static const char __pyx_k__144[] = "\343\202\275";
static const char __pyx_k__145[] = "\357\276\200";
static const char __pyx_k__146[] = "\343\202\277";
static const char __pyx_k__147[] = "\357\276\201";
static const char __pyx_k__148[] = "\343\203\201";
static const char __pyx_k__149[] = "\357\276\202";
static const char __pyx_k__150[] = "\343\203\204";
static const char __pyx_k__151[] = "\357\276\203";
static const char __pyx_k__152[] = "\343\203\206";
static const char __pyx_k__153[] = "\357\276\204";
static const char __pyx_k__154[] = "\343\203\210";
static const char __pyx_k__155[] = "\357\276\205";
static const char __pyx_k__156[] = "\343\203\212";
static const char __pyx_k__157[] = "\357\276\206";
static const char __pyx_k__158[] = "\343\203\213";
static const char __pyx_k__159[] = "\357\276\207";
static const char __pyx_k__160[] = "\343\203\214";
static const char __pyx_k__161[] = "\357\276\210";
static const char __pyx_k__162[] = "\343\203\215";
static const char __pyx_k__163[] = "\357\276\211";
static const char __pyx_k__164[] = "\343\203\216";
static const char __pyx_k__165[] = "\357\276\212";
static const char __pyx_k__166[] = "\343\203\217";
static const char __pyx_k__167[] = "\357\276\213";
static const char __pyx_k__168[] = "\343\203\222";
static const char __pyx_k__169[] = "\357\276\214";
static const char __pyx_k__170[] = "\343\203\225";
static const char __pyx_k__171[] = "\357\276\215";
static const char __pyx_k__172[] = "\343\203\230";
static const char __pyx_k__173[] = "\357\276\216";
static const char __pyx_k__174[] = "\343\203\233";
static const char __pyx_k__175[] = "\357\276\217";
static const char __pyx_k__176[] = "\343\203\236";
static const char __pyx_k__177[] = "\357\276\220";
static const char __pyx_k__178[] = "\343\203\237";
static const char __pyx_k__179[] = "\357\276\221";
static const char __pyx_k__180[] = "\343\203\240";
static const char __pyx_k__181[] = "\357\276\222";
static const char __pyx_k__182[] = "\343\203\241";
static const char __pyx_k__183[] = "\357\276\223";
static const char __pyx_k__184[] = "\343\203\242";
static const char __pyx_k__185[] = "\357\276\224";
static const char __pyx_k__186[] = "\343\203\244";
static const char __pyx_k__187[] = "\357\276\225";
static const char __pyx_k__188[] = "\343\203\246";
static const char __pyx_k__189[] = "\357\276\226";
static const char __pyx_k__190[] = "\343\203\250";
static const char __pyx_k__191[] = "\357\276\227";
static const char __pyx_k__192[] = "\343\203\251";
static const char __pyx_k__193[] = "\357\276\230";
static const char __pyx_k__194[] = "\343\203\252";
static const char __pyx_k__195[] = "\357\276\231";
static const char __pyx_k__196[] = "\343\203\253";
static const char __pyx_k__197[] = "\357\276\232";
static const char __pyx_k__198[] = "\343\203\254";
static const char __pyx_k__199[] = "\357\276\233";
static const char __pyx_k__200[] = "\343\203\255";
static const char __pyx_k__201[] = "\357\276\234";
static const char __pyx_k__202[] = "\343\203\257";
static const char __pyx_k__203[] = "\357\275\246";
static const char __pyx_k__204[] = "\343\203\262";
static const char __pyx_k__205[] = "\357\276\235";
static const char __pyx_k__206[] = "\343\203\263";
static const char __pyx_k__207[] = "\357\275\247";
static const char __pyx_k__208[] = "\343\202\241";
static const char __pyx_k__209[] = "\357\275\250";
static const char __pyx_k__210[] = "\343\202\243";
static const char __pyx_k__211[] = "\357\275\251";
static const char __pyx_k__212[] = "\343\202\245";
static const char __pyx_k__213[] = "\357\275\252";
static const char __pyx_k__214[] = "\343\202\247";
static const char __pyx_k__215[] = "\357\275\253";
static const char __pyx_k__216[] = "\343\202\251";
static const char __pyx_k__217[] = "\357\275\257";
static const char __pyx_k__218[] = "\343\203\203";
static const char __pyx_k__219[] = "\357\275\254";
static const char __pyx_k__220[] = "\343\203\243";
static const char __pyx_k__221[] = "\357\275\255";
static const char __pyx_k__222[] = "\343\203\245";
static const char __pyx_k__223[] = "\357\275\256";
static const char __pyx_k__224[] = "\343\203\247";
static const char __pyx_k__225[] = "\357\275\241";
static const char __pyx_k__226[] = "\343\200\202";
static const char __pyx_k__227[] = "\357\275\244";
static const char __pyx_k__228[] = "\343\200\201";
static const char __pyx_k__229[] = "\357\275\245";
static const char __pyx_k__230[] = "\343\203\273";
static const char __pyx_k__231[] = "\343\202\233";
static const char __pyx_k__232[] = "\357\276\236";
static const char __pyx_k__233[] = "\343\202\234";
static const char __pyx_k__234[] = "\357\276\237";
static const char __pyx_k__235[] = "\357\275\242";
static const char __pyx_k__236[] = "\343\200\214";
static const char __pyx_k__237[] = "\357\275\243";
static const char __pyx_k__238[] = "\343\200\215";
static const char __pyx_k__239[] = "\357\275\260";
static const char __pyx_k__240[] = "\343\203\274";
static const char __pyx_k__241[] = "\357\274\220";
static const char __pyx_k__242[] = "\357\274\221";
static const char __pyx_k__243[] = "\357\274\222";
static const char __pyx_k__244[] = "\357\274\223";
static const char __pyx_k__245[] = "\357\274\224";
static const char __pyx_k__246[] = "\357\274\225";
static const char __pyx_k__247[] = "\357\274\226";
static const char __pyx_k__248[] = "\357\274\227";
static const char __pyx_k__249[] = "\357\274\230";
static const char __pyx_k__250[] = "\357\274\231";
static const char __pyx_k__251[] = "\343\202\254";
static const char __pyx_k__252[] = "\343\202\256";
static const char __pyx_k__253[] = "\343\202\260";
static const char __pyx_k__254[] = "\343\202\262";
static const char __pyx_k__255[] = "\343\202\264";
static const char __pyx_k__256[] = "\343\202\266";
static const char __pyx_k__257[] = "\343\202\270";
static const char __pyx_k__258[] = "\343\202\272";
static const char __pyx_k__259[] = "\343\202\274";
static const char __pyx_k__260[] = "\343\202\276";
static const char __pyx_k__261[] = "\343\203\200";
static const char __pyx_k__262[] = "\343\203\202";
static const char __pyx_k__263[] = "\343\203\205";
static const char __pyx_k__264[] = "\343\203\207";
static const char __pyx_k__265[] = "\343\203\211";
static const char __pyx_k__266[] = "\343\203\220";
static const char __pyx_k__267[] = "\343\203\223";
static const char __pyx_k__268[] = "\343\203\226";
static const char __pyx_k__269[] = "\343\203\231";
static const char __pyx_k__270[] = "\343\203\234";
static const char __pyx_k__271[] = "\343\203\264";
static const char __pyx_k__272[] = "\343\201\206";
static const char __pyx_k__273[] = "\343\202\224";
static const char __pyx_k__274[] = "\343\203\221";
static const char __pyx_k__275[] = "\343\203\224";
static const char __pyx_k__276[] = "\343\203\227";
static const char __pyx_k__277[] = "\343\203\232";
static const char __pyx_k__278[] = "\343\203\235";
static const char __pyx_k__279[] = "\343\201\257";
static const char __pyx_k__280[] = "\343\201\261";
static const char __pyx_k__281[] = "\343\201\262";
static const char __pyx_k__282[] = "\343\201\264";
static const char __pyx_k__283[] = "\343\201\265";
static const char __pyx_k__284[] = "\343\201\267";
static const char __pyx_k__285[] = "\343\201\270";
static const char __pyx_k__286[] = "\343\201\272";
static const char __pyx_k__287[] = "\343\201\273";
static const char __pyx_k__288[] = "\343\201\275";
static const char __pyx_k__289[] = "\313\227";
static const char __pyx_k__290[] = "\326\212";
static const char __pyx_k__291[] = "\342\200\220";
static const char __pyx_k__292[] = "\342\200\221";
static const char __pyx_k__293[] = "\342\200\222";
static const char __pyx_k__294[] = "\342\200\223";
static const char __pyx_k__295[] = "\342\201\203";
static const char __pyx_k__296[] = "\342\201\273";
static const char __pyx_k__297[] = "\342\202\213";
static const char __pyx_k__298[] = "\357\271\243";
static const char __pyx_k__299[] = "\357\274\215";
static const char __pyx_k__300[] = "\342\200\224";
static const char __pyx_k__301[] = "\342\200\225";
static const char __pyx_k__302[] = "\342\224\200";
static const char __pyx_k__303[] = "\342\224\201";
static const char __pyx_k__304[] = "~";
static const char __pyx_k__305[] = "\342\210\274";
static const char __pyx_k__306[] = "\342\210\276";
static const char __pyx_k__307[] = "\343\200\234";
static const char __pyx_k__308[] = "\343\200\260";
static const char __pyx_k__309[] = "\357\275\236";
static const char __pyx_k__310[] = " ";
static const char __pyx_k__311[] = "\343\200\200";
static const char __pyx_k_func[] = "__func__";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_spec[] = "__spec__";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_text[] = "text";
static const char __pyx_k_0_5_4[] = "0.5.4";
static const char __pyx_k_ASCII[] = "ASCII";
static const char __pyx_k_DIGIT[] = "DIGIT";
static const char __pyx_k_SPACE[] = "SPACE";
static const char __pyx_k_after[] = "after";
static const char __pyx_k_chain[] = "chain";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_tilde[] = "tilde";
static const char __pyx_k_TILDES[] = "TILDES";
static const char __pyx_k_before[] = "before";
static const char __pyx_k_ignore[] = "ignore";
static const char __pyx_k_remove[] = "remove";
static const char __pyx_k_repeat[] = "repeat";
static const char __pyx_k_HIPHENS[] = "HIPHENS";
static const char __pyx_k_VERSION[] = "VERSION";
static const char __pyx_k_version[] = "__version__";
static const char __pyx_k_CHOONPUS[] = "CHOONPUS";
static const char __pyx_k_KANA_TEN[] = "KANA_TEN";
static const char __pyx_k_add_note[] = "add_note";
static const char __pyx_k_neologdn[] = "neologdn";
static const char __pyx_k_KANA_MARU[] = "KANA_MARU";
static const char __pyx_k_itertools[] = "itertools";
static const char __pyx_k_normalize[] = "normalize";
static const char __pyx_k_char_codes[] = "char_codes";
static const char __pyx_k_initializing[] = "_initializing";
static const char __pyx_k_is_coroutine[] = "_is_coroutine";
static const char __pyx_k_neologdn_pyx[] = "neologdn.pyx";
static const char __pyx_k_remove_space[] = "remove_space";
static const char __pyx_k_version_info[] = "version_info";
static const char __pyx_k_shorten_repeat[] = "shorten_repeat";
static const char __pyx_k_normalize_zenkaku[] = "normalize_zenkaku";
static const char __pyx_k_repeat_threshould[] = "repeat_threshould";
static const char __pyx_k_asyncio_coroutines[] = "asyncio.coroutines";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_max_repeat_substr_length[] = "max_repeat_substr_length";
static const char __pyx_k_Bc_c_l_Cs_D_A_1_B_A_U_3a_T_A[] = "\320\000_\320_`\360\n\000\005\t\210\001\330\004\n\210\"\210B\210c\220\021\220!\330\010\026\220c\230\021\230!\340\010&\240l\260\"\260C\260s\270!\330\010\013\320\013$\240D\320(A\300\022\3001\330\014)\320)B\300\"\300A\340\010\014\320\014\035\230U\240!\2403\240a\330\014\025\220T\230\021\230\"\230A\230Q\230a\330\014\032\230\"\230B\230a\330\014\030\230\014\240B\240a\330\014\033\2304\230q\240\014\250A\330\014!\240\021\330\014\022\220'\230\023\230M\250\024\250Z\260s\270!\330\020&\240a\330\020\037\230q\330\020\035\230Q\330\020\037\230t\2401\240L\260\001\330\014\017\320\017\"\240\"\240A\330\020\027\220t\2302\230Q\230a\230}\250A\320-@\300\002\300$\300a\300q\310\001\310\035\320VW\320WX\330\010\r\210Q\330\004\013\2101";
static const char __pyx_k_11Fa5Fa_6_S_r_1_1_Q_Q_2S_S_CvV1[] = "\320\0001\3201F\300a\3305F\300a\330\004\030\230\013\2406\250\021\320*:\270#\270S\300\001\300\026\300r\310\021\340\004\033\2301\330\004\023\2201\330\004\035\230Q\340\004\010\210\005\210Q\330\010\013\2102\210S\220\001\330\014\020\220\001\330\014\020\220\005\220S\230\004\230C\230v\240V\2501\250G\2604\260q\330\020\021\330\021\026\220c\230\024\230T\240\024\240R\240r\250\024\250[\270\006\270a\270q\330\020\037\230q\330\020\023\2201\220G\2301\330\021\022\330\020\027\220q\340\020\023\2201\220G\2301\340\014\017\210r\220\023\220A\330\020\023\2205\230\003\2301\330\024\025\340\024\027\220q\230\007\230t\2401\330\020\037\230q\330\021\023\2203\220a\330\020\023\2205\230\003\2301\330\024\025\340\024\027\220q\230\007\230t\2401\330\020\037\230q\330\021\023\2203\220a\330\020\023\2206\230\023\230A\330\024\027\220q\230\007\230q\330\025\033\2303\230a\330\024\027\220q\230\007\230t\2401\330\025\033\2303\230a\330\024\027\220q\230\007\230t\2401\340\024\025\330\020\037\230q\340\020\023\220>\240\026\240q\250\001\330\024\030\230\016\240a\240q\330\020\023\2202\220S\230\004\230D\240\014\250F\260!\2601\330\024\033\2301\330\024\030\230\014\240A\240Q\330\025\027\220s\230$\230d\240-\250v\260Q\260a\330\024\033\2301\330\024\030\230\r\240Q\240a\330\020\023\220=\240\004\240F\250&\260\001\260\023\260D\270\001\330\024\033\2301\330\020\037\230q\330\020\023\2201\220G\2301\330\010\017\210q\330\010\017\210q\340\004\007\200s\210!\2103\210a\210s\220#\220Q\330\010\017\210q\330\004\007\200q\210\007\210q\340\004\027\320\027)\250\021\250%\250q\330\004\010\210\001\210\021\340\004\007\200q\330\010\017\210~\230Q\230e\2408\2501\330\004\013\2101";
static const char __pyx_k_Note_that_Cython_is_deliberately[] = "Note that Cython is deliberately stricter than PEP-484 and rejects subclasses of builtin types. If you need to pass subclasses then set the 'annotation_typing' directive to False.";
/* #### Code section: decls ### */
static PyObject *__pyx_pf_8neologdn_shorten_repeat(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text, int __pyx_v_repeat_threshould, int __pyx_v_max_repeat_substr_length); /* proto */
static PyObject *__pyx_pf_8neologdn_2normalize(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text, int __pyx_v_repeat, int __pyx_v_remove_space, int __pyx_v_max_repeat_substr_length, PyObject *__pyx_v_tilde); /* proto */
/* #### Code section: late_includes ### */
/* #### Code section: module_state ### */
/* SmallCodeConfig */
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

typedef struct {
  PyObject *__pyx_d;
  PyObject *__pyx_b;
  PyObject *__pyx_cython_runtime;
  PyObject *__pyx_empty_tuple;
  PyObject *__pyx_empty_bytes;
  PyObject *__pyx_empty_unicode;
  #ifdef __Pyx_CyFunction_USED
  PyTypeObject *__pyx_CyFunctionType;
  #endif
  #ifdef __Pyx_FusedFunction_USED
  PyTypeObject *__pyx_FusedFunctionType;
  #endif
  #ifdef __Pyx_Generator_USED
  PyTypeObject *__pyx_GeneratorType;
  #endif
  #ifdef __Pyx_IterableCoroutine_USED
  PyTypeObject *__pyx_IterableCoroutineType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineAwaitType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineType;
  #endif
  PyObject *__pyx_tuple[206];
  PyObject *__pyx_codeobj_tab[2];
  PyObject *__pyx_string_tab[419];
  PyObject *__pyx_int_0;
  PyObject *__pyx_int_4;
  PyObject *__pyx_int_5;
  PyObject *__pyx_int_8;
  PyObject *__pyx_int_128;
  PyObject *__pyx_int_12289;
  PyObject *__pyx_int_12352;
  PyObject *__pyx_int_12448;
  PyObject *__pyx_int_12544;
  PyObject *__pyx_int_19968;
  PyObject *__pyx_int_40960;
  PyObject *__pyx_int_65280;
  PyObject *__pyx_int_65520;
/* #### Code section: module_state_contents ### */
/* CachedMethodType.module_state_decls */
#if CYTHON_COMPILING_IN_LIMITED_API
PyObject *__Pyx_CachedMethodType;
#endif

/* #### Code section: module_state_end ### */
} __pyx_mstatetype;

#if CYTHON_USE_MODULE_STATE
#ifdef __cplusplus
namespace {
extern struct PyModuleDef __pyx_moduledef;
} /* anonymous namespace */
#else
static struct PyModuleDef __pyx_moduledef;
#endif

#define __pyx_mstate_global (__Pyx_PyModule_GetState(PyState_FindModule(&__pyx_moduledef)))

#define __pyx_m (PyState_FindModule(&__pyx_moduledef))
#else
static __pyx_mstatetype __pyx_mstate_global_static =
#ifdef __cplusplus
    {};
#else
    {0};
#endif
static __pyx_mstatetype *__pyx_mstate_global = &__pyx_mstate_global_static;
#endif
/* #### Code section: constant_name_defines ### */
#define __pyx_kp_u_ __pyx_string_tab[0]
#define __pyx_kp_u_0 __pyx_string_tab[1]
#define __pyx_kp_u_0_5_4 __pyx_string_tab[2]
#define __pyx_kp_u_1 __pyx_string_tab[3]
#define __pyx_kp_u_2 __pyx_string_tab[4]
#define __pyx_kp_u_3 __pyx_string_tab[5]
#define __pyx_kp_u_4 __pyx_string_tab[6]
#define __pyx_kp_u_5 __pyx_string_tab[7]
#define __pyx_kp_u_6 __pyx_string_tab[8]
#define __pyx_kp_u_7 __pyx_string_tab[9]
#define __pyx_kp_u_8 __pyx_string_tab[10]
#define __pyx_kp_u_9 __pyx_string_tab[11]
#define __pyx_n_u_A __pyx_string_tab[12]
#define __pyx_n_u_ASCII __pyx_string_tab[13]
#define __pyx_n_u_B __pyx_string_tab[14]
#define __pyx_n_u_C __pyx_string_tab[15]
#define __pyx_n_u_CHOONPUS __pyx_string_tab[16]
#define __pyx_n_u_D __pyx_string_tab[17]
#define __pyx_n_u_DIGIT __pyx_string_tab[18]
#define __pyx_n_u_E __pyx_string_tab[19]
#define __pyx_n_u_F __pyx_string_tab[20]
#define __pyx_n_u_G __pyx_string_tab[21]
#define __pyx_n_u_H __pyx_string_tab[22]
#define __pyx_n_u_HIPHENS __pyx_string_tab[23]
#define __pyx_n_u_I __pyx_string_tab[24]
#define __pyx_n_u_J __pyx_string_tab[25]
#define __pyx_n_u_K __pyx_string_tab[26]
#define __pyx_n_u_KANA __pyx_string_tab[27]
#define __pyx_n_u_KANA_MARU __pyx_string_tab[28]
#define __pyx_n_u_KANA_TEN __pyx_string_tab[29]
#define __pyx_n_u_L __pyx_string_tab[30]
#define __pyx_n_u_M __pyx_string_tab[31]
#define __pyx_n_u_N __pyx_string_tab[32]
#define __pyx_kp_u_Note_that_Cython_is_deliberately __pyx_string_tab[33]
#define __pyx_n_u_O __pyx_string_tab[34]
#define __pyx_n_u_P __pyx_string_tab[35]
#define __pyx_n_u_Q __pyx_string_tab[36]
#define __pyx_n_u_R __pyx_string_tab[37]
#define __pyx_n_u_S __pyx_string_tab[38]
#define __pyx_n_u_SPACE __pyx_string_tab[39]
#define __pyx_n_u_T __pyx_string_tab[40]
#define __pyx_n_u_TILDES __pyx_string_tab[41]
#define __pyx_n_u_U __pyx_string_tab[42]
#define __pyx_n_u_V __pyx_string_tab[43]
#define __pyx_n_u_VERSION __pyx_string_tab[44]
#define __pyx_n_u_W __pyx_string_tab[45]
#define __pyx_n_u_X __pyx_string_tab[46]
#define __pyx_n_u_Y __pyx_string_tab[47]
#define __pyx_n_u_Z __pyx_string_tab[48]
#define __pyx_n_u__10 __pyx_string_tab[49]
#define __pyx_kp_u__100 __pyx_string_tab[50]
#define __pyx_kp_u__101 __pyx_string_tab[51]
#define __pyx_kp_u__102 __pyx_string_tab[52]
#define __pyx_kp_u__103 __pyx_string_tab[53]
#define __pyx_kp_u__104 __pyx_string_tab[54]
#define __pyx_kp_u__105 __pyx_string_tab[55]
#define __pyx_n_u__106 __pyx_string_tab[56]
#define __pyx_kp_u__107 __pyx_string_tab[57]
#define __pyx_kp_u__108 __pyx_string_tab[58]
#define __pyx_kp_u__109 __pyx_string_tab[59]
#define __pyx_n_u__11 __pyx_string_tab[60]
#define __pyx_kp_u__110 __pyx_string_tab[61]
#define __pyx_kp_u__111 __pyx_string_tab[62]
#define __pyx_kp_u__112 __pyx_string_tab[63]
#define __pyx_kp_u__113 __pyx_string_tab[64]
#define __pyx_kp_u__114 __pyx_string_tab[65]
#define __pyx_n_u__115 __pyx_string_tab[66]
#define __pyx_n_u__116 __pyx_string_tab[67]
#define __pyx_n_u__117 __pyx_string_tab[68]
#define __pyx_n_u__118 __pyx_string_tab[69]
#define __pyx_n_u__119 __pyx_string_tab[70]
#define __pyx_n_u__12 __pyx_string_tab[71]
#define __pyx_n_u__120 __pyx_string_tab[72]
#define __pyx_n_u__121 __pyx_string_tab[73]
#define __pyx_n_u__122 __pyx_string_tab[74]
#define __pyx_n_u__123 __pyx_string_tab[75]
#define __pyx_n_u__124 __pyx_string_tab[76]
#define __pyx_n_u__125 __pyx_string_tab[77]
#define __pyx_n_u__126 __pyx_string_tab[78]
#define __pyx_n_u__127 __pyx_string_tab[79]
#define __pyx_n_u__128 __pyx_string_tab[80]
#define __pyx_n_u__129 __pyx_string_tab[81]
#define __pyx_n_u__13 __pyx_string_tab[82]
#define __pyx_n_u__130 __pyx_string_tab[83]
#define __pyx_n_u__131 __pyx_string_tab[84]
#define __pyx_n_u__132 __pyx_string_tab[85]
#define __pyx_n_u__133 __pyx_string_tab[86]
#define __pyx_n_u__134 __pyx_string_tab[87]
#define __pyx_n_u__135 __pyx_string_tab[88]
#define __pyx_n_u__136 __pyx_string_tab[89]
#define __pyx_n_u__137 __pyx_string_tab[90]
#define __pyx_n_u__138 __pyx_string_tab[91]
#define __pyx_n_u__139 __pyx_string_tab[92]
#define __pyx_n_u__14 __pyx_string_tab[93]
#define __pyx_n_u__140 __pyx_string_tab[94]
#define __pyx_n_u__141 __pyx_string_tab[95]
#define __pyx_n_u__142 __pyx_string_tab[96]
#define __pyx_n_u__143 __pyx_string_tab[97]
#define __pyx_n_u__144 __pyx_string_tab[98]
#define __pyx_n_u__145 __pyx_string_tab[99]
#define __pyx_n_u__146 __pyx_string_tab[100]
#define __pyx_n_u__147 __pyx_string_tab[101]
#define __pyx_n_u__148 __pyx_string_tab[102]
#define __pyx_n_u__149 __pyx_string_tab[103]
#define __pyx_n_u__15 __pyx_string_tab[104]
#define __pyx_n_u__150 __pyx_string_tab[105]
#define __pyx_n_u__151 __pyx_string_tab[106]
#define __pyx_n_u__152 __pyx_string_tab[107]
#define __pyx_n_u__153 __pyx_string_tab[108]
#define __pyx_n_u__154 __pyx_string_tab[109]
#define __pyx_n_u__155 __pyx_string_tab[110]
#define __pyx_n_u__156 __pyx_string_tab[111]
#define __pyx_n_u__157 __pyx_string_tab[112]
#define __pyx_n_u__158 __pyx_string_tab[113]
#define __pyx_n_u__159 __pyx_string_tab[114]
#define __pyx_n_u__16 __pyx_string_tab[115]
#define __pyx_n_u__160 __pyx_string_tab[116]
#define __pyx_n_u__161 __pyx_string_tab[117]
#define __pyx_n_u__162 __pyx_string_tab[118]
#define __pyx_n_u__163 __pyx_string_tab[119]
#define __pyx_n_u__164 __pyx_string_tab[120]
#define __pyx_n_u__165 __pyx_string_tab[121]
#define __pyx_n_u__166 __pyx_string_tab[122]
#define __pyx_n_u__167 __pyx_string_tab[123]
#define __pyx_n_u__168 __pyx_string_tab[124]
#define __pyx_n_u__169 __pyx_string_tab[125]
#define __pyx_n_u__17 __pyx_string_tab[126]
#define __pyx_n_u__170 __pyx_string_tab[127]
#define __pyx_n_u__171 __pyx_string_tab[128]
#define __pyx_n_u__172 __pyx_string_tab[129]
#define __pyx_n_u__173 __pyx_string_tab[130]
#define __pyx_n_u__174 __pyx_string_tab[131]
#define __pyx_n_u__175 __pyx_string_tab[132]
#define __pyx_n_u__176 __pyx_string_tab[133]
#define __pyx_n_u__177 __pyx_string_tab[134]
#define __pyx_n_u__178 __pyx_string_tab[135]
#define __pyx_n_u__179 __pyx_string_tab[136]
#define __pyx_n_u__18 __pyx_string_tab[137]
#define __pyx_n_u__180 __pyx_string_tab[138]
#define __pyx_n_u__181 __pyx_string_tab[139]
#define __pyx_n_u__182 __pyx_string_tab[140]
#define __pyx_n_u__183 __pyx_string_tab[141]
#define __pyx_n_u__184 __pyx_string_tab[142]
#define __pyx_n_u__185 __pyx_string_tab[143]
#define __pyx_n_u__186 __pyx_string_tab[144]
#define __pyx_n_u__187 __pyx_string_tab[145]
#define __pyx_n_u__188 __pyx_string_tab[146]
#define __pyx_n_u__189 __pyx_string_tab[147]
#define __pyx_n_u__19 __pyx_string_tab[148]
#define __pyx_n_u__190 __pyx_string_tab[149]
#define __pyx_n_u__191 __pyx_string_tab[150]
#define __pyx_n_u__192 __pyx_string_tab[151]
#define __pyx_n_u__193 __pyx_string_tab[152]
#define __pyx_n_u__194 __pyx_string_tab[153]
#define __pyx_n_u__195 __pyx_string_tab[154]
#define __pyx_n_u__196 __pyx_string_tab[155]
#define __pyx_n_u__197 __pyx_string_tab[156]
#define __pyx_n_u__198 __pyx_string_tab[157]
#define __pyx_n_u__199 __pyx_string_tab[158]
#define __pyx_n_u__2 __pyx_string_tab[159]
#define __pyx_n_u__20 __pyx_string_tab[160]
#define __pyx_n_u__200 __pyx_string_tab[161]
#define __pyx_n_u__201 __pyx_string_tab[162]
#define __pyx_n_u__202 __pyx_string_tab[163]
#define __pyx_n_u__203 __pyx_string_tab[164]
#define __pyx_n_u__204 __pyx_string_tab[165]
#define __pyx_n_u__205 __pyx_string_tab[166]
#define __pyx_n_u__206 __pyx_string_tab[167]
#define __pyx_n_u__207 __pyx_string_tab[168]
#define __pyx_n_u__208 __pyx_string_tab[169]
#define __pyx_n_u__209 __pyx_string_tab[170]
#define __pyx_n_u__21 __pyx_string_tab[171]
#define __pyx_n_u__210 __pyx_string_tab[172]
#define __pyx_n_u__211 __pyx_string_tab[173]
#define __pyx_n_u__212 __pyx_string_tab[174]
#define __pyx_n_u__213 __pyx_string_tab[175]
#define __pyx_n_u__214 __pyx_string_tab[176]
#define __pyx_n_u__215 __pyx_string_tab[177]
#define __pyx_n_u__216 __pyx_string_tab[178]
#define __pyx_n_u__217 __pyx_string_tab[179]
#define __pyx_n_u__218 __pyx_string_tab[180]
#define __pyx_n_u__219 __pyx_string_tab[181]
#define __pyx_n_u__22 __pyx_string_tab[182]
#define __pyx_n_u__220 __pyx_string_tab[183]
#define __pyx_n_u__221 __pyx_string_tab[184]
#define __pyx_n_u__222 __pyx_string_tab[185]
#define __pyx_n_u__223 __pyx_string_tab[186]
#define __pyx_n_u__224 __pyx_string_tab[187]
#define __pyx_kp_u__225 __pyx_string_tab[188]
#define __pyx_kp_u__226 __pyx_string_tab[189]
#define __pyx_kp_u__227 __pyx_string_tab[190]
#define __pyx_kp_u__228 __pyx_string_tab[191]
#define __pyx_kp_u__229 __pyx_string_tab[192]
#define __pyx_n_u__23 __pyx_string_tab[193]
#define __pyx_kp_u__230 __pyx_string_tab[194]
#define __pyx_kp_u__231 __pyx_string_tab[195]
#define __pyx_n_u__232 __pyx_string_tab[196]
#define __pyx_kp_u__233 __pyx_string_tab[197]
#define __pyx_n_u__234 __pyx_string_tab[198]
#define __pyx_kp_u__235 __pyx_string_tab[199]
#define __pyx_kp_u__236 __pyx_string_tab[200]
#define __pyx_kp_u__237 __pyx_string_tab[201]
#define __pyx_kp_u__238 __pyx_string_tab[202]
#define __pyx_n_u__239 __pyx_string_tab[203]
#define __pyx_n_u__24 __pyx_string_tab[204]
#define __pyx_n_u__240 __pyx_string_tab[205]
#define __pyx_n_u__241 __pyx_string_tab[206]
#define __pyx_n_u__242 __pyx_string_tab[207]
#define __pyx_n_u__243 __pyx_string_tab[208]
#define __pyx_n_u__244 __pyx_string_tab[209]
#define __pyx_n_u__245 __pyx_string_tab[210]
#define __pyx_n_u__246 __pyx_string_tab[211]
#define __pyx_n_u__247 __pyx_string_tab[212]
#define __pyx_n_u__248 __pyx_string_tab[213]
#define __pyx_n_u__249 __pyx_string_tab[214]
#define __pyx_n_u__25 __pyx_string_tab[215]
#define __pyx_n_u__250 __pyx_string_tab[216]
#define __pyx_n_u__251 __pyx_string_tab[217]
#define __pyx_n_u__252 __pyx_string_tab[218]
#define __pyx_n_u__253 __pyx_string_tab[219]
#define __pyx_n_u__254 __pyx_string_tab[220]
#define __pyx_n_u__255 __pyx_string_tab[221]
#define __pyx_n_u__256 __pyx_string_tab[222]
#define __pyx_n_u__257 __pyx_string_tab[223]
#define __pyx_n_u__258 __pyx_string_tab[224]
#define __pyx_n_u__259 __pyx_string_tab[225]
#define __pyx_n_u__26 __pyx_string_tab[226]
#define __pyx_n_u__260 __pyx_string_tab[227]
#define __pyx_n_u__261 __pyx_string_tab[228]
#define __pyx_n_u__262 __pyx_string_tab[229]
#define __pyx_n_u__263 __pyx_string_tab[230]
#define __pyx_n_u__264 __pyx_string_tab[231]
#define __pyx_n_u__265 __pyx_string_tab[232]
#define __pyx_n_u__266 __pyx_string_tab[233]
#define __pyx_n_u__267 __pyx_string_tab[234]
#define __pyx_n_u__268 __pyx_string_tab[235]
#define __pyx_n_u__269 __pyx_string_tab[236]
#define __pyx_n_u__27 __pyx_string_tab[237]
#define __pyx_n_u__270 __pyx_string_tab[238]
#define __pyx_n_u__271 __pyx_string_tab[239]
#define __pyx_n_u__272 __pyx_string_tab[240]
#define __pyx_n_u__273 __pyx_string_tab[241]
#define __pyx_n_u__274 __pyx_string_tab[242]
#define __pyx_n_u__275 __pyx_string_tab[243]
#define __pyx_n_u__276 __pyx_string_tab[244]
#define __pyx_n_u__277 __pyx_string_tab[245]
#define __pyx_n_u__278 __pyx_string_tab[246]
#define __pyx_n_u__279 __pyx_string_tab[247]
#define __pyx_n_u__28 __pyx_string_tab[248]
#define __pyx_n_u__280 __pyx_string_tab[249]
#define __pyx_n_u__281 __pyx_string_tab[250]
#define __pyx_n_u__282 __pyx_string_tab[251]
#define __pyx_n_u__283 __pyx_string_tab[252]
#define __pyx_n_u__284 __pyx_string_tab[253]
#define __pyx_n_u__285 __pyx_string_tab[254]
#define __pyx_n_u__286 __pyx_string_tab[255]
#define __pyx_n_u__287 __pyx_string_tab[256]
#define __pyx_n_u__288 __pyx_string_tab[257]
#define __pyx_kp_u__289 __pyx_string_tab[258]
#define __pyx_n_u__29 __pyx_string_tab[259]
#define __pyx_kp_u__290 __pyx_string_tab[260]
#define __pyx_kp_u__291 __pyx_string_tab[261]
#define __pyx_kp_u__292 __pyx_string_tab[262]
#define __pyx_kp_u__293 __pyx_string_tab[263]
#define __pyx_kp_u__294 __pyx_string_tab[264]
#define __pyx_kp_u__295 __pyx_string_tab[265]
#define __pyx_kp_u__296 __pyx_string_tab[266]
#define __pyx_kp_u__297 __pyx_string_tab[267]
#define __pyx_kp_u__298 __pyx_string_tab[268]
#define __pyx_kp_u__299 __pyx_string_tab[269]
#define __pyx_n_u__3 __pyx_string_tab[270]
#define __pyx_n_u__30 __pyx_string_tab[271]
#define __pyx_kp_u__300 __pyx_string_tab[272]
#define __pyx_kp_u__301 __pyx_string_tab[273]
#define __pyx_kp_u__302 __pyx_string_tab[274]
#define __pyx_kp_u__303 __pyx_string_tab[275]
#define __pyx_kp_u__304 __pyx_string_tab[276]
#define __pyx_kp_u__305 __pyx_string_tab[277]
#define __pyx_kp_u__306 __pyx_string_tab[278]
#define __pyx_kp_u__307 __pyx_string_tab[279]
#define __pyx_kp_u__308 __pyx_string_tab[280]
#define __pyx_kp_u__309 __pyx_string_tab[281]
#define __pyx_n_u__31 __pyx_string_tab[282]
#define __pyx_kp_u__310 __pyx_string_tab[283]
#define __pyx_kp_u__311 __pyx_string_tab[284]
#define __pyx_n_u__32 __pyx_string_tab[285]
#define __pyx_n_u__33 __pyx_string_tab[286]
#define __pyx_n_u__34 __pyx_string_tab[287]
#define __pyx_n_u__35 __pyx_string_tab[288]
#define __pyx_n_u__36 __pyx_string_tab[289]
#define __pyx_n_u__37 __pyx_string_tab[290]
#define __pyx_n_u__38 __pyx_string_tab[291]
#define __pyx_n_u__39 __pyx_string_tab[292]
#define __pyx_n_u__4 __pyx_string_tab[293]
#define __pyx_n_u__40 __pyx_string_tab[294]
#define __pyx_n_u__41 __pyx_string_tab[295]
#define __pyx_n_u__42 __pyx_string_tab[296]
#define __pyx_n_u__43 __pyx_string_tab[297]
#define __pyx_n_u__44 __pyx_string_tab[298]
#define __pyx_n_u__45 __pyx_string_tab[299]
#define __pyx_n_u__46 __pyx_string_tab[300]
#define __pyx_n_u__47 __pyx_string_tab[301]
#define __pyx_n_u__48 __pyx_string_tab[302]
#define __pyx_n_u__49 __pyx_string_tab[303]
#define __pyx_n_u__5 __pyx_string_tab[304]
#define __pyx_n_u__50 __pyx_string_tab[305]
#define __pyx_n_u__51 __pyx_string_tab[306]
#define __pyx_n_u__52 __pyx_string_tab[307]
#define __pyx_n_u__53 __pyx_string_tab[308]
#define __pyx_kp_u__54 __pyx_string_tab[309]
#define __pyx_kp_u__55 __pyx_string_tab[310]
#define __pyx_kp_u__56 __pyx_string_tab[311]
#define __pyx_kp_u__57 __pyx_string_tab[312]
#define __pyx_kp_u__58 __pyx_string_tab[313]
#define __pyx_kp_u__59 __pyx_string_tab[314]
#define __pyx_n_u__6 __pyx_string_tab[315]
#define __pyx_kp_u__60 __pyx_string_tab[316]
#define __pyx_kp_u__61 __pyx_string_tab[317]
#define __pyx_kp_u__62 __pyx_string_tab[318]
#define __pyx_kp_u__63 __pyx_string_tab[319]
#define __pyx_kp_u__64 __pyx_string_tab[320]
#define __pyx_kp_u__65 __pyx_string_tab[321]
#define __pyx_kp_u__66 __pyx_string_tab[322]
#define __pyx_kp_u__67 __pyx_string_tab[323]
#define __pyx_kp_u__68 __pyx_string_tab[324]
#define __pyx_kp_u__69 __pyx_string_tab[325]
#define __pyx_n_u__7 __pyx_string_tab[326]
#define __pyx_kp_u__70 __pyx_string_tab[327]
#define __pyx_kp_u__71 __pyx_string_tab[328]
#define __pyx_kp_u__72 __pyx_string_tab[329]
#define __pyx_kp_u__73 __pyx_string_tab[330]
#define __pyx_kp_u__74 __pyx_string_tab[331]
#define __pyx_kp_u__75 __pyx_string_tab[332]
#define __pyx_kp_u__76 __pyx_string_tab[333]
#define __pyx_kp_u__77 __pyx_string_tab[334]
#define __pyx_kp_u__78 __pyx_string_tab[335]
#define __pyx_kp_u__79 __pyx_string_tab[336]
#define __pyx_n_u__8 __pyx_string_tab[337]
#define __pyx_kp_u__80 __pyx_string_tab[338]
#define __pyx_kp_u__81 __pyx_string_tab[339]
#define __pyx_kp_u__82 __pyx_string_tab[340]
#define __pyx_kp_u__83 __pyx_string_tab[341]
#define __pyx_kp_u__84 __pyx_string_tab[342]
#define __pyx_kp_u__85 __pyx_string_tab[343]
#define __pyx_kp_u__86 __pyx_string_tab[344]
#define __pyx_kp_u__87 __pyx_string_tab[345]
#define __pyx_kp_u__88 __pyx_string_tab[346]
#define __pyx_kp_u__89 __pyx_string_tab[347]
#define __pyx_n_u__9 __pyx_string_tab[348]
#define __pyx_kp_u__90 __pyx_string_tab[349]
#define __pyx_kp_u__91 __pyx_string_tab[350]
#define __pyx_kp_u__92 __pyx_string_tab[351]
#define __pyx_kp_u__93 __pyx_string_tab[352]
#define __pyx_kp_u__94 __pyx_string_tab[353]
#define __pyx_kp_u__95 __pyx_string_tab[354]
#define __pyx_kp_u__96 __pyx_string_tab[355]
#define __pyx_kp_u__97 __pyx_string_tab[356]
#define __pyx_kp_u__98 __pyx_string_tab[357]
#define __pyx_kp_u__99 __pyx_string_tab[358]
#define __pyx_n_u_a __pyx_string_tab[359]
#define __pyx_kp_u_add_note __pyx_string_tab[360]
#define __pyx_n_u_after __pyx_string_tab[361]
#define __pyx_n_u_asyncio_coroutines __pyx_string_tab[362]
#define __pyx_n_u_b __pyx_string_tab[363]
#define __pyx_n_u_before __pyx_string_tab[364]
#define __pyx_n_u_c __pyx_string_tab[365]
#define __pyx_n_u_chain __pyx_string_tab[366]
#define __pyx_n_u_char_codes __pyx_string_tab[367]
#define __pyx_n_u_chr __pyx_string_tab[368]
#define __pyx_n_u_cline_in_traceback __pyx_string_tab[369]
#define __pyx_n_u_d __pyx_string_tab[370]
#define __pyx_n_u_e __pyx_string_tab[371]
#define __pyx_n_u_f __pyx_string_tab[372]
#define __pyx_n_u_func __pyx_string_tab[373]
#define __pyx_n_u_g __pyx_string_tab[374]
#define __pyx_n_u_h __pyx_string_tab[375]
#define __pyx_n_u_i __pyx_string_tab[376]
#define __pyx_n_u_ignore __pyx_string_tab[377]
#define __pyx_n_u_initializing __pyx_string_tab[378]
#define __pyx_n_u_is_coroutine __pyx_string_tab[379]
#define __pyx_n_u_itertools __pyx_string_tab[380]
#define __pyx_n_u_j __pyx_string_tab[381]
#define __pyx_n_u_k __pyx_string_tab[382]
#define __pyx_n_u_l __pyx_string_tab[383]
#define __pyx_n_u_m __pyx_string_tab[384]
#define __pyx_n_u_main __pyx_string_tab[385]
#define __pyx_n_u_map __pyx_string_tab[386]
#define __pyx_n_u_max_repeat_substr_length __pyx_string_tab[387]
#define __pyx_n_u_n __pyx_string_tab[388]
#define __pyx_n_u_name __pyx_string_tab[389]
#define __pyx_n_u_neologdn __pyx_string_tab[390]
#define __pyx_kp_u_neologdn_pyx __pyx_string_tab[391]
#define __pyx_n_u_normalize __pyx_string_tab[392]
#define __pyx_n_u_normalize_zenkaku __pyx_string_tab[393]
#define __pyx_n_u_o __pyx_string_tab[394]
#define __pyx_n_u_p __pyx_string_tab[395]
#define __pyx_n_u_q __pyx_string_tab[396]
#define __pyx_n_u_r __pyx_string_tab[397]
#define __pyx_n_u_range __pyx_string_tab[398]
#define __pyx_n_u_remove __pyx_string_tab[399]
#define __pyx_n_u_remove_space __pyx_string_tab[400]
#define __pyx_n_u_repeat __pyx_string_tab[401]
#define __pyx_n_u_repeat_threshould __pyx_string_tab[402]
#define __pyx_n_u_s __pyx_string_tab[403]
#define __pyx_n_u_shorten_repeat __pyx_string_tab[404]
#define __pyx_n_u_spec __pyx_string_tab[405]
#define __pyx_n_u_sys __pyx_string_tab[406]
#define __pyx_n_u_t __pyx_string_tab[407]
#define __pyx_n_u_test __pyx_string_tab[408]
#define __pyx_n_u_text __pyx_string_tab[409]
#define __pyx_n_u_tilde __pyx_string_tab[410]
#define __pyx_n_u_u __pyx_string_tab[411]
#define __pyx_n_u_v __pyx_string_tab[412]
#define __pyx_n_u_version __pyx_string_tab[413]
#define __pyx_n_u_version_info __pyx_string_tab[414]
#define __pyx_n_u_w __pyx_string_tab[415]
#define __pyx_n_u_x __pyx_string_tab[416]
#define __pyx_n_u_y __pyx_string_tab[417]
#define __pyx_n_u_z __pyx_string_tab[418]
/* #### Code section: module_state_clear ### */
#if CYTHON_USE_MODULE_STATE
static CYTHON_SMALL_CODE int __pyx_m_clear(PyObject *m) {
  __pyx_mstatetype *clear_module_state = __Pyx_PyModule_GetState(m);
  if (!clear_module_state) return 0;
  Py_CLEAR(clear_module_state->__pyx_d);
  Py_CLEAR(clear_module_state->__pyx_b);
  Py_CLEAR(clear_module_state->__pyx_cython_runtime);
  Py_CLEAR(clear_module_state->__pyx_empty_tuple);
  Py_CLEAR(clear_module_state->__pyx_empty_bytes);
  Py_CLEAR(clear_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_CLEAR(clear_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_CLEAR(clear_module_state->__pyx_FusedFunctionType);
  #endif
  for (int i=0; i<206; ++i) { Py_CLEAR(clear_module_state->__pyx_tuple[i]); }
  for (int i=0; i<2; ++i) { Py_CLEAR(clear_module_state->__pyx_codeobj_tab[i]); }
  for (int i=0; i<419; ++i) { Py_CLEAR(clear_module_state->__pyx_string_tab[i]); }
  Py_CLEAR(clear_module_state->__pyx_int_0);
  Py_CLEAR(clear_module_state->__pyx_int_4);
  Py_CLEAR(clear_module_state->__pyx_int_5);
  Py_CLEAR(clear_module_state->__pyx_int_8);
  Py_CLEAR(clear_module_state->__pyx_int_128);
  Py_CLEAR(clear_module_state->__pyx_int_12289);
  Py_CLEAR(clear_module_state->__pyx_int_12352);
  Py_CLEAR(clear_module_state->__pyx_int_12448);
  Py_CLEAR(clear_module_state->__pyx_int_12544);
  Py_CLEAR(clear_module_state->__pyx_int_19968);
  Py_CLEAR(clear_module_state->__pyx_int_40960);
  Py_CLEAR(clear_module_state->__pyx_int_65280);
  Py_CLEAR(clear_module_state->__pyx_int_65520);
  return 0;
}
#endif
/* #### Code section: module_state_traverse ### */
#if CYTHON_USE_MODULE_STATE
static CYTHON_SMALL_CODE int __pyx_m_traverse(PyObject *m, visitproc visit, void *arg) {
  __pyx_mstatetype *traverse_module_state = __Pyx_PyModule_GetState(m);
  if (!traverse_module_state) return 0;
  Py_VISIT(traverse_module_state->__pyx_d);
  Py_VISIT(traverse_module_state->__pyx_b);
  Py_VISIT(traverse_module_state->__pyx_cython_runtime);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_empty_tuple);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_empty_bytes);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_VISIT(traverse_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_VISIT(traverse_module_state->__pyx_FusedFunctionType);
  #endif
  for (int i=0; i<206; ++i) { __Pyx_VISIT_CONST(traverse_module_state->__pyx_tuple[i]); }
  for (int i=0; i<2; ++i) { __Pyx_VISIT_CONST(traverse_module_state->__pyx_codeobj_tab[i]); }
  for (int i=0; i<419; ++i) { __Pyx_VISIT_CONST(traverse_module_state->__pyx_string_tab[i]); }
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_0);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_4);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_5);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_8);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_128);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_12289);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_12352);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_12448);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_12544);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_19968);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_40960);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_65280);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_65520);
  return 0;
}
#endif
/* #### Code section: module_code ### */

/* "neologdn.pyx":18
 * 
 * 
 * cdef py_ucs4_to_unicode(Py_UCS4 *ucs4_ptr, Py_ssize_t length):             # <<<<<<<<<<<<<<
 *     return PyUnicode_DecodeUTF32(<char*>ucs4_ptr, sizeof(Py_UCS4)*length, NULL, NULL)
 * 
*/

static PyObject *__pyx_f_8neologdn_py_ucs4_to_unicode(Py_UCS4 *__pyx_v_ucs4_ptr, Py_ssize_t __pyx_v_length) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_ucs4_to_unicode", 0);

  /* "neologdn.pyx":19
 * 
 * cdef py_ucs4_to_unicode(Py_UCS4 *ucs4_ptr, Py_ssize_t length):
 *     return PyUnicode_DecodeUTF32(<char*>ucs4_ptr, sizeof(Py_UCS4)*length, NULL, NULL)             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyUnicode_DecodeUTF32(((char *)__pyx_v_ucs4_ptr), ((sizeof(Py_UCS4)) * __pyx_v_length), NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "neologdn.pyx":18
 * 
 * 
 * cdef py_ucs4_to_unicode(Py_UCS4 *ucs4_ptr, Py_ssize_t length):             # <<<<<<<<<<<<<<
 *     return PyUnicode_DecodeUTF32(<char*>ucs4_ptr, sizeof(Py_UCS4)*length, NULL, NULL)
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neologdn.py_ucs4_to_unicode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neologdn.pyx":110
 * 
 * 
 * cpdef unicode shorten_repeat(unicode text, int repeat_threshould, int max_repeat_substr_length=8):             # <<<<<<<<<<<<<<
 *     cdef int text_length, i, repeat_length, right_start, right_end, num_repeat_substrs
 *     cdef int upper_repeat_substr_length
*/

static PyObject *__pyx_pw_8neologdn_1shorten_repeat(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_f_8neologdn_shorten_repeat(PyObject *__pyx_v_text, int __pyx_v_repeat_threshould, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_8neologdn_shorten_repeat *__pyx_optional_args) {
  int __pyx_v_max_repeat_substr_length = ((int)8);
  int __pyx_v_text_length;
  int __pyx_v_i;
  int __pyx_v_repeat_length;
  int __pyx_v_right_start;
  int __pyx_v_right_end;
  int __pyx_v_num_repeat_substrs;
  int __pyx_v_upper_repeat_substr_length;
  PyObject *__pyx_v_substr = 0;
  PyObject *__pyx_v_right_substr = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("shorten_repeat", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_max_repeat_substr_length = __pyx_optional_args->max_repeat_substr_length;
    }
  }
  __Pyx_INCREF(__pyx_v_text);

  /* "neologdn.pyx":115
 *     cdef unicode substr, right_substr
 * 
 *     i = 0             # <<<<<<<<<<<<<<
 *     while i < len(text):
 *         text_length = len(text)
*/
  __pyx_v_i = 0;

  /* "neologdn.pyx":116
 * 
 *     i = 0
 *     while i < len(text):             # <<<<<<<<<<<<<<
 *         text_length = len(text)
 * 
*/
  while (1) {
    if (unlikely(__pyx_v_text == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 116, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyUnicode_GET_LENGTH(__pyx_v_text); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 116, __pyx_L1_error)
    __pyx_t_2 = (__pyx_v_i < __pyx_t_1);
    if (!__pyx_t_2) break;

    /* "neologdn.pyx":117
 *     i = 0
 *     while i < len(text):
 *         text_length = len(text)             # <<<<<<<<<<<<<<
 * 
 *         upper_repeat_substr_length = (text_length - i) // 2
*/
    if (unlikely(__pyx_v_text == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 117, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyUnicode_GET_LENGTH(__pyx_v_text); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 117, __pyx_L1_error)
    __pyx_v_text_length = __pyx_t_1;

    /* "neologdn.pyx":119
 *         text_length = len(text)
 * 
 *         upper_repeat_substr_length = (text_length - i) // 2             # <<<<<<<<<<<<<<
 *         if max_repeat_substr_length and max_repeat_substr_length < upper_repeat_substr_length:
 *             upper_repeat_substr_length = max_repeat_substr_length + 1
*/
    __pyx_v_upper_repeat_substr_length = __Pyx_div_long((__pyx_v_text_length - __pyx_v_i), 2);

    /* "neologdn.pyx":120
 * 
 *         upper_repeat_substr_length = (text_length - i) // 2
 *         if max_repeat_substr_length and max_repeat_substr_length < upper_repeat_substr_length:             # <<<<<<<<<<<<<<
 *             upper_repeat_substr_length = max_repeat_substr_length + 1
 * 
*/
    __pyx_t_3 = (__pyx_v_max_repeat_substr_length != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_3 = (__pyx_v_max_repeat_substr_length < __pyx_v_upper_repeat_substr_length);
    __pyx_t_2 = __pyx_t_3;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_2) {

      /* "neologdn.pyx":121
 *         upper_repeat_substr_length = (text_length - i) // 2
 *         if max_repeat_substr_length and max_repeat_substr_length < upper_repeat_substr_length:
 *             upper_repeat_substr_length = max_repeat_substr_length + 1             # <<<<<<<<<<<<<<
 * 
 *         for repeat_length in range(1, upper_repeat_substr_length):
*/
      __pyx_v_upper_repeat_substr_length = (__pyx_v_max_repeat_substr_length + 1);

      /* "neologdn.pyx":120
 * 
 *         upper_repeat_substr_length = (text_length - i) // 2
 *         if max_repeat_substr_length and max_repeat_substr_length < upper_repeat_substr_length:             # <<<<<<<<<<<<<<
 *             upper_repeat_substr_length = max_repeat_substr_length + 1
 * 
*/
    }

    /* "neologdn.pyx":123
 *             upper_repeat_substr_length = max_repeat_substr_length + 1
 * 
 *         for repeat_length in range(1, upper_repeat_substr_length):             # <<<<<<<<<<<<<<
 *             substr = text[i:i+repeat_length]
 *             right_start = i + repeat_length
*/
    __pyx_t_4 = __pyx_v_upper_repeat_substr_length;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 1; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_repeat_length = __pyx_t_6;

      /* "neologdn.pyx":124
 * 
 *         for repeat_length in range(1, upper_repeat_substr_length):
 *             substr = text[i:i+repeat_length]             # <<<<<<<<<<<<<<
 *             right_start = i + repeat_length
 *             right_end = right_start + repeat_length
*/
      if (unlikely(__pyx_v_text == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 124, __pyx_L1_error)
      }
      __pyx_t_7 = __Pyx_PyUnicode_Substring(__pyx_v_text, __pyx_v_i, (__pyx_v_i + __pyx_v_repeat_length)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 124, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_XDECREF_SET(__pyx_v_substr, ((PyObject*)__pyx_t_7));
      __pyx_t_7 = 0;

      /* "neologdn.pyx":125
 *         for repeat_length in range(1, upper_repeat_substr_length):
 *             substr = text[i:i+repeat_length]
 *             right_start = i + repeat_length             # <<<<<<<<<<<<<<
 *             right_end = right_start + repeat_length
 *             right_substr = text[right_start:right_end]
*/
      __pyx_v_right_start = (__pyx_v_i + __pyx_v_repeat_length);

      /* "neologdn.pyx":126
 *             substr = text[i:i+repeat_length]
 *             right_start = i + repeat_length
 *             right_end = right_start + repeat_length             # <<<<<<<<<<<<<<
 *             right_substr = text[right_start:right_end]
 *             num_repeat_substrs = 1
*/
      __pyx_v_right_end = (__pyx_v_right_start + __pyx_v_repeat_length);

      /* "neologdn.pyx":127
 *             right_start = i + repeat_length
 *             right_end = right_start + repeat_length
 *             right_substr = text[right_start:right_end]             # <<<<<<<<<<<<<<
 *             num_repeat_substrs = 1
 *             while substr == right_substr and right_end <= text_length:
*/
      if (unlikely(__pyx_v_text == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 127, __pyx_L1_error)
      }
      __pyx_t_7 = __Pyx_PyUnicode_Substring(__pyx_v_text, __pyx_v_right_start, __pyx_v_right_end); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 127, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_XDECREF_SET(__pyx_v_right_substr, ((PyObject*)__pyx_t_7));
      __pyx_t_7 = 0;

      /* "neologdn.pyx":128
 *             right_end = right_start + repeat_length
 *             right_substr = text[right_start:right_end]
 *             num_repeat_substrs = 1             # <<<<<<<<<<<<<<
 *             while substr == right_substr and right_end <= text_length:
 *                 num_repeat_substrs += 1
*/
      __pyx_v_num_repeat_substrs = 1;

      /* "neologdn.pyx":129
 *             right_substr = text[right_start:right_end]
 *             num_repeat_substrs = 1
 *             while substr == right_substr and right_end <= text_length:             # <<<<<<<<<<<<<<
 *                 num_repeat_substrs += 1
 *                 right_start += repeat_length
*/
      while (1) {
        __pyx_t_3 = (__Pyx_PyUnicode_Equals(__pyx_v_substr, __pyx_v_right_substr, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 129, __pyx_L1_error)
        if (__pyx_t_3) {
        } else {
          __pyx_t_2 = __pyx_t_3;
          goto __pyx_L12_bool_binop_done;
        }
        __pyx_t_3 = (__pyx_v_right_end <= __pyx_v_text_length);
        __pyx_t_2 = __pyx_t_3;
        __pyx_L12_bool_binop_done:;
        if (!__pyx_t_2) break;

        /* "neologdn.pyx":130
 *             num_repeat_substrs = 1
 *             while substr == right_substr and right_end <= text_length:
 *                 num_repeat_substrs += 1             # <<<<<<<<<<<<<<
 *                 right_start += repeat_length
 *                 right_end += repeat_length
*/
        __pyx_v_num_repeat_substrs = (__pyx_v_num_repeat_substrs + 1);

        /* "neologdn.pyx":131
 *             while substr == right_substr and right_end <= text_length:
 *                 num_repeat_substrs += 1
 *                 right_start += repeat_length             # <<<<<<<<<<<<<<
 *                 right_end += repeat_length
 *                 right_substr = text[right_start:right_end]
*/
        __pyx_v_right_start = (__pyx_v_right_start + __pyx_v_repeat_length);

        /* "neologdn.pyx":132
 *                 num_repeat_substrs += 1
 *                 right_start += repeat_length
 *                 right_end += repeat_length             # <<<<<<<<<<<<<<
 *                 right_substr = text[right_start:right_end]
 *             if num_repeat_substrs > repeat_threshould:
*/
        __pyx_v_right_end = (__pyx_v_right_end + __pyx_v_repeat_length);

        /* "neologdn.pyx":133
 *                 right_start += repeat_length
 *                 right_end += repeat_length
 *                 right_substr = text[right_start:right_end]             # <<<<<<<<<<<<<<
 *             if num_repeat_substrs > repeat_threshould:
 *                 text = text[:i+repeat_length*repeat_threshould] + text[i+repeat_length*num_repeat_substrs:]
*/
        if (unlikely(__pyx_v_text == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(0, 133, __pyx_L1_error)
        }
        __pyx_t_7 = __Pyx_PyUnicode_Substring(__pyx_v_text, __pyx_v_right_start, __pyx_v_right_end); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 133, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF_SET(__pyx_v_right_substr, ((PyObject*)__pyx_t_7));
        __pyx_t_7 = 0;
      }

      /* "neologdn.pyx":134
 *                 right_end += repeat_length
 *                 right_substr = text[right_start:right_end]
 *             if num_repeat_substrs > repeat_threshould:             # <<<<<<<<<<<<<<
 *                 text = text[:i+repeat_length*repeat_threshould] + text[i+repeat_length*num_repeat_substrs:]
 *         i += 1
*/
      __pyx_t_2 = (__pyx_v_num_repeat_substrs > __pyx_v_repeat_threshould);
      if (__pyx_t_2) {

        /* "neologdn.pyx":135
 *                 right_substr = text[right_start:right_end]
 *             if num_repeat_substrs > repeat_threshould:
 *                 text = text[:i+repeat_length*repeat_threshould] + text[i+repeat_length*num_repeat_substrs:]             # <<<<<<<<<<<<<<
 *         i += 1
 *     return text
*/
        if (unlikely(__pyx_v_text == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(0, 135, __pyx_L1_error)
        }
        __pyx_t_7 = __Pyx_PyUnicode_Substring(__pyx_v_text, 0, (__pyx_v_i + (__pyx_v_repeat_length * __pyx_v_repeat_threshould))); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 135, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        if (unlikely(__pyx_v_text == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(0, 135, __pyx_L1_error)
        }
        __pyx_t_8 = __Pyx_PyUnicode_Substring(__pyx_v_text, (__pyx_v_i + (__pyx_v_repeat_length * __pyx_v_num_repeat_substrs)), PY_SSIZE_T_MAX); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 135, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_9 = __Pyx_PyUnicode_ConcatInPlace(__pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 135, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF_SET(__pyx_v_text, ((PyObject*)__pyx_t_9));
        __pyx_t_9 = 0;

        /* "neologdn.pyx":134
 *                 right_end += repeat_length
 *                 right_substr = text[right_start:right_end]
 *             if num_repeat_substrs > repeat_threshould:             # <<<<<<<<<<<<<<
 *                 text = text[:i+repeat_length*repeat_threshould] + text[i+repeat_length*num_repeat_substrs:]
 *         i += 1
*/
      }
    }

    /* "neologdn.pyx":136
 *             if num_repeat_substrs > repeat_threshould:
 *                 text = text[:i+repeat_length*repeat_threshould] + text[i+repeat_length*num_repeat_substrs:]
 *         i += 1             # <<<<<<<<<<<<<<
 *     return text
 * 
*/
    __pyx_v_i = (__pyx_v_i + 1);
  }

  /* "neologdn.pyx":137
 *                 text = text[:i+repeat_length*repeat_threshould] + text[i+repeat_length*num_repeat_substrs:]
 *         i += 1
 *     return text             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_text);
  __pyx_r = __pyx_v_text;
  goto __pyx_L0;

  /* "neologdn.pyx":110
 * 
 * 
 * cpdef unicode shorten_repeat(unicode text, int repeat_threshould, int max_repeat_substr_length=8):             # <<<<<<<<<<<<<<
 *     cdef int text_length, i, repeat_length, right_start, right_end, num_repeat_substrs
 *     cdef int upper_repeat_substr_length
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("neologdn.shorten_repeat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_substr);
  __Pyx_XDECREF(__pyx_v_right_substr);
  __Pyx_XDECREF(__pyx_v_text);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8neologdn_1shorten_repeat(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_8neologdn_1shorten_repeat = {"shorten_repeat", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_8neologdn_1shorten_repeat, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8neologdn_1shorten_repeat(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_text = 0;
  int __pyx_v_repeat_threshould;
  int __pyx_v_max_repeat_substr_length;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("shorten_repeat (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_text,&__pyx_mstate_global->__pyx_n_u_repeat_threshould,&__pyx_mstate_global->__pyx_n_u_max_repeat_substr_length,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3:
        __Pyx_Arg_XDECREF_FASTCALL(values[2]);
        values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_mstate_global->__pyx_n_u_text)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 110, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_mstate_global->__pyx_n_u_repeat_threshould)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 110, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("shorten_repeat", 0, 2, 3, 1); __PYX_ERR(0, 110, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_mstate_global->__pyx_n_u_max_repeat_substr_length);
          if (value) {
            __Pyx_Arg_XDECREF_FASTCALL(values[2]);
            values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--;
          }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 110, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "shorten_repeat") < 0)) __PYX_ERR(0, 110, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  3:
        __Pyx_Arg_XDECREF_FASTCALL(values[2]);
        values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_text = ((PyObject*)values[0]);
    __pyx_v_repeat_threshould = __Pyx_PyLong_As_int(values[1]); if (unlikely((__pyx_v_repeat_threshould == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 110, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_max_repeat_substr_length = __Pyx_PyLong_As_int(values[2]); if (unlikely((__pyx_v_max_repeat_substr_length == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 110, __pyx_L3_error)
    } else {
      __pyx_v_max_repeat_substr_length = ((int)8);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("shorten_repeat", 0, 2, 3, __pyx_nargs); __PYX_ERR(0, 110, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("neologdn.shorten_repeat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_text), (&PyUnicode_Type), 1, "text", 1))) __PYX_ERR(0, 110, __pyx_L1_error)
  __pyx_r = __pyx_pf_8neologdn_shorten_repeat(__pyx_self, __pyx_v_text, __pyx_v_repeat_threshould, __pyx_v_max_repeat_substr_length);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8neologdn_shorten_repeat(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text, int __pyx_v_repeat_threshould, int __pyx_v_max_repeat_substr_length) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_8neologdn_shorten_repeat __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("shorten_repeat", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.max_repeat_substr_length = __pyx_v_max_repeat_substr_length;
  __pyx_t_1 = __pyx_f_8neologdn_shorten_repeat(__pyx_v_text, __pyx_v_repeat_threshould, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neologdn.shorten_repeat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neologdn.pyx":140
 * 
 * 
 * cpdef unicode normalize(unicode text, int repeat=0, bint remove_space=True,             # <<<<<<<<<<<<<<
 *                         int max_repeat_substr_length=8, unicode tilde='remove'):
 *     cdef Py_UCS4 *buf = <Py_UCS4 *>malloc(sizeof(Py_UCS4) * (len(text) + 1))
*/

static PyObject *__pyx_pw_8neologdn_3normalize(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_f_8neologdn_normalize(PyObject *__pyx_v_text, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_8neologdn_normalize *__pyx_optional_args) {
  int __pyx_v_repeat = ((int)0);
  int __pyx_v_remove_space = ((int)1);
  int __pyx_v_max_repeat_substr_length = ((int)8);
  PyObject *__pyx_v_tilde = ((PyObject*)__pyx_mstate_global->__pyx_n_u_remove);
  Py_UCS4 *__pyx_v_buf;
  Py_UCS4 __pyx_v_c;
  Py_UCS4 __pyx_v_prev;
  int __pyx_v_pos;
  int __pyx_v_lattin_space;
  PyObject *__pyx_v_ret = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  void *__pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_t_11;
  struct __pyx_opt_args_8neologdn_shorten_repeat __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("normalize", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_repeat = __pyx_optional_args->repeat;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_remove_space = __pyx_optional_args->remove_space;
        if (__pyx_optional_args->__pyx_n > 2) {
          __pyx_v_max_repeat_substr_length = __pyx_optional_args->max_repeat_substr_length;
          if (__pyx_optional_args->__pyx_n > 3) {
            __pyx_v_tilde = __pyx_optional_args->tilde;
          }
        }
      }
    }
  }

  /* "neologdn.pyx":142
 * cpdef unicode normalize(unicode text, int repeat=0, bint remove_space=True,
 *                         int max_repeat_substr_length=8, unicode tilde='remove'):
 *     cdef Py_UCS4 *buf = <Py_UCS4 *>malloc(sizeof(Py_UCS4) * (len(text) + 1))             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_UCS4 c, prev = '\0'
*/
  if (unlikely(__pyx_v_text == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 142, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyUnicode_GET_LENGTH(__pyx_v_text); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 142, __pyx_L1_error)
  __pyx_v_buf = ((Py_UCS4 *)malloc(((sizeof(Py_UCS4)) * (__pyx_t_1 + 1))));

  /* "neologdn.pyx":144
 *     cdef Py_UCS4 *buf = <Py_UCS4 *>malloc(sizeof(Py_UCS4) * (len(text) + 1))
 * 
 *     cdef Py_UCS4 c, prev = '\0'             # <<<<<<<<<<<<<<
 *     cdef int pos = 0
 *     cdef bint lattin_space = False
*/
  __pyx_v_prev = 0;

  /* "neologdn.pyx":145
 * 
 *     cdef Py_UCS4 c, prev = '\0'
 *     cdef int pos = 0             # <<<<<<<<<<<<<<
 *     cdef bint lattin_space = False
 * 
*/
  __pyx_v_pos = 0;

  /* "neologdn.pyx":146
 *     cdef Py_UCS4 c, prev = '\0'
 *     cdef int pos = 0
 *     cdef bint lattin_space = False             # <<<<<<<<<<<<<<
 * 
 *     for c in text:
*/
  __pyx_v_lattin_space = 0;

  /* "neologdn.pyx":148
 *     cdef bint lattin_space = False
 * 
 *     for c in text:             # <<<<<<<<<<<<<<
 *         if c in SPACE:
 *             c = ' '
*/
  if (unlikely(__pyx_v_text == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' is not iterable");
    __PYX_ERR(0, 148, __pyx_L1_error)
  }
  __Pyx_INCREF(__pyx_v_text);
  __pyx_t_2 = __pyx_v_text;
  __pyx_t_6 = __Pyx_init_unicode_iteration(__pyx_t_2, (&__pyx_t_3), (&__pyx_t_4), (&__pyx_t_5)); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 148, __pyx_L1_error)
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_3; __pyx_t_7++) {
    __pyx_t_1 = __pyx_t_7;
    __pyx_v_c = __Pyx_PyUnicode_READ(__pyx_t_5, __pyx_t_4, __pyx_t_1);

    /* "neologdn.pyx":149
 * 
 *     for c in text:
 *         if c in SPACE:             # <<<<<<<<<<<<<<
 *             c = ' '
 *             if (prev == ' ' or blocks.count(prev)) and remove_space:
*/
    __pyx_t_8 = __Pyx_PyUnicode_FromOrdinal(__pyx_v_c); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_mstate_global->__pyx_n_u_SPACE); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = (__Pyx_PySequence_ContainsTF(__pyx_t_8, __pyx_t_9, Py_EQ)); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 149, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (__pyx_t_10) {

      /* "neologdn.pyx":150
 *     for c in text:
 *         if c in SPACE:
 *             c = ' '             # <<<<<<<<<<<<<<
 *             if (prev == ' ' or blocks.count(prev)) and remove_space:
 *                 continue
*/
      __pyx_v_c = 32;

      /* "neologdn.pyx":151
 *         if c in SPACE:
 *             c = ' '
 *             if (prev == ' ' or blocks.count(prev)) and remove_space:             # <<<<<<<<<<<<<<
 *                 continue
 *             elif prev != '*' and pos > 0 and basic_latin.count(prev):
*/
      __pyx_t_11 = (__pyx_v_prev == 32);
      if (!__pyx_t_11) {
      } else {
        goto __pyx_L8_next_and;
      }
      __pyx_t_11 = (__pyx_v_8neologdn_blocks.count(__pyx_v_prev) != 0);
      if (__pyx_t_11) {
      } else {
        __pyx_t_10 = __pyx_t_11;
        goto __pyx_L7_bool_binop_done;
      }
      __pyx_L8_next_and:;
      __pyx_t_10 = __pyx_v_remove_space;
      __pyx_L7_bool_binop_done:;
      if (__pyx_t_10) {

        /* "neologdn.pyx":152
 *             c = ' '
 *             if (prev == ' ' or blocks.count(prev)) and remove_space:
 *                 continue             # <<<<<<<<<<<<<<
 *             elif prev != '*' and pos > 0 and basic_latin.count(prev):
 *                 lattin_space = True
*/
        goto __pyx_L3_continue;

        /* "neologdn.pyx":151
 *         if c in SPACE:
 *             c = ' '
 *             if (prev == ' ' or blocks.count(prev)) and remove_space:             # <<<<<<<<<<<<<<
 *                 continue
 *             elif prev != '*' and pos > 0 and basic_latin.count(prev):
*/
      }

      /* "neologdn.pyx":153
 *             if (prev == ' ' or blocks.count(prev)) and remove_space:
 *                 continue
 *             elif prev != '*' and pos > 0 and basic_latin.count(prev):             # <<<<<<<<<<<<<<
 *                 lattin_space = True
 *                 buf[pos] = c
*/
      __pyx_t_11 = (__pyx_v_prev != 42);
      if (__pyx_t_11) {
      } else {
        __pyx_t_10 = __pyx_t_11;
        goto __pyx_L10_bool_binop_done;
      }
      __pyx_t_11 = (__pyx_v_pos > 0);
      if (__pyx_t_11) {
      } else {
        __pyx_t_10 = __pyx_t_11;
        goto __pyx_L10_bool_binop_done;
      }
      __pyx_t_11 = (__pyx_v_8neologdn_basic_latin.count(__pyx_v_prev) != 0);
      __pyx_t_10 = __pyx_t_11;
      __pyx_L10_bool_binop_done:;
      if (__pyx_t_10) {

        /* "neologdn.pyx":154
 *                 continue
 *             elif prev != '*' and pos > 0 and basic_latin.count(prev):
 *                 lattin_space = True             # <<<<<<<<<<<<<<
 *                 buf[pos] = c
 *             elif remove_space:
*/
        __pyx_v_lattin_space = 1;

        /* "neologdn.pyx":155
 *             elif prev != '*' and pos > 0 and basic_latin.count(prev):
 *                 lattin_space = True
 *                 buf[pos] = c             # <<<<<<<<<<<<<<
 *             elif remove_space:
 *                 pos -= 1
*/
        (__pyx_v_buf[__pyx_v_pos]) = __pyx_v_c;

        /* "neologdn.pyx":153
 *             if (prev == ' ' or blocks.count(prev)) and remove_space:
 *                 continue
 *             elif prev != '*' and pos > 0 and basic_latin.count(prev):             # <<<<<<<<<<<<<<
 *                 lattin_space = True
 *                 buf[pos] = c
*/
        goto __pyx_L6;
      }

      /* "neologdn.pyx":156
 *                 lattin_space = True
 *                 buf[pos] = c
 *             elif remove_space:             # <<<<<<<<<<<<<<
 *                 pos -= 1
 *             else:
*/
      if (__pyx_v_remove_space) {

        /* "neologdn.pyx":157
 *                 buf[pos] = c
 *             elif remove_space:
 *                 pos -= 1             # <<<<<<<<<<<<<<
 *             else:
 *                 buf[pos] = c
*/
        __pyx_v_pos = (__pyx_v_pos - 1);

        /* "neologdn.pyx":156
 *                 lattin_space = True
 *                 buf[pos] = c
 *             elif remove_space:             # <<<<<<<<<<<<<<
 *                 pos -= 1
 *             else:
*/
        goto __pyx_L6;
      }

      /* "neologdn.pyx":159
 *                 pos -= 1
 *             else:
 *                 buf[pos] = c             # <<<<<<<<<<<<<<
 *         else:
 *             if c in HIPHENS:
*/
      /*else*/ {
        (__pyx_v_buf[__pyx_v_pos]) = __pyx_v_c;
      }
      __pyx_L6:;

      /* "neologdn.pyx":149
 * 
 *     for c in text:
 *         if c in SPACE:             # <<<<<<<<<<<<<<
 *             c = ' '
 *             if (prev == ' ' or blocks.count(prev)) and remove_space:
*/
      goto __pyx_L5;
    }

    /* "neologdn.pyx":161
 *                 buf[pos] = c
 *         else:
 *             if c in HIPHENS:             # <<<<<<<<<<<<<<
 *                 if prev == '-':
 *                     continue
*/
    /*else*/ {
      __pyx_t_9 = __Pyx_PyUnicode_FromOrdinal(__pyx_v_c); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 161, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_mstate_global->__pyx_n_u_HIPHENS); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 161, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_10 = (__Pyx_PySequence_ContainsTF(__pyx_t_9, __pyx_t_8, Py_EQ)); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 161, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (__pyx_t_10) {

        /* "neologdn.pyx":162
 *         else:
 *             if c in HIPHENS:
 *                 if prev == '-':             # <<<<<<<<<<<<<<
 *                     continue
 *                 else:
*/
        __pyx_t_10 = (__pyx_v_prev == 45);
        if (__pyx_t_10) {

          /* "neologdn.pyx":163
 *             if c in HIPHENS:
 *                 if prev == '-':
 *                     continue             # <<<<<<<<<<<<<<
 *                 else:
 *                     buf[pos] = c = '-'
*/
          goto __pyx_L3_continue;

          /* "neologdn.pyx":162
 *         else:
 *             if c in HIPHENS:
 *                 if prev == '-':             # <<<<<<<<<<<<<<
 *                     continue
 *                 else:
*/
        }

        /* "neologdn.pyx":165
 *                     continue
 *                 else:
 *                     buf[pos] = c = '-'             # <<<<<<<<<<<<<<
 *                 lattin_space = False
 *             elif c in CHOONPUS:
*/
        /*else*/ {
          (__pyx_v_buf[__pyx_v_pos]) = 45;
          __pyx_v_c = 45;
        }

        /* "neologdn.pyx":166
 *                 else:
 *                     buf[pos] = c = '-'
 *                 lattin_space = False             # <<<<<<<<<<<<<<
 *             elif c in CHOONPUS:
 *                 if prev == '':
*/
        __pyx_v_lattin_space = 0;

        /* "neologdn.pyx":161
 *                 buf[pos] = c
 *         else:
 *             if c in HIPHENS:             # <<<<<<<<<<<<<<
 *                 if prev == '-':
 *                     continue
*/
        goto __pyx_L13;
      }

      /* "neologdn.pyx":167
 *                     buf[pos] = c = '-'
 *                 lattin_space = False
 *             elif c in CHOONPUS:             # <<<<<<<<<<<<<<
 *                 if prev == '':
 *                     continue
*/
      __pyx_t_8 = __Pyx_PyUnicode_FromOrdinal(__pyx_v_c); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 167, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_mstate_global->__pyx_n_u_CHOONPUS); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 167, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = (__Pyx_PySequence_ContainsTF(__pyx_t_8, __pyx_t_9, Py_EQ)); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 167, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (__pyx_t_10) {

        /* "neologdn.pyx":168
 *                 lattin_space = False
 *             elif c in CHOONPUS:
 *                 if prev == '':             # <<<<<<<<<<<<<<
 *                     continue
 *                 else:
*/
        __pyx_t_10 = (__pyx_v_prev == 0x30FC);
        if (__pyx_t_10) {

          /* "neologdn.pyx":169
 *             elif c in CHOONPUS:
 *                 if prev == '':
 *                     continue             # <<<<<<<<<<<<<<
 *                 else:
 *                     buf[pos] = c = ''
*/
          goto __pyx_L3_continue;

          /* "neologdn.pyx":168
 *                 lattin_space = False
 *             elif c in CHOONPUS:
 *                 if prev == '':             # <<<<<<<<<<<<<<
 *                     continue
 *                 else:
*/
        }

        /* "neologdn.pyx":171
 *                     continue
 *                 else:
 *                     buf[pos] = c = ''             # <<<<<<<<<<<<<<
 *                 lattin_space = False
 *             elif c in TILDES:
*/
        /*else*/ {
          (__pyx_v_buf[__pyx_v_pos]) = 0x30FC;
          __pyx_v_c = 0x30FC;
        }

        /* "neologdn.pyx":172
 *                 else:
 *                     buf[pos] = c = ''
 *                 lattin_space = False             # <<<<<<<<<<<<<<
 *             elif c in TILDES:
 *                 if tilde == 'ignore':
*/
        __pyx_v_lattin_space = 0;

        /* "neologdn.pyx":167
 *                     buf[pos] = c = '-'
 *                 lattin_space = False
 *             elif c in CHOONPUS:             # <<<<<<<<<<<<<<
 *                 if prev == '':
 *                     continue
*/
        goto __pyx_L13;
      }

      /* "neologdn.pyx":173
 *                     buf[pos] = c = ''
 *                 lattin_space = False
 *             elif c in TILDES:             # <<<<<<<<<<<<<<
 *                 if tilde == 'ignore':
 *                     buf[pos] = c
*/
      __pyx_t_9 = __Pyx_PyUnicode_FromOrdinal(__pyx_v_c); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 173, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_mstate_global->__pyx_n_u_TILDES); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 173, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_10 = (__Pyx_PySequence_ContainsTF(__pyx_t_9, __pyx_t_8, Py_EQ)); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 173, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (__pyx_t_10) {

        /* "neologdn.pyx":174
 *                 lattin_space = False
 *             elif c in TILDES:
 *                 if tilde == 'ignore':             # <<<<<<<<<<<<<<
 *                     buf[pos] = c
 *                 elif tilde == 'normalize':
*/
        __pyx_t_10 = (__Pyx_PyUnicode_Equals(__pyx_v_tilde, __pyx_mstate_global->__pyx_n_u_ignore, Py_EQ)); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 174, __pyx_L1_error)
        if (__pyx_t_10) {

          /* "neologdn.pyx":175
 *             elif c in TILDES:
 *                 if tilde == 'ignore':
 *                     buf[pos] = c             # <<<<<<<<<<<<<<
 *                 elif tilde == 'normalize':
 *                     buf[pos] = c = '~'
*/
          (__pyx_v_buf[__pyx_v_pos]) = __pyx_v_c;

          /* "neologdn.pyx":174
 *                 lattin_space = False
 *             elif c in TILDES:
 *                 if tilde == 'ignore':             # <<<<<<<<<<<<<<
 *                     buf[pos] = c
 *                 elif tilde == 'normalize':
*/
          goto __pyx_L16;
        }

        /* "neologdn.pyx":176
 *                 if tilde == 'ignore':
 *                     buf[pos] = c
 *                 elif tilde == 'normalize':             # <<<<<<<<<<<<<<
 *                     buf[pos] = c = '~'
 *                 elif tilde == 'normalize_zenkaku':
*/
        __pyx_t_10 = (__Pyx_PyUnicode_Equals(__pyx_v_tilde, __pyx_mstate_global->__pyx_n_u_normalize, Py_EQ)); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 176, __pyx_L1_error)
        if (__pyx_t_10) {

          /* "neologdn.pyx":177
 *                     buf[pos] = c
 *                 elif tilde == 'normalize':
 *                     buf[pos] = c = '~'             # <<<<<<<<<<<<<<
 *                 elif tilde == 'normalize_zenkaku':
 *                     buf[pos] = c = ''
*/
          (__pyx_v_buf[__pyx_v_pos]) = 0x7E;
          __pyx_v_c = 0x7E;

          /* "neologdn.pyx":176
 *                 if tilde == 'ignore':
 *                     buf[pos] = c
 *                 elif tilde == 'normalize':             # <<<<<<<<<<<<<<
 *                     buf[pos] = c = '~'
 *                 elif tilde == 'normalize_zenkaku':
*/
          goto __pyx_L16;
        }

        /* "neologdn.pyx":178
 *                 elif tilde == 'normalize':
 *                     buf[pos] = c = '~'
 *                 elif tilde == 'normalize_zenkaku':             # <<<<<<<<<<<<<<
 *                     buf[pos] = c = ''
 *                 else:
*/
        __pyx_t_10 = (__Pyx_PyUnicode_Equals(__pyx_v_tilde, __pyx_mstate_global->__pyx_n_u_normalize_zenkaku, Py_EQ)); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 178, __pyx_L1_error)
        if (__pyx_t_10) {

          /* "neologdn.pyx":179
 *                     buf[pos] = c = '~'
 *                 elif tilde == 'normalize_zenkaku':
 *                     buf[pos] = c = ''             # <<<<<<<<<<<<<<
 *                 else:
 *                     continue
*/
          (__pyx_v_buf[__pyx_v_pos]) = 0x301C;
          __pyx_v_c = 0x301C;

          /* "neologdn.pyx":178
 *                 elif tilde == 'normalize':
 *                     buf[pos] = c = '~'
 *                 elif tilde == 'normalize_zenkaku':             # <<<<<<<<<<<<<<
 *                     buf[pos] = c = ''
 *                 else:
*/
          goto __pyx_L16;
        }

        /* "neologdn.pyx":181
 *                     buf[pos] = c = ''
 *                 else:
 *                     continue             # <<<<<<<<<<<<<<
 *                 lattin_space = False
 *             else:
*/
        /*else*/ {
          goto __pyx_L3_continue;
        }
        __pyx_L16:;

        /* "neologdn.pyx":182
 *                 else:
 *                     continue
 *                 lattin_space = False             # <<<<<<<<<<<<<<
 *             else:
 *                 if conversion_map.count(c):
*/
        __pyx_v_lattin_space = 0;

        /* "neologdn.pyx":173
 *                     buf[pos] = c = ''
 *                 lattin_space = False
 *             elif c in TILDES:             # <<<<<<<<<<<<<<
 *                 if tilde == 'ignore':
 *                     buf[pos] = c
*/
        goto __pyx_L13;
      }

      /* "neologdn.pyx":184
 *                 lattin_space = False
 *             else:
 *                 if conversion_map.count(c):             # <<<<<<<<<<<<<<
 *                     c = conversion_map[c]
 *                 if c == '' and kana_ten_map.count(prev):
*/
      /*else*/ {
        __pyx_t_10 = (__pyx_v_8neologdn_conversion_map.count(__pyx_v_c) != 0);
        if (__pyx_t_10) {

          /* "neologdn.pyx":185
 *             else:
 *                 if conversion_map.count(c):
 *                     c = conversion_map[c]             # <<<<<<<<<<<<<<
 *                 if c == '' and kana_ten_map.count(prev):
 *                     pos -= 1
*/
          __pyx_v_c = (__pyx_v_8neologdn_conversion_map[__pyx_v_c]);

          /* "neologdn.pyx":184
 *                 lattin_space = False
 *             else:
 *                 if conversion_map.count(c):             # <<<<<<<<<<<<<<
 *                     c = conversion_map[c]
 *                 if c == '' and kana_ten_map.count(prev):
*/
        }

        /* "neologdn.pyx":186
 *                 if conversion_map.count(c):
 *                     c = conversion_map[c]
 *                 if c == '' and kana_ten_map.count(prev):             # <<<<<<<<<<<<<<
 *                     pos -= 1
 *                     c = kana_ten_map[prev]
*/
        __pyx_t_11 = (__pyx_v_c == 0xFF9E);
        if (__pyx_t_11) {
        } else {
          __pyx_t_10 = __pyx_t_11;
          goto __pyx_L19_bool_binop_done;
        }
        __pyx_t_11 = (__pyx_v_8neologdn_kana_ten_map.count(__pyx_v_prev) != 0);
        __pyx_t_10 = __pyx_t_11;
        __pyx_L19_bool_binop_done:;
        if (__pyx_t_10) {

          /* "neologdn.pyx":187
 *                     c = conversion_map[c]
 *                 if c == '' and kana_ten_map.count(prev):
 *                     pos -= 1             # <<<<<<<<<<<<<<
 *                     c = kana_ten_map[prev]
 *                 elif c == '' and kana_maru_map.count(prev):
*/
          __pyx_v_pos = (__pyx_v_pos - 1);

          /* "neologdn.pyx":188
 *                 if c == '' and kana_ten_map.count(prev):
 *                     pos -= 1
 *                     c = kana_ten_map[prev]             # <<<<<<<<<<<<<<
 *                 elif c == '' and kana_maru_map.count(prev):
 *                     pos -= 1
*/
          __pyx_v_c = (__pyx_v_8neologdn_kana_ten_map[__pyx_v_prev]);

          /* "neologdn.pyx":186
 *                 if conversion_map.count(c):
 *                     c = conversion_map[c]
 *                 if c == '' and kana_ten_map.count(prev):             # <<<<<<<<<<<<<<
 *                     pos -= 1
 *                     c = kana_ten_map[prev]
*/
          goto __pyx_L18;
        }

        /* "neologdn.pyx":189
 *                     pos -= 1
 *                     c = kana_ten_map[prev]
 *                 elif c == '' and kana_maru_map.count(prev):             # <<<<<<<<<<<<<<
 *                     pos -= 1
 *                     c = kana_maru_map[prev]
*/
        __pyx_t_11 = (__pyx_v_c == 0xFF9F);
        if (__pyx_t_11) {
        } else {
          __pyx_t_10 = __pyx_t_11;
          goto __pyx_L21_bool_binop_done;
        }
        __pyx_t_11 = (__pyx_v_8neologdn_kana_maru_map.count(__pyx_v_prev) != 0);
        __pyx_t_10 = __pyx_t_11;
        __pyx_L21_bool_binop_done:;
        if (__pyx_t_10) {

          /* "neologdn.pyx":190
 *                     c = kana_ten_map[prev]
 *                 elif c == '' and kana_maru_map.count(prev):
 *                     pos -= 1             # <<<<<<<<<<<<<<
 *                     c = kana_maru_map[prev]
 *                 if lattin_space and blocks.count(c) and remove_space:
*/
          __pyx_v_pos = (__pyx_v_pos - 1);

          /* "neologdn.pyx":191
 *                 elif c == '' and kana_maru_map.count(prev):
 *                     pos -= 1
 *                     c = kana_maru_map[prev]             # <<<<<<<<<<<<<<
 *                 if lattin_space and blocks.count(c) and remove_space:
 *                     pos -= 1
*/
          __pyx_v_c = (__pyx_v_8neologdn_kana_maru_map[__pyx_v_prev]);

          /* "neologdn.pyx":189
 *                     pos -= 1
 *                     c = kana_ten_map[prev]
 *                 elif c == '' and kana_maru_map.count(prev):             # <<<<<<<<<<<<<<
 *                     pos -= 1
 *                     c = kana_maru_map[prev]
*/
        }
        __pyx_L18:;

        /* "neologdn.pyx":192
 *                     pos -= 1
 *                     c = kana_maru_map[prev]
 *                 if lattin_space and blocks.count(c) and remove_space:             # <<<<<<<<<<<<<<
 *                     pos -= 1
 *                 lattin_space = False
*/
        if (__pyx_v_lattin_space) {
        } else {
          __pyx_t_10 = __pyx_v_lattin_space;
          goto __pyx_L24_bool_binop_done;
        }
        __pyx_t_11 = (__pyx_v_8neologdn_blocks.count(__pyx_v_c) != 0);
        if (__pyx_t_11) {
        } else {
          __pyx_t_10 = __pyx_t_11;
          goto __pyx_L24_bool_binop_done;
        }
        __pyx_t_10 = __pyx_v_remove_space;
        __pyx_L24_bool_binop_done:;
        if (__pyx_t_10) {

          /* "neologdn.pyx":193
 *                     c = kana_maru_map[prev]
 *                 if lattin_space and blocks.count(c) and remove_space:
 *                     pos -= 1             # <<<<<<<<<<<<<<
 *                 lattin_space = False
 *                 buf[pos] = c
*/
          __pyx_v_pos = (__pyx_v_pos - 1);

          /* "neologdn.pyx":192
 *                     pos -= 1
 *                     c = kana_maru_map[prev]
 *                 if lattin_space and blocks.count(c) and remove_space:             # <<<<<<<<<<<<<<
 *                     pos -= 1
 *                 lattin_space = False
*/
        }

        /* "neologdn.pyx":194
 *                 if lattin_space and blocks.count(c) and remove_space:
 *                     pos -= 1
 *                 lattin_space = False             # <<<<<<<<<<<<<<
 *                 buf[pos] = c
 *         prev = c
*/
        __pyx_v_lattin_space = 0;

        /* "neologdn.pyx":195
 *                     pos -= 1
 *                 lattin_space = False
 *                 buf[pos] = c             # <<<<<<<<<<<<<<
 *         prev = c
 *         pos += 1
*/
        (__pyx_v_buf[__pyx_v_pos]) = __pyx_v_c;
      }
      __pyx_L13:;
    }
    __pyx_L5:;

    /* "neologdn.pyx":196
 *                 lattin_space = False
 *                 buf[pos] = c
 *         prev = c             # <<<<<<<<<<<<<<
 *         pos += 1
 * 
*/
    __pyx_v_prev = __pyx_v_c;

    /* "neologdn.pyx":197
 *                 buf[pos] = c
 *         prev = c
 *         pos += 1             # <<<<<<<<<<<<<<
 * 
 *     if buf[pos-1] == ' ':
*/
    __pyx_v_pos = (__pyx_v_pos + 1);
    __pyx_L3_continue:;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "neologdn.pyx":199
 *         pos += 1
 * 
 *     if buf[pos-1] == ' ':             # <<<<<<<<<<<<<<
 *         pos -= 1
 *     buf[pos] = '\0'
*/
  __pyx_t_10 = ((__pyx_v_buf[(__pyx_v_pos - 1)]) == 32);
  if (__pyx_t_10) {

    /* "neologdn.pyx":200
 * 
 *     if buf[pos-1] == ' ':
 *         pos -= 1             # <<<<<<<<<<<<<<
 *     buf[pos] = '\0'
 * 
*/
    __pyx_v_pos = (__pyx_v_pos - 1);

    /* "neologdn.pyx":199
 *         pos += 1
 * 
 *     if buf[pos-1] == ' ':             # <<<<<<<<<<<<<<
 *         pos -= 1
 *     buf[pos] = '\0'
*/
  }

  /* "neologdn.pyx":201
 *     if buf[pos-1] == ' ':
 *         pos -= 1
 *     buf[pos] = '\0'             # <<<<<<<<<<<<<<
 * 
 *     cdef unicode ret = py_ucs4_to_unicode(buf, pos)
*/
  (__pyx_v_buf[__pyx_v_pos]) = 0;

  /* "neologdn.pyx":203
 *     buf[pos] = '\0'
 * 
 *     cdef unicode ret = py_ucs4_to_unicode(buf, pos)             # <<<<<<<<<<<<<<
 *     free(buf)
 * 
*/
  __pyx_t_8 = __pyx_f_8neologdn_py_ucs4_to_unicode(__pyx_v_buf, __pyx_v_pos); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (!(likely(PyUnicode_CheckExact(__pyx_t_8))||((__pyx_t_8) == Py_None) || __Pyx_RaiseUnexpectedTypeError("str", __pyx_t_8))) __PYX_ERR(0, 203, __pyx_L1_error)
  __pyx_v_ret = ((PyObject*)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "neologdn.pyx":204
 * 
 *     cdef unicode ret = py_ucs4_to_unicode(buf, pos)
 *     free(buf)             # <<<<<<<<<<<<<<
 * 
 *     if repeat:
*/
  free(__pyx_v_buf);

  /* "neologdn.pyx":206
 *     free(buf)
 * 
 *     if repeat:             # <<<<<<<<<<<<<<
 *         return shorten_repeat(ret, repeat, max_repeat_substr_length)
 *     return ret
*/
  __pyx_t_10 = (__pyx_v_repeat != 0);
  if (__pyx_t_10) {

    /* "neologdn.pyx":207
 * 
 *     if repeat:
 *         return shorten_repeat(ret, repeat, max_repeat_substr_length)             # <<<<<<<<<<<<<<
 *     return ret
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_12.__pyx_n = 1;
    __pyx_t_12.max_repeat_substr_length = __pyx_v_max_repeat_substr_length;
    __pyx_t_8 = __pyx_f_8neologdn_shorten_repeat(__pyx_v_ret, __pyx_v_repeat, 0, &__pyx_t_12); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_r = ((PyObject*)__pyx_t_8);
    __pyx_t_8 = 0;
    goto __pyx_L0;

    /* "neologdn.pyx":206
 *     free(buf)
 * 
 *     if repeat:             # <<<<<<<<<<<<<<
 *         return shorten_repeat(ret, repeat, max_repeat_substr_length)
 *     return ret
*/
  }

  /* "neologdn.pyx":208
 *     if repeat:
 *         return shorten_repeat(ret, repeat, max_repeat_substr_length)
 *     return ret             # <<<<<<<<<<<<<<
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "neologdn.pyx":140
 * 
 * 
 * cpdef unicode normalize(unicode text, int repeat=0, bint remove_space=True,             # <<<<<<<<<<<<<<
 *                         int max_repeat_substr_length=8, unicode tilde='remove'):
 *     cdef Py_UCS4 *buf = <Py_UCS4 *>malloc(sizeof(Py_UCS4) * (len(text) + 1))
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("neologdn.normalize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8neologdn_3normalize(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_8neologdn_3normalize = {"normalize", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_8neologdn_3normalize, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8neologdn_3normalize(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_text = 0;
  int __pyx_v_repeat;
  int __pyx_v_remove_space;
  int __pyx_v_max_repeat_substr_length;
  PyObject *__pyx_v_tilde = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[5] = {0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("normalize (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_text,&__pyx_mstate_global->__pyx_n_u_repeat,&__pyx_mstate_global->__pyx_n_u_remove_space,&__pyx_mstate_global->__pyx_n_u_max_repeat_substr_length,&__pyx_mstate_global->__pyx_n_u_tilde,0};
    values[4] = __Pyx_Arg_NewRef_FASTCALL(((PyObject*)__pyx_mstate_global->__pyx_n_u_remove));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  5:
        __Pyx_Arg_XDECREF_FASTCALL(values[4]);
        values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4:
        __Pyx_Arg_XDECREF_FASTCALL(values[3]);
        values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3:
        __Pyx_Arg_XDECREF_FASTCALL(values[2]);
        values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2:
        __Pyx_Arg_XDECREF_FASTCALL(values[1]);
        values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_mstate_global->__pyx_n_u_text)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 140, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_mstate_global->__pyx_n_u_repeat);
          if (value) {
            __Pyx_Arg_XDECREF_FASTCALL(values[1]);
            values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--;
          }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 140, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_mstate_global->__pyx_n_u_remove_space);
          if (value) {
            __Pyx_Arg_XDECREF_FASTCALL(values[2]);
            values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--;
          }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 140, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_mstate_global->__pyx_n_u_max_repeat_substr_length);
          if (value) {
            __Pyx_Arg_XDECREF_FASTCALL(values[3]);
            values[3] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--;
          }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 140, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_mstate_global->__pyx_n_u_tilde);
          if (value) {
            __Pyx_Arg_XDECREF_FASTCALL(values[4]);
            values[4] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--;
          }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 140, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "normalize") < 0)) __PYX_ERR(0, 140, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  5:
        __Pyx_Arg_XDECREF_FASTCALL(values[4]);
        values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4:
        __Pyx_Arg_XDECREF_FASTCALL(values[3]);
        values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3:
        __Pyx_Arg_XDECREF_FASTCALL(values[2]);
        values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2:
        __Pyx_Arg_XDECREF_FASTCALL(values[1]);
        values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_text = ((PyObject*)values[0]);
    if (values[1]) {
      __pyx_v_repeat = __Pyx_PyLong_As_int(values[1]); if (unlikely((__pyx_v_repeat == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 140, __pyx_L3_error)
    } else {
      __pyx_v_repeat = ((int)0);
    }
    if (values[2]) {
      __pyx_v_remove_space = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_remove_space == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 140, __pyx_L3_error)
    } else {
      __pyx_v_remove_space = ((int)1);
    }
    if (values[3]) {
      __pyx_v_max_repeat_substr_length = __Pyx_PyLong_As_int(values[3]); if (unlikely((__pyx_v_max_repeat_substr_length == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 141, __pyx_L3_error)
    } else {
      __pyx_v_max_repeat_substr_length = ((int)8);
    }
    __pyx_v_tilde = ((PyObject*)values[4]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("normalize", 0, 1, 5, __pyx_nargs); __PYX_ERR(0, 140, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("neologdn.normalize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_text), (&PyUnicode_Type), 1, "text", 1))) __PYX_ERR(0, 140, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_tilde), (&PyUnicode_Type), 1, "tilde", 1))) __PYX_ERR(0, 141, __pyx_L1_error)
  __pyx_r = __pyx_pf_8neologdn_2normalize(__pyx_self, __pyx_v_text, __pyx_v_repeat, __pyx_v_remove_space, __pyx_v_max_repeat_substr_length, __pyx_v_tilde);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8neologdn_2normalize(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text, int __pyx_v_repeat, int __pyx_v_remove_space, int __pyx_v_max_repeat_substr_length, PyObject *__pyx_v_tilde) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_8neologdn_normalize __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("normalize", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 4;
  __pyx_t_2.repeat = __pyx_v_repeat;
  __pyx_t_2.remove_space = __pyx_v_remove_space;
  __pyx_t_2.max_repeat_substr_length = __pyx_v_max_repeat_substr_length;
  __pyx_t_2.tilde = __pyx_v_tilde;
  __pyx_t_1 = __pyx_f_8neologdn_normalize(__pyx_v_text, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neologdn.normalize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
/* #### Code section: module_exttypes ### */

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};
/* #### Code section: initfunc_declarations ### */
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_InitConstants(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_CreateCodeObjects(__pyx_mstatetype *__pyx_mstate); /*proto*/
/* #### Code section: init_module ### */

static int __Pyx_modinit_global_init_code(__pyx_mstatetype *__pyx_mstate) {
  __Pyx_RefNannyDeclarations
  CYTHON_UNUSED_VAR(__pyx_mstate);
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(__pyx_mstatetype *__pyx_mstate) {
  __Pyx_RefNannyDeclarations
  CYTHON_UNUSED_VAR(__pyx_mstate);
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(__pyx_mstatetype *__pyx_mstate) {
  __Pyx_RefNannyDeclarations
  CYTHON_UNUSED_VAR(__pyx_mstate);
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(__pyx_mstatetype *__pyx_mstate) {
  __Pyx_RefNannyDeclarations
  CYTHON_UNUSED_VAR(__pyx_mstate);
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_import_code(__pyx_mstatetype *__pyx_mstate) {
  __Pyx_RefNannyDeclarations
  CYTHON_UNUSED_VAR(__pyx_mstate);
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(__pyx_mstatetype *__pyx_mstate) {
  __Pyx_RefNannyDeclarations
  CYTHON_UNUSED_VAR(__pyx_mstate);
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(__pyx_mstatetype *__pyx_mstate) {
  __Pyx_RefNannyDeclarations
  CYTHON_UNUSED_VAR(__pyx_mstate);
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_neologdn(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_neologdn},
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
  {Py_mod_gil, Py_MOD_GIL_USED},
  #endif
  {0, NULL}
};
#endif

#ifdef __cplusplus
namespace {
  struct PyModuleDef __pyx_moduledef =
  #else
  static struct PyModuleDef __pyx_moduledef =
  #endif
  {
      PyModuleDef_HEAD_INIT,
      "neologdn",
      0, /* m_doc */
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      0, /* m_size */
    #elif CYTHON_USE_MODULE_STATE
      sizeof(__pyx_mstatetype), /* m_size */
    #else
      -1, /* m_size */
    #endif
      __pyx_methods /* m_methods */,
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      __pyx_moduledef_slots, /* m_slots */
    #else
      NULL, /* m_reload */
    #endif
    #if CYTHON_USE_MODULE_STATE
      __pyx_m_traverse, /* m_traverse */
      __pyx_m_clear, /* m_clear */
      NULL /* m_free */
    #else
      NULL, /* m_traverse */
      NULL, /* m_clear */
      NULL /* m_free */
    #endif
  };
  #ifdef __cplusplus
} /* anonymous namespace */
#endif

/* PyModInitFuncType */
#ifndef CYTHON_NO_PYINIT_EXPORT
  #define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#else
  #ifdef __cplusplus
  #define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
  #else
  #define __Pyx_PyMODINIT_FUNC PyObject *
  #endif
#endif

__Pyx_PyMODINIT_FUNC PyInit_neologdn(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_neologdn(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  if (__Pyx_VersionSanityCheck() < 0) return NULL;
  return PyModuleDef_Init(&__pyx_moduledef);
}
/* ModuleCreationPEP489 */
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    static PY_INT64_T main_interpreter_id = -1;
#if CYTHON_COMPILING_IN_GRAAL
    PY_INT64_T current_id = PyInterpreterState_GetIDFromThreadState(PyThreadState_Get());
#else
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
#endif
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *module, const char* from_name, const char* to_name, int allow_none)
#else
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none)
#endif
{
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
#if CYTHON_COMPILING_IN_LIMITED_API
            result = PyModule_AddObject(module, to_name, value);
#else
            result = PyDict_SetItemString(moddict, to_name, value);
#endif
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    CYTHON_UNUSED_VAR(def);
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    moddict = module;
#else
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
#endif
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_neologdn(PyObject *__pyx_pyinit_module)
#endif
{
  #if !CYTHON_PEP489_MULTI_PHASE_INIT
  if (__Pyx_VersionSanityCheck() < 0) return NULL;
  #endif
  int stringtab_initialized = 0;
  #if CYTHON_USE_MODULE_STATE
  int pystate_addmodule_run = 0;
  #endif
  __pyx_mstatetype *__pyx_mstate = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  Py_UCS4 __pyx_t_10;
  Py_UCS4 __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  unsigned int __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'neologdn' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #else
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if CYTHON_USE_MODULE_STATE
  __pyx_t_1 = PyModule_Create(&__pyx_moduledef); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  {
    int add_module_result = PyState_AddModule(__pyx_t_1, &__pyx_moduledef);
    __pyx_t_1 = 0; /* transfer ownership from __pyx_t_1 to "neologdn" pseudovariable */
    if (unlikely((add_module_result < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    pystate_addmodule_run = 1;
  }
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
  PyUnstable_Module_SetGIL(__pyx_m, Py_MOD_GIL_USED);
  #endif
  #endif
  __pyx_mstate = __pyx_mstate_global;
  CYTHON_UNUSED_VAR(__pyx_t_1);
  __pyx_mstate->__pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_mstate->__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_mstate->__pyx_d);
  __pyx_mstate->__pyx_b = __Pyx_PyImport_AddModuleRef(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_mstate->__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_cython_runtime = __Pyx_PyImport_AddModuleRef("cython_runtime"); if (unlikely(!__pyx_mstate->__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_mstate->__pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /* ImportRefnannyAPI */
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif

__Pyx_RefNannySetupContext("PyInit_neologdn", 0);
  if (__Pyx_check_binary_version(__PYX_LIMITED_VERSION_HEX, __Pyx_get_runtime_version(), CYTHON_COMPILING_IN_LIMITED_API) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_mstate->__pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_mstate->__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_mstate->__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_mstate->__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitConstants(__pyx_mstate) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  stringtab_initialized = 1;
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__pyx_module_is_main_neologdn) {
    if (PyObject_SetAttr(__pyx_m, __pyx_mstate_global->__pyx_n_u_name, __pyx_mstate_global->__pyx_n_u_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "neologdn")) {
      if (unlikely((PyDict_SetItemString(modules, "neologdn", __pyx_m) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins(__pyx_mstate) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants(__pyx_mstate) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_CreateCodeObjects(__pyx_mstate) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code(__pyx_mstate);
  (void)__Pyx_modinit_variable_export_code(__pyx_mstate);
  (void)__Pyx_modinit_function_export_code(__pyx_mstate);
  (void)__Pyx_modinit_type_init_code(__pyx_mstate);
  (void)__Pyx_modinit_type_import_code(__pyx_mstate);
  (void)__Pyx_modinit_variable_import_code(__pyx_mstate);
  (void)__Pyx_modinit_function_import_code(__pyx_mstate);
  /*--- Execution code ---*/

  /* "neologdn.pyx":5
 * # -*- coding: utf-8 -*-
 * 
 * import itertools             # <<<<<<<<<<<<<<
 * from sys import version_info
 * from libc.stdlib cimport malloc, free
*/
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_mstate_global->__pyx_n_u_itertools, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_itertools, __pyx_t_2) < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "neologdn.pyx":6
 * 
 * import itertools
 * from sys import version_info             # <<<<<<<<<<<<<<
 * from libc.stdlib cimport malloc, free
 * from libcpp.unordered_map cimport unordered_map
*/
  __pyx_t_2 = __Pyx_PyList_Pack(1, __pyx_mstate_global->__pyx_n_u_version_info); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Import(__pyx_mstate_global->__pyx_n_u_sys, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_version_info); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_version_info, __pyx_t_2) < 0) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "neologdn.pyx":11
 * from libcpp.unordered_set cimport unordered_set
 * 
 * VERSION = (0, 5, 4)             # <<<<<<<<<<<<<<
 * __version__ = '0.5.4'
 * 
*/
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_VERSION, __pyx_mstate_global->__pyx_tuple[0]) < 0) __PYX_ERR(0, 11, __pyx_L1_error)

  /* "neologdn.pyx":12
 * 
 * VERSION = (0, 5, 4)
 * __version__ = '0.5.4'             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "Python.h":
*/
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_version, __pyx_mstate_global->__pyx_kp_u_0_5_4) < 0) __PYX_ERR(0, 12, __pyx_L1_error)

  /* "neologdn.pyx":23
 * 
 * ASCII = (
 *     ('', 'a'), ('', 'b'), ('', 'c'), ('', 'd'), ('', 'e'),             # <<<<<<<<<<<<<<
 *     ('', 'f'), ('', 'g'), ('', 'h'), ('', 'i'), ('', 'j'),
 *     ('', 'k'), ('', 'l'), ('', 'm'), ('', 'n'), ('', 'o'),
*/
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_ASCII, __pyx_mstate_global->__pyx_tuple[84]) < 0) __PYX_ERR(0, 22, __pyx_L1_error)

  /* "neologdn.pyx":44
 * )
 * KANA = (
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),             # <<<<<<<<<<<<<<
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
*/
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_KANA, __pyx_mstate_global->__pyx_tuple[148]) < 0) __PYX_ERR(0, 43, __pyx_L1_error)

  /* "neologdn.pyx":60
 * )
 * DIGIT = (
 *     ('', '0'), ('', '1'), ('', '2'), ('', '3'), ('', '4'),             # <<<<<<<<<<<<<<
 *     ('', '5'), ('', '6'), ('', '7'), ('', '8'), ('', '9')
 * )
*/
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_DIGIT, __pyx_mstate_global->__pyx_tuple[159]) < 0) __PYX_ERR(0, 59, __pyx_L1_error)

  /* "neologdn.pyx":64
 * )
 * KANA_TEN = (
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),             # <<<<<<<<<<<<<<
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
*/
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_KANA_TEN, __pyx_mstate_global->__pyx_tuple[182]) < 0) __PYX_ERR(0, 63, __pyx_L1_error)

  /* "neologdn.pyx":71
 * )
 * KANA_MARU = (
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),             # <<<<<<<<<<<<<<
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', '')
 * )
*/
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_KANA_MARU, __pyx_mstate_global->__pyx_tuple[193]) < 0) __PYX_ERR(0, 70, __pyx_L1_error)

  /* "neologdn.pyx":75
 * )
 * 
 * HIPHENS = ('', '', '', '', '', '', '', '', '', '')             # <<<<<<<<<<<<<<
 * CHOONPUS = ('', '', '', '', '', '', '', '')
 * TILDES = ('~', '', '', '', '', '')
*/
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_HIPHENS, __pyx_mstate_global->__pyx_tuple[194]) < 0) __PYX_ERR(0, 75, __pyx_L1_error)

  /* "neologdn.pyx":76
 * 
 * HIPHENS = ('', '', '', '', '', '', '', '', '', '')
 * CHOONPUS = ('', '', '', '', '', '', '', '')             # <<<<<<<<<<<<<<
 * TILDES = ('~', '', '', '', '', '')
 * 
*/
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_CHOONPUS, __pyx_mstate_global->__pyx_tuple[195]) < 0) __PYX_ERR(0, 76, __pyx_L1_error)

  /* "neologdn.pyx":77
 * HIPHENS = ('', '', '', '', '', '', '', '', '', '')
 * CHOONPUS = ('', '', '', '', '', '', '', '')
 * TILDES = ('~', '', '', '', '', '')             # <<<<<<<<<<<<<<
 * 
 * SPACE = (' ', '')
*/
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_TILDES, __pyx_mstate_global->__pyx_tuple[196]) < 0) __PYX_ERR(0, 77, __pyx_L1_error)

  /* "neologdn.pyx":79
 * TILDES = ('~', '', '', '', '', '')
 * 
 * SPACE = (' ', '')             # <<<<<<<<<<<<<<
 * 
 * cdef unordered_map[Py_UCS4, Py_UCS4] conversion_map, kana_ten_map, kana_maru_map
*/
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_SPACE, __pyx_mstate_global->__pyx_tuple[197]) < 0) __PYX_ERR(0, 79, __pyx_L1_error)

  /* "neologdn.pyx":84
 * cdef unordered_set[Py_UCS4] blocks, basic_latin
 * 
 * for (before, after) in (ASCII + DIGIT + KANA):             # <<<<<<<<<<<<<<
 *     conversion_map[before] = after
 * 
*/
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_ASCII); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_DIGIT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_KANA); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Add(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2);
    __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 84, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_2);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 84, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = __Pyx_PyList_GetItemRef(__pyx_t_2, __pyx_t_5);
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 84, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_5++;
        #else
        __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 84, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 84, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_5);
        if (unlikely((0 < 0))) __PYX_ERR(0, 84, __pyx_L1_error)
        __Pyx_INCREF(__pyx_t_3);
        __pyx_t_5++;
        #else
        __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 84, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_6(__pyx_t_2);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 84, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
      PyObject* sequence = __pyx_t_3;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 84, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0);
        __Pyx_INCREF(__pyx_t_4);
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1);
        __Pyx_INCREF(__pyx_t_7);
      } else {
        __pyx_t_4 = __Pyx_PyList_GetItemRef(sequence, 0);
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 84, __pyx_L1_error)
        __Pyx_XGOTREF(__pyx_t_4);
        __pyx_t_7 = __Pyx_PyList_GetItemRef(sequence, 1);
        if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 84, __pyx_L1_error)
        __Pyx_XGOTREF(__pyx_t_7);
      }
      #else
      __pyx_t_4 = __Pyx_PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 84, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = __Pyx_PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 84, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      #endif
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_8 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 84, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_9 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_8);
      index = 0; __pyx_t_4 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_4)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      index = 1; __pyx_t_7 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_7)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 2) < 0) __PYX_ERR(0, 84, __pyx_L1_error)
      __pyx_t_9 = NULL;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L5_unpacking_done;
      __pyx_L4_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 84, __pyx_L1_error)
      __pyx_L5_unpacking_done:;
    }
    if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_before, __pyx_t_4) < 0) __PYX_ERR(0, 84, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_after, __pyx_t_7) < 0) __PYX_ERR(0, 84, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "neologdn.pyx":85
 * 
 * for (before, after) in (ASCII + DIGIT + KANA):
 *     conversion_map[before] = after             # <<<<<<<<<<<<<<
 * 
 * for (before, after) in KANA_TEN:
*/
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_after); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 85, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_10 = __Pyx_PyObject_AsPy_UCS4(__pyx_t_3); if (unlikely((__pyx_t_10 == (Py_UCS4)-1) && PyErr_Occurred())) __PYX_ERR(0, 85, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_before); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 85, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_11 = __Pyx_PyObject_AsPy_UCS4(__pyx_t_3); if (unlikely((__pyx_t_11 == (Py_UCS4)-1) && PyErr_Occurred())) __PYX_ERR(0, 85, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_8neologdn_conversion_map[__pyx_t_11]) = __pyx_t_10;

    /* "neologdn.pyx":84
 * cdef unordered_set[Py_UCS4] blocks, basic_latin
 * 
 * for (before, after) in (ASCII + DIGIT + KANA):             # <<<<<<<<<<<<<<
 *     conversion_map[before] = after
 * 
*/
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "neologdn.pyx":87
 *     conversion_map[before] = after
 * 
 * for (before, after) in KANA_TEN:             # <<<<<<<<<<<<<<
 *     kana_ten_map[before] = after
 * 
*/
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_KANA_TEN); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3);
    __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 87, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 87, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 87, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = __Pyx_PyList_GetItemRef(__pyx_t_3, __pyx_t_5);
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 87, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_5++;
        #else
        __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 87, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 87, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5);
        if (unlikely((0 < 0))) __PYX_ERR(0, 87, __pyx_L1_error)
        __Pyx_INCREF(__pyx_t_2);
        __pyx_t_5++;
        #else
        __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 87, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_6(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 87, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 87, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 0);
        __Pyx_INCREF(__pyx_t_7);
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1);
        __Pyx_INCREF(__pyx_t_4);
      } else {
        __pyx_t_7 = __Pyx_PyList_GetItemRef(sequence, 0);
        if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 87, __pyx_L1_error)
        __Pyx_XGOTREF(__pyx_t_7);
        __pyx_t_4 = __Pyx_PyList_GetItemRef(sequence, 1);
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 87, __pyx_L1_error)
        __Pyx_XGOTREF(__pyx_t_4);
      }
      #else
      __pyx_t_7 = __Pyx_PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 87, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_4 = __Pyx_PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 87, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_8 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 87, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_9 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_8);
      index = 0; __pyx_t_7 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_7)) goto __pyx_L9_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      index = 1; __pyx_t_4 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_4)) goto __pyx_L9_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 2) < 0) __PYX_ERR(0, 87, __pyx_L1_error)
      __pyx_t_9 = NULL;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L10_unpacking_done;
      __pyx_L9_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 87, __pyx_L1_error)
      __pyx_L10_unpacking_done:;
    }
    if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_before, __pyx_t_7) < 0) __PYX_ERR(0, 87, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_after, __pyx_t_4) < 0) __PYX_ERR(0, 87, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "neologdn.pyx":88
 * 
 * for (before, after) in KANA_TEN:
 *     kana_ten_map[before] = after             # <<<<<<<<<<<<<<
 * 
 * for (before, after) in KANA_MARU:
*/
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_after); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_10 = __Pyx_PyObject_AsPy_UCS4(__pyx_t_2); if (unlikely((__pyx_t_10 == (Py_UCS4)-1) && PyErr_Occurred())) __PYX_ERR(0, 88, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_before); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_11 = __Pyx_PyObject_AsPy_UCS4(__pyx_t_2); if (unlikely((__pyx_t_11 == (Py_UCS4)-1) && PyErr_Occurred())) __PYX_ERR(0, 88, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    (__pyx_v_8neologdn_kana_ten_map[__pyx_t_11]) = __pyx_t_10;

    /* "neologdn.pyx":87
 *     conversion_map[before] = after
 * 
 * for (before, after) in KANA_TEN:             # <<<<<<<<<<<<<<
 *     kana_ten_map[before] = after
 * 
*/
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "neologdn.pyx":90
 *     kana_ten_map[before] = after
 * 
 * for (before, after) in KANA_MARU:             # <<<<<<<<<<<<<<
 *     kana_maru_map[before] = after
 * 
*/
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_KANA_MARU); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2);
    __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 90, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 90, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_2);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 90, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = __Pyx_PyList_GetItemRef(__pyx_t_2, __pyx_t_5);
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 90, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_5++;
        #else
        __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 90, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 90, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_5);
        if (unlikely((0 < 0))) __PYX_ERR(0, 90, __pyx_L1_error)
        __Pyx_INCREF(__pyx_t_3);
        __pyx_t_5++;
        #else
        __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 90, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_6(__pyx_t_2);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 90, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
      PyObject* sequence = __pyx_t_3;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 90, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0);
        __Pyx_INCREF(__pyx_t_4);
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1);
        __Pyx_INCREF(__pyx_t_7);
      } else {
        __pyx_t_4 = __Pyx_PyList_GetItemRef(sequence, 0);
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 90, __pyx_L1_error)
        __Pyx_XGOTREF(__pyx_t_4);
        __pyx_t_7 = __Pyx_PyList_GetItemRef(sequence, 1);
        if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 90, __pyx_L1_error)
        __Pyx_XGOTREF(__pyx_t_7);
      }
      #else
      __pyx_t_4 = __Pyx_PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 90, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = __Pyx_PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 90, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      #endif
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_8 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 90, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_9 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_8);
      index = 0; __pyx_t_4 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_4)) goto __pyx_L14_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      index = 1; __pyx_t_7 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_7)) goto __pyx_L14_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 2) < 0) __PYX_ERR(0, 90, __pyx_L1_error)
      __pyx_t_9 = NULL;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L15_unpacking_done;
      __pyx_L14_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 90, __pyx_L1_error)
      __pyx_L15_unpacking_done:;
    }
    if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_before, __pyx_t_4) < 0) __PYX_ERR(0, 90, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_after, __pyx_t_7) < 0) __PYX_ERR(0, 90, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "neologdn.pyx":91
 * 
 * for (before, after) in KANA_MARU:
 *     kana_maru_map[before] = after             # <<<<<<<<<<<<<<
 * 
 * char_codes = itertools.chain(
*/
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_after); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 91, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_10 = __Pyx_PyObject_AsPy_UCS4(__pyx_t_3); if (unlikely((__pyx_t_10 == (Py_UCS4)-1) && PyErr_Occurred())) __PYX_ERR(0, 91, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_before); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 91, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_11 = __Pyx_PyObject_AsPy_UCS4(__pyx_t_3); if (unlikely((__pyx_t_11 == (Py_UCS4)-1) && PyErr_Occurred())) __PYX_ERR(0, 91, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_8neologdn_kana_maru_map[__pyx_t_11]) = __pyx_t_10;

    /* "neologdn.pyx":90
 *     kana_ten_map[before] = after
 * 
 * for (before, after) in KANA_MARU:             # <<<<<<<<<<<<<<
 *     kana_maru_map[before] = after
 * 
*/
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "neologdn.pyx":93
 *     kana_maru_map[before] = after
 * 
 * char_codes = itertools.chain(             # <<<<<<<<<<<<<<
 *     range(19968, 40960),  # CJK UNIFIED IDEOGRAPHS
 *     range(12352, 12448),  # HIRAGANA
*/
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_itertools); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_chain); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "neologdn.pyx":94
 * 
 * char_codes = itertools.chain(
 *     range(19968, 40960),  # CJK UNIFIED IDEOGRAPHS             # <<<<<<<<<<<<<<
 *     range(12352, 12448),  # HIRAGANA
 *     range(12448, 12544),  # KATAKANA
*/
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_mstate_global->__pyx_tuple[198], NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "neologdn.pyx":95
 * char_codes = itertools.chain(
 *     range(19968, 40960),  # CJK UNIFIED IDEOGRAPHS
 *     range(12352, 12448),  # HIRAGANA             # <<<<<<<<<<<<<<
 *     range(12448, 12544),  # KATAKANA
 *     range(12289, 12352),  # CJK SYMBOLS AND PUNCTUATION
*/
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_mstate_global->__pyx_tuple[199], NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "neologdn.pyx":96
 *     range(19968, 40960),  # CJK UNIFIED IDEOGRAPHS
 *     range(12352, 12448),  # HIRAGANA
 *     range(12448, 12544),  # KATAKANA             # <<<<<<<<<<<<<<
 *     range(12289, 12352),  # CJK SYMBOLS AND PUNCTUATION
 *     range(65280, 65520)   # HALFWIDTH AND FULLWIDTH FORMS
*/
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_mstate_global->__pyx_tuple[200], NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);

  /* "neologdn.pyx":97
 *     range(12352, 12448),  # HIRAGANA
 *     range(12448, 12544),  # KATAKANA
 *     range(12289, 12352),  # CJK SYMBOLS AND PUNCTUATION             # <<<<<<<<<<<<<<
 *     range(65280, 65520)   # HALFWIDTH AND FULLWIDTH FORMS
 * )
*/
  __pyx_t_12 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_mstate_global->__pyx_tuple[201], NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);

  /* "neologdn.pyx":98
 *     range(12448, 12544),  # KATAKANA
 *     range(12289, 12352),  # CJK SYMBOLS AND PUNCTUATION
 *     range(65280, 65520)   # HALFWIDTH AND FULLWIDTH FORMS             # <<<<<<<<<<<<<<
 * )
 * for c in map(chr, char_codes):
*/
  __pyx_t_13 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_mstate_global->__pyx_tuple[202], NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_14 = NULL;
  __pyx_t_15 = 0;
  {
    PyObject *__pyx_callargs[6] = {__pyx_t_14, __pyx_t_3, __pyx_t_4, __pyx_t_8, __pyx_t_12, __pyx_t_13};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_15, 5+__pyx_t_15);
    __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 93, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_char_codes, __pyx_t_2) < 0) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "neologdn.pyx":100
 *     range(65280, 65520)   # HALFWIDTH AND FULLWIDTH FORMS
 * )
 * for c in map(chr, char_codes):             # <<<<<<<<<<<<<<
 *     blocks.insert(c)
 * 
*/
  __pyx_t_2 = __Pyx_GetBuiltinName(__pyx_mstate_global->__pyx_n_u_chr); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_char_codes); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_13 = PyTuple_Pack(2, __pyx_t_2, __pyx_t_7); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_map, __pyx_t_13, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  if (likely(PyList_CheckExact(__pyx_t_7)) || PyTuple_CheckExact(__pyx_t_7)) {
    __pyx_t_13 = __pyx_t_7; __Pyx_INCREF(__pyx_t_13);
    __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_13 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 100, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_6 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_13); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 100, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_13))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_13);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 100, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = __Pyx_PyList_GetItemRef(__pyx_t_13, __pyx_t_5);
        if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 100, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_5++;
        #else
        __pyx_t_7 = __Pyx_PySequence_ITEM(__pyx_t_13, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 100, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_13);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 100, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_13, __pyx_t_5);
        if (unlikely((0 < 0))) __PYX_ERR(0, 100, __pyx_L1_error)
        __Pyx_INCREF(__pyx_t_7);
        __pyx_t_5++;
        #else
        __pyx_t_7 = __Pyx_PySequence_ITEM(__pyx_t_13, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 100, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      }
    } else {
      __pyx_t_7 = __pyx_t_6(__pyx_t_13);
      if (unlikely(!__pyx_t_7)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 100, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_7);
    }
    if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_c, __pyx_t_7) < 0) __PYX_ERR(0, 100, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "neologdn.pyx":101
 * )
 * for c in map(chr, char_codes):
 *     blocks.insert(c)             # <<<<<<<<<<<<<<
 * 
 * 
*/
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_c); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 101, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_10 = __Pyx_PyObject_AsPy_UCS4(__pyx_t_7); if (unlikely((__pyx_t_10 == (Py_UCS4)-1) && PyErr_Occurred())) __PYX_ERR(0, 101, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    try {
      __pyx_v_8neologdn_blocks.insert(__pyx_t_10);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 101, __pyx_L1_error)
    }

    /* "neologdn.pyx":100
 *     range(65280, 65520)   # HALFWIDTH AND FULLWIDTH FORMS
 * )
 * for c in map(chr, char_codes):             # <<<<<<<<<<<<<<
 *     blocks.insert(c)
 * 
*/
  }
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

  /* "neologdn.pyx":104
 * 
 * 
 * for c in map(chr, range(128)):             # <<<<<<<<<<<<<<
 *     basic_latin.insert(c)
 * 
*/
  __pyx_t_13 = __Pyx_GetBuiltinName(__pyx_mstate_global->__pyx_n_u_chr); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_mstate_global->__pyx_tuple[203], NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_2 = PyTuple_Pack(2, __pyx_t_13, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_map, __pyx_t_2, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_7)) || PyTuple_CheckExact(__pyx_t_7)) {
    __pyx_t_2 = __pyx_t_7; __Pyx_INCREF(__pyx_t_2);
    __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 104, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 104, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_2);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 104, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = __Pyx_PyList_GetItemRef(__pyx_t_2, __pyx_t_5);
        if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 104, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_5++;
        #else
        __pyx_t_7 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 104, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 104, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_5);
        if (unlikely((0 < 0))) __PYX_ERR(0, 104, __pyx_L1_error)
        __Pyx_INCREF(__pyx_t_7);
        __pyx_t_5++;
        #else
        __pyx_t_7 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 104, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      }
    } else {
      __pyx_t_7 = __pyx_t_6(__pyx_t_2);
      if (unlikely(!__pyx_t_7)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 104, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_7);
    }
    if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_c, __pyx_t_7) < 0) __PYX_ERR(0, 104, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "neologdn.pyx":105
 * 
 * for c in map(chr, range(128)):
 *     basic_latin.insert(c)             # <<<<<<<<<<<<<<
 * 
 * del ASCII, KANA, DIGIT, KANA_TEN, KANA_MARU, char_codes, version_info
*/
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_c); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 105, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_10 = __Pyx_PyObject_AsPy_UCS4(__pyx_t_7); if (unlikely((__pyx_t_10 == (Py_UCS4)-1) && PyErr_Occurred())) __PYX_ERR(0, 105, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    try {
      __pyx_v_8neologdn_basic_latin.insert(__pyx_t_10);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 105, __pyx_L1_error)
    }

    /* "neologdn.pyx":104
 * 
 * 
 * for c in map(chr, range(128)):             # <<<<<<<<<<<<<<
 *     basic_latin.insert(c)
 * 
*/
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "neologdn.pyx":107
 *     basic_latin.insert(c)
 * 
 * del ASCII, KANA, DIGIT, KANA_TEN, KANA_MARU, char_codes, version_info             # <<<<<<<<<<<<<<
 * 
 * 
*/
  if (__Pyx_PyObject_DelAttrStr(__pyx_m, __pyx_mstate_global->__pyx_n_u_ASCII) < 0) __PYX_ERR(0, 107, __pyx_L1_error)
  if (__Pyx_PyObject_DelAttrStr(__pyx_m, __pyx_mstate_global->__pyx_n_u_KANA) < 0) __PYX_ERR(0, 107, __pyx_L1_error)
  if (__Pyx_PyObject_DelAttrStr(__pyx_m, __pyx_mstate_global->__pyx_n_u_DIGIT) < 0) __PYX_ERR(0, 107, __pyx_L1_error)
  if (__Pyx_PyObject_DelAttrStr(__pyx_m, __pyx_mstate_global->__pyx_n_u_KANA_TEN) < 0) __PYX_ERR(0, 107, __pyx_L1_error)
  if (__Pyx_PyObject_DelAttrStr(__pyx_m, __pyx_mstate_global->__pyx_n_u_KANA_MARU) < 0) __PYX_ERR(0, 107, __pyx_L1_error)
  if (__Pyx_PyObject_DelAttrStr(__pyx_m, __pyx_mstate_global->__pyx_n_u_char_codes) < 0) __PYX_ERR(0, 107, __pyx_L1_error)
  if (__Pyx_PyObject_DelAttrStr(__pyx_m, __pyx_mstate_global->__pyx_n_u_version_info) < 0) __PYX_ERR(0, 107, __pyx_L1_error)

  /* "neologdn.pyx":110
 * 
 * 
 * cpdef unicode shorten_repeat(unicode text, int repeat_threshould, int max_repeat_substr_length=8):             # <<<<<<<<<<<<<<
 *     cdef int text_length, i, repeat_length, right_start, right_end, num_repeat_substrs
 *     cdef int upper_repeat_substr_length
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_8neologdn_1shorten_repeat, 0, __pyx_mstate_global->__pyx_n_u_shorten_repeat, NULL, __pyx_mstate_global->__pyx_n_u_neologdn, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_mstate_global->__pyx_tuple[204]);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_shorten_repeat, __pyx_t_2) < 0) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "neologdn.pyx":140
 * 
 * 
 * cpdef unicode normalize(unicode text, int repeat=0, bint remove_space=True,             # <<<<<<<<<<<<<<
 *                         int max_repeat_substr_length=8, unicode tilde='remove'):
 *     cdef Py_UCS4 *buf = <Py_UCS4 *>malloc(sizeof(Py_UCS4) * (len(text) + 1))
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_8neologdn_3normalize, 0, __pyx_mstate_global->__pyx_n_u_normalize, NULL, __pyx_mstate_global->__pyx_n_u_neologdn, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[1])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_mstate_global->__pyx_tuple[205]);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_normalize, __pyx_t_2) < 0) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "neologdn.pyx":1
 * # distutils: language=c++             # <<<<<<<<<<<<<<
 * # cython: language_level=3
 * # -*- coding: utf-8 -*-
*/
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  if (__pyx_m) {
    if (__pyx_mstate->__pyx_d && stringtab_initialized) {
      __Pyx_AddTraceback("init neologdn", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    #if !CYTHON_USE_MODULE_STATE
    Py_CLEAR(__pyx_m);
    #else
    Py_DECREF(__pyx_m);
    if (pystate_addmodule_run) {
      PyObject *tp, *value, *tb;
      PyErr_Fetch(&tp, &value, &tb);
      PyState_RemoveModule(&__pyx_moduledef);
      PyErr_Restore(tp, value, tb);
    }
    #endif
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init neologdn");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #else
  return __pyx_m;
  #endif
}
/* #### Code section: pystring_table ### */

typedef struct {
    const char *s;
#if 179 <= 65535
    const unsigned short n;
#elif 179 / 2 < INT_MAX
    const unsigned int n;
#elif 179 / 2 < LONG_MAX
    const unsigned long n;
#else
    const Py_ssize_t n;
#endif
#if 1 <= 31
    const unsigned int encoding : 5;
#elif 1 <= 255
    const unsigned char encoding;
#elif 1 <= 65535
    const unsigned short encoding;
#else
    const Py_ssize_t encoding;
#endif
    const unsigned int is_unicode : 1;
    const unsigned int intern : 1;
} __Pyx_StringTabEntry;
static const char * const __pyx_string_tab_encodings[] = { 0 };
static const __Pyx_StringTabEntry __pyx_string_tab[] = {
  {__pyx_k_, sizeof(__pyx_k_), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_ */
  {__pyx_k_0, sizeof(__pyx_k_0), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_0 */
  {__pyx_k_0_5_4, sizeof(__pyx_k_0_5_4), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_0_5_4 */
  {__pyx_k_1, sizeof(__pyx_k_1), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_1 */
  {__pyx_k_2, sizeof(__pyx_k_2), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_2 */
  {__pyx_k_3, sizeof(__pyx_k_3), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_3 */
  {__pyx_k_4, sizeof(__pyx_k_4), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_4 */
  {__pyx_k_5, sizeof(__pyx_k_5), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_5 */
  {__pyx_k_6, sizeof(__pyx_k_6), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_6 */
  {__pyx_k_7, sizeof(__pyx_k_7), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_7 */
  {__pyx_k_8, sizeof(__pyx_k_8), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_8 */
  {__pyx_k_9, sizeof(__pyx_k_9), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_9 */
  {__pyx_k_A, sizeof(__pyx_k_A), 0, 1, 1}, /* PyObject cname: __pyx_n_u_A */
  {__pyx_k_ASCII, sizeof(__pyx_k_ASCII), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ASCII */
  {__pyx_k_B, sizeof(__pyx_k_B), 0, 1, 1}, /* PyObject cname: __pyx_n_u_B */
  {__pyx_k_C, sizeof(__pyx_k_C), 0, 1, 1}, /* PyObject cname: __pyx_n_u_C */
  {__pyx_k_CHOONPUS, sizeof(__pyx_k_CHOONPUS), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CHOONPUS */
  {__pyx_k_D, sizeof(__pyx_k_D), 0, 1, 1}, /* PyObject cname: __pyx_n_u_D */
  {__pyx_k_DIGIT, sizeof(__pyx_k_DIGIT), 0, 1, 1}, /* PyObject cname: __pyx_n_u_DIGIT */
  {__pyx_k_E, sizeof(__pyx_k_E), 0, 1, 1}, /* PyObject cname: __pyx_n_u_E */
  {__pyx_k_F, sizeof(__pyx_k_F), 0, 1, 1}, /* PyObject cname: __pyx_n_u_F */
  {__pyx_k_G, sizeof(__pyx_k_G), 0, 1, 1}, /* PyObject cname: __pyx_n_u_G */
  {__pyx_k_H, sizeof(__pyx_k_H), 0, 1, 1}, /* PyObject cname: __pyx_n_u_H */
  {__pyx_k_HIPHENS, sizeof(__pyx_k_HIPHENS), 0, 1, 1}, /* PyObject cname: __pyx_n_u_HIPHENS */
  {__pyx_k_I, sizeof(__pyx_k_I), 0, 1, 1}, /* PyObject cname: __pyx_n_u_I */
  {__pyx_k_J, sizeof(__pyx_k_J), 0, 1, 1}, /* PyObject cname: __pyx_n_u_J */
  {__pyx_k_K, sizeof(__pyx_k_K), 0, 1, 1}, /* PyObject cname: __pyx_n_u_K */
  {__pyx_k_KANA, sizeof(__pyx_k_KANA), 0, 1, 1}, /* PyObject cname: __pyx_n_u_KANA */
  {__pyx_k_KANA_MARU, sizeof(__pyx_k_KANA_MARU), 0, 1, 1}, /* PyObject cname: __pyx_n_u_KANA_MARU */
  {__pyx_k_KANA_TEN, sizeof(__pyx_k_KANA_TEN), 0, 1, 1}, /* PyObject cname: __pyx_n_u_KANA_TEN */
  {__pyx_k_L, sizeof(__pyx_k_L), 0, 1, 1}, /* PyObject cname: __pyx_n_u_L */
  {__pyx_k_M, sizeof(__pyx_k_M), 0, 1, 1}, /* PyObject cname: __pyx_n_u_M */
  {__pyx_k_N, sizeof(__pyx_k_N), 0, 1, 1}, /* PyObject cname: __pyx_n_u_N */
  {__pyx_k_Note_that_Cython_is_deliberately, sizeof(__pyx_k_Note_that_Cython_is_deliberately), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Note_that_Cython_is_deliberately */
  {__pyx_k_O, sizeof(__pyx_k_O), 0, 1, 1}, /* PyObject cname: __pyx_n_u_O */
  {__pyx_k_P, sizeof(__pyx_k_P), 0, 1, 1}, /* PyObject cname: __pyx_n_u_P */
  {__pyx_k_Q, sizeof(__pyx_k_Q), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Q */
  {__pyx_k_R, sizeof(__pyx_k_R), 0, 1, 1}, /* PyObject cname: __pyx_n_u_R */
  {__pyx_k_S, sizeof(__pyx_k_S), 0, 1, 1}, /* PyObject cname: __pyx_n_u_S */
  {__pyx_k_SPACE, sizeof(__pyx_k_SPACE), 0, 1, 1}, /* PyObject cname: __pyx_n_u_SPACE */
  {__pyx_k_T, sizeof(__pyx_k_T), 0, 1, 1}, /* PyObject cname: __pyx_n_u_T */
  {__pyx_k_TILDES, sizeof(__pyx_k_TILDES), 0, 1, 1}, /* PyObject cname: __pyx_n_u_TILDES */
  {__pyx_k_U, sizeof(__pyx_k_U), 0, 1, 1}, /* PyObject cname: __pyx_n_u_U */
  {__pyx_k_V, sizeof(__pyx_k_V), 0, 1, 1}, /* PyObject cname: __pyx_n_u_V */
  {__pyx_k_VERSION, sizeof(__pyx_k_VERSION), 0, 1, 1}, /* PyObject cname: __pyx_n_u_VERSION */
  {__pyx_k_W, sizeof(__pyx_k_W), 0, 1, 1}, /* PyObject cname: __pyx_n_u_W */
  {__pyx_k_X, sizeof(__pyx_k_X), 0, 1, 1}, /* PyObject cname: __pyx_n_u_X */
  {__pyx_k_Y, sizeof(__pyx_k_Y), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Y */
  {__pyx_k_Z, sizeof(__pyx_k_Z), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Z */
  {__pyx_k__10, sizeof(__pyx_k__10), 0, 1, 1}, /* PyObject cname: __pyx_n_u__10 */
  {__pyx_k__100, sizeof(__pyx_k__100), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__100 */
  {__pyx_k__101, sizeof(__pyx_k__101), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__101 */
  {__pyx_k__102, sizeof(__pyx_k__102), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__102 */
  {__pyx_k__103, sizeof(__pyx_k__103), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__103 */
  {__pyx_k__104, sizeof(__pyx_k__104), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__104 */
  {__pyx_k__105, sizeof(__pyx_k__105), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__105 */
  {__pyx_k__106, sizeof(__pyx_k__106), 0, 1, 1}, /* PyObject cname: __pyx_n_u__106 */
  {__pyx_k__107, sizeof(__pyx_k__107), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__107 */
  {__pyx_k__108, sizeof(__pyx_k__108), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__108 */
  {__pyx_k__109, sizeof(__pyx_k__109), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__109 */
  {__pyx_k__11, sizeof(__pyx_k__11), 0, 1, 1}, /* PyObject cname: __pyx_n_u__11 */
  {__pyx_k__110, sizeof(__pyx_k__110), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__110 */
  {__pyx_k__111, sizeof(__pyx_k__111), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__111 */
  {__pyx_k__112, sizeof(__pyx_k__112), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__112 */
  {__pyx_k__113, sizeof(__pyx_k__113), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__113 */
  {__pyx_k__114, sizeof(__pyx_k__114), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__114 */
  {__pyx_k__115, sizeof(__pyx_k__115), 0, 1, 1}, /* PyObject cname: __pyx_n_u__115 */
  {__pyx_k__116, sizeof(__pyx_k__116), 0, 1, 1}, /* PyObject cname: __pyx_n_u__116 */
  {__pyx_k__117, sizeof(__pyx_k__117), 0, 1, 1}, /* PyObject cname: __pyx_n_u__117 */
  {__pyx_k__118, sizeof(__pyx_k__118), 0, 1, 1}, /* PyObject cname: __pyx_n_u__118 */
  {__pyx_k__119, sizeof(__pyx_k__119), 0, 1, 1}, /* PyObject cname: __pyx_n_u__119 */
  {__pyx_k__12, sizeof(__pyx_k__12), 0, 1, 1}, /* PyObject cname: __pyx_n_u__12 */
  {__pyx_k__120, sizeof(__pyx_k__120), 0, 1, 1}, /* PyObject cname: __pyx_n_u__120 */
  {__pyx_k__121, sizeof(__pyx_k__121), 0, 1, 1}, /* PyObject cname: __pyx_n_u__121 */
  {__pyx_k__122, sizeof(__pyx_k__122), 0, 1, 1}, /* PyObject cname: __pyx_n_u__122 */
  {__pyx_k__123, sizeof(__pyx_k__123), 0, 1, 1}, /* PyObject cname: __pyx_n_u__123 */
  {__pyx_k__124, sizeof(__pyx_k__124), 0, 1, 1}, /* PyObject cname: __pyx_n_u__124 */
  {__pyx_k__125, sizeof(__pyx_k__125), 0, 1, 1}, /* PyObject cname: __pyx_n_u__125 */
  {__pyx_k__126, sizeof(__pyx_k__126), 0, 1, 1}, /* PyObject cname: __pyx_n_u__126 */
  {__pyx_k__127, sizeof(__pyx_k__127), 0, 1, 1}, /* PyObject cname: __pyx_n_u__127 */
  {__pyx_k__128, sizeof(__pyx_k__128), 0, 1, 1}, /* PyObject cname: __pyx_n_u__128 */
  {__pyx_k__129, sizeof(__pyx_k__129), 0, 1, 1}, /* PyObject cname: __pyx_n_u__129 */
  {__pyx_k__13, sizeof(__pyx_k__13), 0, 1, 1}, /* PyObject cname: __pyx_n_u__13 */
  {__pyx_k__130, sizeof(__pyx_k__130), 0, 1, 1}, /* PyObject cname: __pyx_n_u__130 */
  {__pyx_k__131, sizeof(__pyx_k__131), 0, 1, 1}, /* PyObject cname: __pyx_n_u__131 */
  {__pyx_k__132, sizeof(__pyx_k__132), 0, 1, 1}, /* PyObject cname: __pyx_n_u__132 */
  {__pyx_k__133, sizeof(__pyx_k__133), 0, 1, 1}, /* PyObject cname: __pyx_n_u__133 */
  {__pyx_k__134, sizeof(__pyx_k__134), 0, 1, 1}, /* PyObject cname: __pyx_n_u__134 */
  {__pyx_k__135, sizeof(__pyx_k__135), 0, 1, 1}, /* PyObject cname: __pyx_n_u__135 */
  {__pyx_k__136, sizeof(__pyx_k__136), 0, 1, 1}, /* PyObject cname: __pyx_n_u__136 */
  {__pyx_k__137, sizeof(__pyx_k__137), 0, 1, 1}, /* PyObject cname: __pyx_n_u__137 */
  {__pyx_k__138, sizeof(__pyx_k__138), 0, 1, 1}, /* PyObject cname: __pyx_n_u__138 */
  {__pyx_k__139, sizeof(__pyx_k__139), 0, 1, 1}, /* PyObject cname: __pyx_n_u__139 */
  {__pyx_k__14, sizeof(__pyx_k__14), 0, 1, 1}, /* PyObject cname: __pyx_n_u__14 */
  {__pyx_k__140, sizeof(__pyx_k__140), 0, 1, 1}, /* PyObject cname: __pyx_n_u__140 */
  {__pyx_k__141, sizeof(__pyx_k__141), 0, 1, 1}, /* PyObject cname: __pyx_n_u__141 */
  {__pyx_k__142, sizeof(__pyx_k__142), 0, 1, 1}, /* PyObject cname: __pyx_n_u__142 */
  {__pyx_k__143, sizeof(__pyx_k__143), 0, 1, 1}, /* PyObject cname: __pyx_n_u__143 */
  {__pyx_k__144, sizeof(__pyx_k__144), 0, 1, 1}, /* PyObject cname: __pyx_n_u__144 */
  {__pyx_k__145, sizeof(__pyx_k__145), 0, 1, 1}, /* PyObject cname: __pyx_n_u__145 */
  {__pyx_k__146, sizeof(__pyx_k__146), 0, 1, 1}, /* PyObject cname: __pyx_n_u__146 */
  {__pyx_k__147, sizeof(__pyx_k__147), 0, 1, 1}, /* PyObject cname: __pyx_n_u__147 */
  {__pyx_k__148, sizeof(__pyx_k__148), 0, 1, 1}, /* PyObject cname: __pyx_n_u__148 */
  {__pyx_k__149, sizeof(__pyx_k__149), 0, 1, 1}, /* PyObject cname: __pyx_n_u__149 */
  {__pyx_k__15, sizeof(__pyx_k__15), 0, 1, 1}, /* PyObject cname: __pyx_n_u__15 */
  {__pyx_k__150, sizeof(__pyx_k__150), 0, 1, 1}, /* PyObject cname: __pyx_n_u__150 */
  {__pyx_k__151, sizeof(__pyx_k__151), 0, 1, 1}, /* PyObject cname: __pyx_n_u__151 */
  {__pyx_k__152, sizeof(__pyx_k__152), 0, 1, 1}, /* PyObject cname: __pyx_n_u__152 */
  {__pyx_k__153, sizeof(__pyx_k__153), 0, 1, 1}, /* PyObject cname: __pyx_n_u__153 */
  {__pyx_k__154, sizeof(__pyx_k__154), 0, 1, 1}, /* PyObject cname: __pyx_n_u__154 */
  {__pyx_k__155, sizeof(__pyx_k__155), 0, 1, 1}, /* PyObject cname: __pyx_n_u__155 */
  {__pyx_k__156, sizeof(__pyx_k__156), 0, 1, 1}, /* PyObject cname: __pyx_n_u__156 */
  {__pyx_k__157, sizeof(__pyx_k__157), 0, 1, 1}, /* PyObject cname: __pyx_n_u__157 */
  {__pyx_k__158, sizeof(__pyx_k__158), 0, 1, 1}, /* PyObject cname: __pyx_n_u__158 */
  {__pyx_k__159, sizeof(__pyx_k__159), 0, 1, 1}, /* PyObject cname: __pyx_n_u__159 */
  {__pyx_k__16, sizeof(__pyx_k__16), 0, 1, 1}, /* PyObject cname: __pyx_n_u__16 */
  {__pyx_k__160, sizeof(__pyx_k__160), 0, 1, 1}, /* PyObject cname: __pyx_n_u__160 */
  {__pyx_k__161, sizeof(__pyx_k__161), 0, 1, 1}, /* PyObject cname: __pyx_n_u__161 */
  {__pyx_k__162, sizeof(__pyx_k__162), 0, 1, 1}, /* PyObject cname: __pyx_n_u__162 */
  {__pyx_k__163, sizeof(__pyx_k__163), 0, 1, 1}, /* PyObject cname: __pyx_n_u__163 */
  {__pyx_k__164, sizeof(__pyx_k__164), 0, 1, 1}, /* PyObject cname: __pyx_n_u__164 */
  {__pyx_k__165, sizeof(__pyx_k__165), 0, 1, 1}, /* PyObject cname: __pyx_n_u__165 */
  {__pyx_k__166, sizeof(__pyx_k__166), 0, 1, 1}, /* PyObject cname: __pyx_n_u__166 */
  {__pyx_k__167, sizeof(__pyx_k__167), 0, 1, 1}, /* PyObject cname: __pyx_n_u__167 */
  {__pyx_k__168, sizeof(__pyx_k__168), 0, 1, 1}, /* PyObject cname: __pyx_n_u__168 */
  {__pyx_k__169, sizeof(__pyx_k__169), 0, 1, 1}, /* PyObject cname: __pyx_n_u__169 */
  {__pyx_k__17, sizeof(__pyx_k__17), 0, 1, 1}, /* PyObject cname: __pyx_n_u__17 */
  {__pyx_k__170, sizeof(__pyx_k__170), 0, 1, 1}, /* PyObject cname: __pyx_n_u__170 */
  {__pyx_k__171, sizeof(__pyx_k__171), 0, 1, 1}, /* PyObject cname: __pyx_n_u__171 */
  {__pyx_k__172, sizeof(__pyx_k__172), 0, 1, 1}, /* PyObject cname: __pyx_n_u__172 */
  {__pyx_k__173, sizeof(__pyx_k__173), 0, 1, 1}, /* PyObject cname: __pyx_n_u__173 */
  {__pyx_k__174, sizeof(__pyx_k__174), 0, 1, 1}, /* PyObject cname: __pyx_n_u__174 */
  {__pyx_k__175, sizeof(__pyx_k__175), 0, 1, 1}, /* PyObject cname: __pyx_n_u__175 */
  {__pyx_k__176, sizeof(__pyx_k__176), 0, 1, 1}, /* PyObject cname: __pyx_n_u__176 */
  {__pyx_k__177, sizeof(__pyx_k__177), 0, 1, 1}, /* PyObject cname: __pyx_n_u__177 */
  {__pyx_k__178, sizeof(__pyx_k__178), 0, 1, 1}, /* PyObject cname: __pyx_n_u__178 */
  {__pyx_k__179, sizeof(__pyx_k__179), 0, 1, 1}, /* PyObject cname: __pyx_n_u__179 */
  {__pyx_k__18, sizeof(__pyx_k__18), 0, 1, 1}, /* PyObject cname: __pyx_n_u__18 */
  {__pyx_k__180, sizeof(__pyx_k__180), 0, 1, 1}, /* PyObject cname: __pyx_n_u__180 */
  {__pyx_k__181, sizeof(__pyx_k__181), 0, 1, 1}, /* PyObject cname: __pyx_n_u__181 */
  {__pyx_k__182, sizeof(__pyx_k__182), 0, 1, 1}, /* PyObject cname: __pyx_n_u__182 */
  {__pyx_k__183, sizeof(__pyx_k__183), 0, 1, 1}, /* PyObject cname: __pyx_n_u__183 */
  {__pyx_k__184, sizeof(__pyx_k__184), 0, 1, 1}, /* PyObject cname: __pyx_n_u__184 */
  {__pyx_k__185, sizeof(__pyx_k__185), 0, 1, 1}, /* PyObject cname: __pyx_n_u__185 */
  {__pyx_k__186, sizeof(__pyx_k__186), 0, 1, 1}, /* PyObject cname: __pyx_n_u__186 */
  {__pyx_k__187, sizeof(__pyx_k__187), 0, 1, 1}, /* PyObject cname: __pyx_n_u__187 */
  {__pyx_k__188, sizeof(__pyx_k__188), 0, 1, 1}, /* PyObject cname: __pyx_n_u__188 */
  {__pyx_k__189, sizeof(__pyx_k__189), 0, 1, 1}, /* PyObject cname: __pyx_n_u__189 */
  {__pyx_k__19, sizeof(__pyx_k__19), 0, 1, 1}, /* PyObject cname: __pyx_n_u__19 */
  {__pyx_k__190, sizeof(__pyx_k__190), 0, 1, 1}, /* PyObject cname: __pyx_n_u__190 */
  {__pyx_k__191, sizeof(__pyx_k__191), 0, 1, 1}, /* PyObject cname: __pyx_n_u__191 */
  {__pyx_k__192, sizeof(__pyx_k__192), 0, 1, 1}, /* PyObject cname: __pyx_n_u__192 */
  {__pyx_k__193, sizeof(__pyx_k__193), 0, 1, 1}, /* PyObject cname: __pyx_n_u__193 */
  {__pyx_k__194, sizeof(__pyx_k__194), 0, 1, 1}, /* PyObject cname: __pyx_n_u__194 */
  {__pyx_k__195, sizeof(__pyx_k__195), 0, 1, 1}, /* PyObject cname: __pyx_n_u__195 */
  {__pyx_k__196, sizeof(__pyx_k__196), 0, 1, 1}, /* PyObject cname: __pyx_n_u__196 */
  {__pyx_k__197, sizeof(__pyx_k__197), 0, 1, 1}, /* PyObject cname: __pyx_n_u__197 */
  {__pyx_k__198, sizeof(__pyx_k__198), 0, 1, 1}, /* PyObject cname: __pyx_n_u__198 */
  {__pyx_k__199, sizeof(__pyx_k__199), 0, 1, 1}, /* PyObject cname: __pyx_n_u__199 */
  {__pyx_k__2, sizeof(__pyx_k__2), 0, 1, 1}, /* PyObject cname: __pyx_n_u__2 */
  {__pyx_k__20, sizeof(__pyx_k__20), 0, 1, 1}, /* PyObject cname: __pyx_n_u__20 */
  {__pyx_k__200, sizeof(__pyx_k__200), 0, 1, 1}, /* PyObject cname: __pyx_n_u__200 */
  {__pyx_k__201, sizeof(__pyx_k__201), 0, 1, 1}, /* PyObject cname: __pyx_n_u__201 */
  {__pyx_k__202, sizeof(__pyx_k__202), 0, 1, 1}, /* PyObject cname: __pyx_n_u__202 */
  {__pyx_k__203, sizeof(__pyx_k__203), 0, 1, 1}, /* PyObject cname: __pyx_n_u__203 */
  {__pyx_k__204, sizeof(__pyx_k__204), 0, 1, 1}, /* PyObject cname: __pyx_n_u__204 */
  {__pyx_k__205, sizeof(__pyx_k__205), 0, 1, 1}, /* PyObject cname: __pyx_n_u__205 */
  {__pyx_k__206, sizeof(__pyx_k__206), 0, 1, 1}, /* PyObject cname: __pyx_n_u__206 */
  {__pyx_k__207, sizeof(__pyx_k__207), 0, 1, 1}, /* PyObject cname: __pyx_n_u__207 */
  {__pyx_k__208, sizeof(__pyx_k__208), 0, 1, 1}, /* PyObject cname: __pyx_n_u__208 */
  {__pyx_k__209, sizeof(__pyx_k__209), 0, 1, 1}, /* PyObject cname: __pyx_n_u__209 */
  {__pyx_k__21, sizeof(__pyx_k__21), 0, 1, 1}, /* PyObject cname: __pyx_n_u__21 */
  {__pyx_k__210, sizeof(__pyx_k__210), 0, 1, 1}, /* PyObject cname: __pyx_n_u__210 */
  {__pyx_k__211, sizeof(__pyx_k__211), 0, 1, 1}, /* PyObject cname: __pyx_n_u__211 */
  {__pyx_k__212, sizeof(__pyx_k__212), 0, 1, 1}, /* PyObject cname: __pyx_n_u__212 */
  {__pyx_k__213, sizeof(__pyx_k__213), 0, 1, 1}, /* PyObject cname: __pyx_n_u__213 */
  {__pyx_k__214, sizeof(__pyx_k__214), 0, 1, 1}, /* PyObject cname: __pyx_n_u__214 */
  {__pyx_k__215, sizeof(__pyx_k__215), 0, 1, 1}, /* PyObject cname: __pyx_n_u__215 */
  {__pyx_k__216, sizeof(__pyx_k__216), 0, 1, 1}, /* PyObject cname: __pyx_n_u__216 */
  {__pyx_k__217, sizeof(__pyx_k__217), 0, 1, 1}, /* PyObject cname: __pyx_n_u__217 */
  {__pyx_k__218, sizeof(__pyx_k__218), 0, 1, 1}, /* PyObject cname: __pyx_n_u__218 */
  {__pyx_k__219, sizeof(__pyx_k__219), 0, 1, 1}, /* PyObject cname: __pyx_n_u__219 */
  {__pyx_k__22, sizeof(__pyx_k__22), 0, 1, 1}, /* PyObject cname: __pyx_n_u__22 */
  {__pyx_k__220, sizeof(__pyx_k__220), 0, 1, 1}, /* PyObject cname: __pyx_n_u__220 */
  {__pyx_k__221, sizeof(__pyx_k__221), 0, 1, 1}, /* PyObject cname: __pyx_n_u__221 */
  {__pyx_k__222, sizeof(__pyx_k__222), 0, 1, 1}, /* PyObject cname: __pyx_n_u__222 */
  {__pyx_k__223, sizeof(__pyx_k__223), 0, 1, 1}, /* PyObject cname: __pyx_n_u__223 */
  {__pyx_k__224, sizeof(__pyx_k__224), 0, 1, 1}, /* PyObject cname: __pyx_n_u__224 */
  {__pyx_k__225, sizeof(__pyx_k__225), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__225 */
  {__pyx_k__226, sizeof(__pyx_k__226), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__226 */
  {__pyx_k__227, sizeof(__pyx_k__227), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__227 */
  {__pyx_k__228, sizeof(__pyx_k__228), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__228 */
  {__pyx_k__229, sizeof(__pyx_k__229), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__229 */
  {__pyx_k__23, sizeof(__pyx_k__23), 0, 1, 1}, /* PyObject cname: __pyx_n_u__23 */
  {__pyx_k__230, sizeof(__pyx_k__230), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__230 */
  {__pyx_k__231, sizeof(__pyx_k__231), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__231 */
  {__pyx_k__232, sizeof(__pyx_k__232), 0, 1, 1}, /* PyObject cname: __pyx_n_u__232 */
  {__pyx_k__233, sizeof(__pyx_k__233), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__233 */
  {__pyx_k__234, sizeof(__pyx_k__234), 0, 1, 1}, /* PyObject cname: __pyx_n_u__234 */
  {__pyx_k__235, sizeof(__pyx_k__235), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__235 */
  {__pyx_k__236, sizeof(__pyx_k__236), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__236 */
  {__pyx_k__237, sizeof(__pyx_k__237), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__237 */
  {__pyx_k__238, sizeof(__pyx_k__238), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__238 */
  {__pyx_k__239, sizeof(__pyx_k__239), 0, 1, 1}, /* PyObject cname: __pyx_n_u__239 */
  {__pyx_k__24, sizeof(__pyx_k__24), 0, 1, 1}, /* PyObject cname: __pyx_n_u__24 */
  {__pyx_k__240, sizeof(__pyx_k__240), 0, 1, 1}, /* PyObject cname: __pyx_n_u__240 */
  {__pyx_k__241, sizeof(__pyx_k__241), 0, 1, 1}, /* PyObject cname: __pyx_n_u__241 */
  {__pyx_k__242, sizeof(__pyx_k__242), 0, 1, 1}, /* PyObject cname: __pyx_n_u__242 */
  {__pyx_k__243, sizeof(__pyx_k__243), 0, 1, 1}, /* PyObject cname: __pyx_n_u__243 */
  {__pyx_k__244, sizeof(__pyx_k__244), 0, 1, 1}, /* PyObject cname: __pyx_n_u__244 */
  {__pyx_k__245, sizeof(__pyx_k__245), 0, 1, 1}, /* PyObject cname: __pyx_n_u__245 */
  {__pyx_k__246, sizeof(__pyx_k__246), 0, 1, 1}, /* PyObject cname: __pyx_n_u__246 */
  {__pyx_k__247, sizeof(__pyx_k__247), 0, 1, 1}, /* PyObject cname: __pyx_n_u__247 */
  {__pyx_k__248, sizeof(__pyx_k__248), 0, 1, 1}, /* PyObject cname: __pyx_n_u__248 */
  {__pyx_k__249, sizeof(__pyx_k__249), 0, 1, 1}, /* PyObject cname: __pyx_n_u__249 */
  {__pyx_k__25, sizeof(__pyx_k__25), 0, 1, 1}, /* PyObject cname: __pyx_n_u__25 */
  {__pyx_k__250, sizeof(__pyx_k__250), 0, 1, 1}, /* PyObject cname: __pyx_n_u__250 */
  {__pyx_k__251, sizeof(__pyx_k__251), 0, 1, 1}, /* PyObject cname: __pyx_n_u__251 */
  {__pyx_k__252, sizeof(__pyx_k__252), 0, 1, 1}, /* PyObject cname: __pyx_n_u__252 */
  {__pyx_k__253, sizeof(__pyx_k__253), 0, 1, 1}, /* PyObject cname: __pyx_n_u__253 */
  {__pyx_k__254, sizeof(__pyx_k__254), 0, 1, 1}, /* PyObject cname: __pyx_n_u__254 */
  {__pyx_k__255, sizeof(__pyx_k__255), 0, 1, 1}, /* PyObject cname: __pyx_n_u__255 */
  {__pyx_k__256, sizeof(__pyx_k__256), 0, 1, 1}, /* PyObject cname: __pyx_n_u__256 */
  {__pyx_k__257, sizeof(__pyx_k__257), 0, 1, 1}, /* PyObject cname: __pyx_n_u__257 */
  {__pyx_k__258, sizeof(__pyx_k__258), 0, 1, 1}, /* PyObject cname: __pyx_n_u__258 */
  {__pyx_k__259, sizeof(__pyx_k__259), 0, 1, 1}, /* PyObject cname: __pyx_n_u__259 */
  {__pyx_k__26, sizeof(__pyx_k__26), 0, 1, 1}, /* PyObject cname: __pyx_n_u__26 */
  {__pyx_k__260, sizeof(__pyx_k__260), 0, 1, 1}, /* PyObject cname: __pyx_n_u__260 */
  {__pyx_k__261, sizeof(__pyx_k__261), 0, 1, 1}, /* PyObject cname: __pyx_n_u__261 */
  {__pyx_k__262, sizeof(__pyx_k__262), 0, 1, 1}, /* PyObject cname: __pyx_n_u__262 */
  {__pyx_k__263, sizeof(__pyx_k__263), 0, 1, 1}, /* PyObject cname: __pyx_n_u__263 */
  {__pyx_k__264, sizeof(__pyx_k__264), 0, 1, 1}, /* PyObject cname: __pyx_n_u__264 */
  {__pyx_k__265, sizeof(__pyx_k__265), 0, 1, 1}, /* PyObject cname: __pyx_n_u__265 */
  {__pyx_k__266, sizeof(__pyx_k__266), 0, 1, 1}, /* PyObject cname: __pyx_n_u__266 */
  {__pyx_k__267, sizeof(__pyx_k__267), 0, 1, 1}, /* PyObject cname: __pyx_n_u__267 */
  {__pyx_k__268, sizeof(__pyx_k__268), 0, 1, 1}, /* PyObject cname: __pyx_n_u__268 */
  {__pyx_k__269, sizeof(__pyx_k__269), 0, 1, 1}, /* PyObject cname: __pyx_n_u__269 */
  {__pyx_k__27, sizeof(__pyx_k__27), 0, 1, 1}, /* PyObject cname: __pyx_n_u__27 */
  {__pyx_k__270, sizeof(__pyx_k__270), 0, 1, 1}, /* PyObject cname: __pyx_n_u__270 */
  {__pyx_k__271, sizeof(__pyx_k__271), 0, 1, 1}, /* PyObject cname: __pyx_n_u__271 */
  {__pyx_k__272, sizeof(__pyx_k__272), 0, 1, 1}, /* PyObject cname: __pyx_n_u__272 */
  {__pyx_k__273, sizeof(__pyx_k__273), 0, 1, 1}, /* PyObject cname: __pyx_n_u__273 */
  {__pyx_k__274, sizeof(__pyx_k__274), 0, 1, 1}, /* PyObject cname: __pyx_n_u__274 */
  {__pyx_k__275, sizeof(__pyx_k__275), 0, 1, 1}, /* PyObject cname: __pyx_n_u__275 */
  {__pyx_k__276, sizeof(__pyx_k__276), 0, 1, 1}, /* PyObject cname: __pyx_n_u__276 */
  {__pyx_k__277, sizeof(__pyx_k__277), 0, 1, 1}, /* PyObject cname: __pyx_n_u__277 */
  {__pyx_k__278, sizeof(__pyx_k__278), 0, 1, 1}, /* PyObject cname: __pyx_n_u__278 */
  {__pyx_k__279, sizeof(__pyx_k__279), 0, 1, 1}, /* PyObject cname: __pyx_n_u__279 */
  {__pyx_k__28, sizeof(__pyx_k__28), 0, 1, 1}, /* PyObject cname: __pyx_n_u__28 */
  {__pyx_k__280, sizeof(__pyx_k__280), 0, 1, 1}, /* PyObject cname: __pyx_n_u__280 */
  {__pyx_k__281, sizeof(__pyx_k__281), 0, 1, 1}, /* PyObject cname: __pyx_n_u__281 */
  {__pyx_k__282, sizeof(__pyx_k__282), 0, 1, 1}, /* PyObject cname: __pyx_n_u__282 */
  {__pyx_k__283, sizeof(__pyx_k__283), 0, 1, 1}, /* PyObject cname: __pyx_n_u__283 */
  {__pyx_k__284, sizeof(__pyx_k__284), 0, 1, 1}, /* PyObject cname: __pyx_n_u__284 */
  {__pyx_k__285, sizeof(__pyx_k__285), 0, 1, 1}, /* PyObject cname: __pyx_n_u__285 */
  {__pyx_k__286, sizeof(__pyx_k__286), 0, 1, 1}, /* PyObject cname: __pyx_n_u__286 */
  {__pyx_k__287, sizeof(__pyx_k__287), 0, 1, 1}, /* PyObject cname: __pyx_n_u__287 */
  {__pyx_k__288, sizeof(__pyx_k__288), 0, 1, 1}, /* PyObject cname: __pyx_n_u__288 */
  {__pyx_k__289, sizeof(__pyx_k__289), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__289 */
  {__pyx_k__29, sizeof(__pyx_k__29), 0, 1, 1}, /* PyObject cname: __pyx_n_u__29 */
  {__pyx_k__290, sizeof(__pyx_k__290), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__290 */
  {__pyx_k__291, sizeof(__pyx_k__291), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__291 */
  {__pyx_k__292, sizeof(__pyx_k__292), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__292 */
  {__pyx_k__293, sizeof(__pyx_k__293), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__293 */
  {__pyx_k__294, sizeof(__pyx_k__294), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__294 */
  {__pyx_k__295, sizeof(__pyx_k__295), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__295 */
  {__pyx_k__296, sizeof(__pyx_k__296), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__296 */
  {__pyx_k__297, sizeof(__pyx_k__297), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__297 */
  {__pyx_k__298, sizeof(__pyx_k__298), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__298 */
  {__pyx_k__299, sizeof(__pyx_k__299), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__299 */
  {__pyx_k__3, sizeof(__pyx_k__3), 0, 1, 1}, /* PyObject cname: __pyx_n_u__3 */
  {__pyx_k__30, sizeof(__pyx_k__30), 0, 1, 1}, /* PyObject cname: __pyx_n_u__30 */
  {__pyx_k__300, sizeof(__pyx_k__300), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__300 */
  {__pyx_k__301, sizeof(__pyx_k__301), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__301 */
  {__pyx_k__302, sizeof(__pyx_k__302), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__302 */
  {__pyx_k__303, sizeof(__pyx_k__303), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__303 */
  {__pyx_k__304, sizeof(__pyx_k__304), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__304 */
  {__pyx_k__305, sizeof(__pyx_k__305), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__305 */
  {__pyx_k__306, sizeof(__pyx_k__306), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__306 */
  {__pyx_k__307, sizeof(__pyx_k__307), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__307 */
  {__pyx_k__308, sizeof(__pyx_k__308), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__308 */
  {__pyx_k__309, sizeof(__pyx_k__309), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__309 */
  {__pyx_k__31, sizeof(__pyx_k__31), 0, 1, 1}, /* PyObject cname: __pyx_n_u__31 */
  {__pyx_k__310, sizeof(__pyx_k__310), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__310 */
  {__pyx_k__311, sizeof(__pyx_k__311), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__311 */
  {__pyx_k__32, sizeof(__pyx_k__32), 0, 1, 1}, /* PyObject cname: __pyx_n_u__32 */
  {__pyx_k__33, sizeof(__pyx_k__33), 0, 1, 1}, /* PyObject cname: __pyx_n_u__33 */
  {__pyx_k__34, sizeof(__pyx_k__34), 0, 1, 1}, /* PyObject cname: __pyx_n_u__34 */
  {__pyx_k__35, sizeof(__pyx_k__35), 0, 1, 1}, /* PyObject cname: __pyx_n_u__35 */
  {__pyx_k__36, sizeof(__pyx_k__36), 0, 1, 1}, /* PyObject cname: __pyx_n_u__36 */
  {__pyx_k__37, sizeof(__pyx_k__37), 0, 1, 1}, /* PyObject cname: __pyx_n_u__37 */
  {__pyx_k__38, sizeof(__pyx_k__38), 0, 1, 1}, /* PyObject cname: __pyx_n_u__38 */
  {__pyx_k__39, sizeof(__pyx_k__39), 0, 1, 1}, /* PyObject cname: __pyx_n_u__39 */
  {__pyx_k__4, sizeof(__pyx_k__4), 0, 1, 1}, /* PyObject cname: __pyx_n_u__4 */
  {__pyx_k__40, sizeof(__pyx_k__40), 0, 1, 1}, /* PyObject cname: __pyx_n_u__40 */
  {__pyx_k__41, sizeof(__pyx_k__41), 0, 1, 1}, /* PyObject cname: __pyx_n_u__41 */
  {__pyx_k__42, sizeof(__pyx_k__42), 0, 1, 1}, /* PyObject cname: __pyx_n_u__42 */
  {__pyx_k__43, sizeof(__pyx_k__43), 0, 1, 1}, /* PyObject cname: __pyx_n_u__43 */
  {__pyx_k__44, sizeof(__pyx_k__44), 0, 1, 1}, /* PyObject cname: __pyx_n_u__44 */
  {__pyx_k__45, sizeof(__pyx_k__45), 0, 1, 1}, /* PyObject cname: __pyx_n_u__45 */
  {__pyx_k__46, sizeof(__pyx_k__46), 0, 1, 1}, /* PyObject cname: __pyx_n_u__46 */
  {__pyx_k__47, sizeof(__pyx_k__47), 0, 1, 1}, /* PyObject cname: __pyx_n_u__47 */
  {__pyx_k__48, sizeof(__pyx_k__48), 0, 1, 1}, /* PyObject cname: __pyx_n_u__48 */
  {__pyx_k__49, sizeof(__pyx_k__49), 0, 1, 1}, /* PyObject cname: __pyx_n_u__49 */
  {__pyx_k__5, sizeof(__pyx_k__5), 0, 1, 1}, /* PyObject cname: __pyx_n_u__5 */
  {__pyx_k__50, sizeof(__pyx_k__50), 0, 1, 1}, /* PyObject cname: __pyx_n_u__50 */
  {__pyx_k__51, sizeof(__pyx_k__51), 0, 1, 1}, /* PyObject cname: __pyx_n_u__51 */
  {__pyx_k__52, sizeof(__pyx_k__52), 0, 1, 1}, /* PyObject cname: __pyx_n_u__52 */
  {__pyx_k__53, sizeof(__pyx_k__53), 0, 1, 1}, /* PyObject cname: __pyx_n_u__53 */
  {__pyx_k__54, sizeof(__pyx_k__54), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__54 */
  {__pyx_k__55, sizeof(__pyx_k__55), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__55 */
  {__pyx_k__56, sizeof(__pyx_k__56), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__56 */
  {__pyx_k__57, sizeof(__pyx_k__57), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__57 */
  {__pyx_k__58, sizeof(__pyx_k__58), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__58 */
  {__pyx_k__59, sizeof(__pyx_k__59), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__59 */
  {__pyx_k__6, sizeof(__pyx_k__6), 0, 1, 1}, /* PyObject cname: __pyx_n_u__6 */
  {__pyx_k__60, sizeof(__pyx_k__60), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__60 */
  {__pyx_k__61, sizeof(__pyx_k__61), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__61 */
  {__pyx_k__62, sizeof(__pyx_k__62), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__62 */
  {__pyx_k__63, sizeof(__pyx_k__63), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__63 */
  {__pyx_k__64, sizeof(__pyx_k__64), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__64 */
  {__pyx_k__65, sizeof(__pyx_k__65), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__65 */
  {__pyx_k__66, sizeof(__pyx_k__66), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__66 */
  {__pyx_k__67, sizeof(__pyx_k__67), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__67 */
  {__pyx_k__68, sizeof(__pyx_k__68), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__68 */
  {__pyx_k__69, sizeof(__pyx_k__69), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__69 */
  {__pyx_k__7, sizeof(__pyx_k__7), 0, 1, 1}, /* PyObject cname: __pyx_n_u__7 */
  {__pyx_k__70, sizeof(__pyx_k__70), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__70 */
  {__pyx_k__71, sizeof(__pyx_k__71), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__71 */
  {__pyx_k__72, sizeof(__pyx_k__72), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__72 */
  {__pyx_k__73, sizeof(__pyx_k__73), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__73 */
  {__pyx_k__74, sizeof(__pyx_k__74), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__74 */
  {__pyx_k__75, sizeof(__pyx_k__75), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__75 */
  {__pyx_k__76, sizeof(__pyx_k__76), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__76 */
  {__pyx_k__77, sizeof(__pyx_k__77), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__77 */
  {__pyx_k__78, sizeof(__pyx_k__78), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__78 */
  {__pyx_k__79, sizeof(__pyx_k__79), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__79 */
  {__pyx_k__8, sizeof(__pyx_k__8), 0, 1, 1}, /* PyObject cname: __pyx_n_u__8 */
  {__pyx_k__80, sizeof(__pyx_k__80), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__80 */
  {__pyx_k__81, sizeof(__pyx_k__81), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__81 */
  {__pyx_k__82, sizeof(__pyx_k__82), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__82 */
  {__pyx_k__83, sizeof(__pyx_k__83), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__83 */
  {__pyx_k__84, sizeof(__pyx_k__84), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__84 */
  {__pyx_k__85, sizeof(__pyx_k__85), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__85 */
  {__pyx_k__86, sizeof(__pyx_k__86), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__86 */
  {__pyx_k__87, sizeof(__pyx_k__87), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__87 */
  {__pyx_k__88, sizeof(__pyx_k__88), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__88 */
  {__pyx_k__89, sizeof(__pyx_k__89), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__89 */
  {__pyx_k__9, sizeof(__pyx_k__9), 0, 1, 1}, /* PyObject cname: __pyx_n_u__9 */
  {__pyx_k__90, sizeof(__pyx_k__90), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__90 */
  {__pyx_k__91, sizeof(__pyx_k__91), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__91 */
  {__pyx_k__92, sizeof(__pyx_k__92), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__92 */
  {__pyx_k__93, sizeof(__pyx_k__93), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__93 */
  {__pyx_k__94, sizeof(__pyx_k__94), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__94 */
  {__pyx_k__95, sizeof(__pyx_k__95), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__95 */
  {__pyx_k__96, sizeof(__pyx_k__96), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__96 */
  {__pyx_k__97, sizeof(__pyx_k__97), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__97 */
  {__pyx_k__98, sizeof(__pyx_k__98), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__98 */
  {__pyx_k__99, sizeof(__pyx_k__99), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__99 */
  {__pyx_k_a, sizeof(__pyx_k_a), 0, 1, 1}, /* PyObject cname: __pyx_n_u_a */
  {__pyx_k_add_note, sizeof(__pyx_k_add_note), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_add_note */
  {__pyx_k_after, sizeof(__pyx_k_after), 0, 1, 1}, /* PyObject cname: __pyx_n_u_after */
  {__pyx_k_asyncio_coroutines, sizeof(__pyx_k_asyncio_coroutines), 0, 1, 1}, /* PyObject cname: __pyx_n_u_asyncio_coroutines */
  {__pyx_k_b, sizeof(__pyx_k_b), 0, 1, 1}, /* PyObject cname: __pyx_n_u_b */
  {__pyx_k_before, sizeof(__pyx_k_before), 0, 1, 1}, /* PyObject cname: __pyx_n_u_before */
  {__pyx_k_c, sizeof(__pyx_k_c), 0, 1, 1}, /* PyObject cname: __pyx_n_u_c */
  {__pyx_k_chain, sizeof(__pyx_k_chain), 0, 1, 1}, /* PyObject cname: __pyx_n_u_chain */
  {__pyx_k_char_codes, sizeof(__pyx_k_char_codes), 0, 1, 1}, /* PyObject cname: __pyx_n_u_char_codes */
  {__pyx_k_chr, sizeof(__pyx_k_chr), 0, 1, 1}, /* PyObject cname: __pyx_n_u_chr */
  {__pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 1, 1}, /* PyObject cname: __pyx_n_u_cline_in_traceback */
  {__pyx_k_d, sizeof(__pyx_k_d), 0, 1, 1}, /* PyObject cname: __pyx_n_u_d */
  {__pyx_k_e, sizeof(__pyx_k_e), 0, 1, 1}, /* PyObject cname: __pyx_n_u_e */
  {__pyx_k_f, sizeof(__pyx_k_f), 0, 1, 1}, /* PyObject cname: __pyx_n_u_f */
  {__pyx_k_func, sizeof(__pyx_k_func), 0, 1, 1}, /* PyObject cname: __pyx_n_u_func */
  {__pyx_k_g, sizeof(__pyx_k_g), 0, 1, 1}, /* PyObject cname: __pyx_n_u_g */
  {__pyx_k_h, sizeof(__pyx_k_h), 0, 1, 1}, /* PyObject cname: __pyx_n_u_h */
  {__pyx_k_i, sizeof(__pyx_k_i), 0, 1, 1}, /* PyObject cname: __pyx_n_u_i */
  {__pyx_k_ignore, sizeof(__pyx_k_ignore), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ignore */
  {__pyx_k_initializing, sizeof(__pyx_k_initializing), 0, 1, 1}, /* PyObject cname: __pyx_n_u_initializing */
  {__pyx_k_is_coroutine, sizeof(__pyx_k_is_coroutine), 0, 1, 1}, /* PyObject cname: __pyx_n_u_is_coroutine */
  {__pyx_k_itertools, sizeof(__pyx_k_itertools), 0, 1, 1}, /* PyObject cname: __pyx_n_u_itertools */
  {__pyx_k_j, sizeof(__pyx_k_j), 0, 1, 1}, /* PyObject cname: __pyx_n_u_j */
  {__pyx_k_k, sizeof(__pyx_k_k), 0, 1, 1}, /* PyObject cname: __pyx_n_u_k */
  {__pyx_k_l, sizeof(__pyx_k_l), 0, 1, 1}, /* PyObject cname: __pyx_n_u_l */
  {__pyx_k_m, sizeof(__pyx_k_m), 0, 1, 1}, /* PyObject cname: __pyx_n_u_m */
  {__pyx_k_main, sizeof(__pyx_k_main), 0, 1, 1}, /* PyObject cname: __pyx_n_u_main */
  {__pyx_k_map, sizeof(__pyx_k_map), 0, 1, 1}, /* PyObject cname: __pyx_n_u_map */
  {__pyx_k_max_repeat_substr_length, sizeof(__pyx_k_max_repeat_substr_length), 0, 1, 1}, /* PyObject cname: __pyx_n_u_max_repeat_substr_length */
  {__pyx_k_n, sizeof(__pyx_k_n), 0, 1, 1}, /* PyObject cname: __pyx_n_u_n */
  {__pyx_k_name, sizeof(__pyx_k_name), 0, 1, 1}, /* PyObject cname: __pyx_n_u_name */
  {__pyx_k_neologdn, sizeof(__pyx_k_neologdn), 0, 1, 1}, /* PyObject cname: __pyx_n_u_neologdn */
  {__pyx_k_neologdn_pyx, sizeof(__pyx_k_neologdn_pyx), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_neologdn_pyx */
  {__pyx_k_normalize, sizeof(__pyx_k_normalize), 0, 1, 1}, /* PyObject cname: __pyx_n_u_normalize */
  {__pyx_k_normalize_zenkaku, sizeof(__pyx_k_normalize_zenkaku), 0, 1, 1}, /* PyObject cname: __pyx_n_u_normalize_zenkaku */
  {__pyx_k_o, sizeof(__pyx_k_o), 0, 1, 1}, /* PyObject cname: __pyx_n_u_o */
  {__pyx_k_p, sizeof(__pyx_k_p), 0, 1, 1}, /* PyObject cname: __pyx_n_u_p */
  {__pyx_k_q, sizeof(__pyx_k_q), 0, 1, 1}, /* PyObject cname: __pyx_n_u_q */
  {__pyx_k_r, sizeof(__pyx_k_r), 0, 1, 1}, /* PyObject cname: __pyx_n_u_r */
  {__pyx_k_range, sizeof(__pyx_k_range), 0, 1, 1}, /* PyObject cname: __pyx_n_u_range */
  {__pyx_k_remove, sizeof(__pyx_k_remove), 0, 1, 1}, /* PyObject cname: __pyx_n_u_remove */
  {__pyx_k_remove_space, sizeof(__pyx_k_remove_space), 0, 1, 1}, /* PyObject cname: __pyx_n_u_remove_space */
  {__pyx_k_repeat, sizeof(__pyx_k_repeat), 0, 1, 1}, /* PyObject cname: __pyx_n_u_repeat */
  {__pyx_k_repeat_threshould, sizeof(__pyx_k_repeat_threshould), 0, 1, 1}, /* PyObject cname: __pyx_n_u_repeat_threshould */
  {__pyx_k_s, sizeof(__pyx_k_s), 0, 1, 1}, /* PyObject cname: __pyx_n_u_s */
  {__pyx_k_shorten_repeat, sizeof(__pyx_k_shorten_repeat), 0, 1, 1}, /* PyObject cname: __pyx_n_u_shorten_repeat */
  {__pyx_k_spec, sizeof(__pyx_k_spec), 0, 1, 1}, /* PyObject cname: __pyx_n_u_spec */
  {__pyx_k_sys, sizeof(__pyx_k_sys), 0, 1, 1}, /* PyObject cname: __pyx_n_u_sys */
  {__pyx_k_t, sizeof(__pyx_k_t), 0, 1, 1}, /* PyObject cname: __pyx_n_u_t */
  {__pyx_k_test, sizeof(__pyx_k_test), 0, 1, 1}, /* PyObject cname: __pyx_n_u_test */
  {__pyx_k_text, sizeof(__pyx_k_text), 0, 1, 1}, /* PyObject cname: __pyx_n_u_text */
  {__pyx_k_tilde, sizeof(__pyx_k_tilde), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tilde */
  {__pyx_k_u, sizeof(__pyx_k_u), 0, 1, 1}, /* PyObject cname: __pyx_n_u_u */
  {__pyx_k_v, sizeof(__pyx_k_v), 0, 1, 1}, /* PyObject cname: __pyx_n_u_v */
  {__pyx_k_version, sizeof(__pyx_k_version), 0, 1, 1}, /* PyObject cname: __pyx_n_u_version */
  {__pyx_k_version_info, sizeof(__pyx_k_version_info), 0, 1, 1}, /* PyObject cname: __pyx_n_u_version_info */
  {__pyx_k_w, sizeof(__pyx_k_w), 0, 1, 1}, /* PyObject cname: __pyx_n_u_w */
  {__pyx_k_x, sizeof(__pyx_k_x), 0, 1, 1}, /* PyObject cname: __pyx_n_u_x */
  {__pyx_k_y, sizeof(__pyx_k_y), 0, 1, 1}, /* PyObject cname: __pyx_n_u_y */
  {__pyx_k_z, sizeof(__pyx_k_z), 0, 1, 1}, /* PyObject cname: __pyx_n_u_z */
  {0, 0, 0, 0, 0}
};
/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry const *t, PyObject **target, const char* const* encoding_names);

/* #### Code section: cached_builtins ### */

static int __Pyx_InitCachedBuiltins(__pyx_mstatetype *__pyx_mstate) {
  CYTHON_UNUSED_VAR(__pyx_mstate);
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_mstate->__pyx_n_u_range); if (!__pyx_builtin_range) __PYX_ERR(0, 94, __pyx_L1_error)
  __pyx_builtin_map = __Pyx_GetBuiltinName(__pyx_mstate->__pyx_n_u_map); if (!__pyx_builtin_map) __PYX_ERR(0, 100, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: cached_constants ### */

static int __Pyx_InitCachedConstants(__pyx_mstatetype *__pyx_mstate) {
  __Pyx_RefNannyDeclarations
  CYTHON_UNUSED_VAR(__pyx_mstate);
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "neologdn.pyx":11
 * from libcpp.unordered_set cimport unordered_set
 * 
 * VERSION = (0, 5, 4)             # <<<<<<<<<<<<<<
 * __version__ = '0.5.4'
 * 
*/
  __pyx_mstate_global->__pyx_tuple[0] = PyTuple_Pack(3, __pyx_mstate_global->__pyx_int_0, __pyx_mstate_global->__pyx_int_5, __pyx_mstate_global->__pyx_int_4); if (unlikely(!__pyx_mstate_global->__pyx_tuple[0])) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[0]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[0]);

  /* "neologdn.pyx":23
 * 
 * ASCII = (
 *     ('', 'a'), ('', 'b'), ('', 'c'), ('', 'd'), ('', 'e'),             # <<<<<<<<<<<<<<
 *     ('', 'f'), ('', 'g'), ('', 'h'), ('', 'i'), ('', 'j'),
 *     ('', 'k'), ('', 'l'), ('', 'm'), ('', 'n'), ('', 'o'),
*/
  __pyx_mstate_global->__pyx_tuple[1] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__2, __pyx_mstate_global->__pyx_n_u_a); if (unlikely(!__pyx_mstate_global->__pyx_tuple[1])) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[1]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[1]);
  __pyx_mstate_global->__pyx_tuple[2] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__3, __pyx_mstate_global->__pyx_n_u_b); if (unlikely(!__pyx_mstate_global->__pyx_tuple[2])) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[2]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[2]);
  __pyx_mstate_global->__pyx_tuple[3] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__4, __pyx_mstate_global->__pyx_n_u_c); if (unlikely(!__pyx_mstate_global->__pyx_tuple[3])) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[3]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[3]);
  __pyx_mstate_global->__pyx_tuple[4] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__5, __pyx_mstate_global->__pyx_n_u_d); if (unlikely(!__pyx_mstate_global->__pyx_tuple[4])) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[4]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[4]);
  __pyx_mstate_global->__pyx_tuple[5] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__6, __pyx_mstate_global->__pyx_n_u_e); if (unlikely(!__pyx_mstate_global->__pyx_tuple[5])) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[5]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[5]);

  /* "neologdn.pyx":24
 * ASCII = (
 *     ('', 'a'), ('', 'b'), ('', 'c'), ('', 'd'), ('', 'e'),
 *     ('', 'f'), ('', 'g'), ('', 'h'), ('', 'i'), ('', 'j'),             # <<<<<<<<<<<<<<
 *     ('', 'k'), ('', 'l'), ('', 'm'), ('', 'n'), ('', 'o'),
 *     ('', 'p'), ('', 'q'), ('', 'r'), ('', 's'), ('', 't'),
*/
  __pyx_mstate_global->__pyx_tuple[6] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__7, __pyx_mstate_global->__pyx_n_u_f); if (unlikely(!__pyx_mstate_global->__pyx_tuple[6])) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[6]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[6]);
  __pyx_mstate_global->__pyx_tuple[7] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__8, __pyx_mstate_global->__pyx_n_u_g); if (unlikely(!__pyx_mstate_global->__pyx_tuple[7])) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[7]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[7]);
  __pyx_mstate_global->__pyx_tuple[8] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__9, __pyx_mstate_global->__pyx_n_u_h); if (unlikely(!__pyx_mstate_global->__pyx_tuple[8])) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[8]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[8]);
  __pyx_mstate_global->__pyx_tuple[9] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__10, __pyx_mstate_global->__pyx_n_u_i); if (unlikely(!__pyx_mstate_global->__pyx_tuple[9])) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[9]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[9]);
  __pyx_mstate_global->__pyx_tuple[10] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__11, __pyx_mstate_global->__pyx_n_u_j); if (unlikely(!__pyx_mstate_global->__pyx_tuple[10])) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[10]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[10]);

  /* "neologdn.pyx":25
 *     ('', 'a'), ('', 'b'), ('', 'c'), ('', 'd'), ('', 'e'),
 *     ('', 'f'), ('', 'g'), ('', 'h'), ('', 'i'), ('', 'j'),
 *     ('', 'k'), ('', 'l'), ('', 'm'), ('', 'n'), ('', 'o'),             # <<<<<<<<<<<<<<
 *     ('', 'p'), ('', 'q'), ('', 'r'), ('', 's'), ('', 't'),
 *     ('', 'u'), ('', 'v'), ('', 'w'), ('', 'x'), ('', 'y'),
*/
  __pyx_mstate_global->__pyx_tuple[11] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__12, __pyx_mstate_global->__pyx_n_u_k); if (unlikely(!__pyx_mstate_global->__pyx_tuple[11])) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[11]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[11]);
  __pyx_mstate_global->__pyx_tuple[12] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__13, __pyx_mstate_global->__pyx_n_u_l); if (unlikely(!__pyx_mstate_global->__pyx_tuple[12])) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[12]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[12]);
  __pyx_mstate_global->__pyx_tuple[13] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__14, __pyx_mstate_global->__pyx_n_u_m); if (unlikely(!__pyx_mstate_global->__pyx_tuple[13])) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[13]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[13]);
  __pyx_mstate_global->__pyx_tuple[14] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__15, __pyx_mstate_global->__pyx_n_u_n); if (unlikely(!__pyx_mstate_global->__pyx_tuple[14])) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[14]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[14]);
  __pyx_mstate_global->__pyx_tuple[15] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__16, __pyx_mstate_global->__pyx_n_u_o); if (unlikely(!__pyx_mstate_global->__pyx_tuple[15])) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[15]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[15]);

  /* "neologdn.pyx":26
 *     ('', 'f'), ('', 'g'), ('', 'h'), ('', 'i'), ('', 'j'),
 *     ('', 'k'), ('', 'l'), ('', 'm'), ('', 'n'), ('', 'o'),
 *     ('', 'p'), ('', 'q'), ('', 'r'), ('', 's'), ('', 't'),             # <<<<<<<<<<<<<<
 *     ('', 'u'), ('', 'v'), ('', 'w'), ('', 'x'), ('', 'y'),
 *     ('', 'z'),
*/
  __pyx_mstate_global->__pyx_tuple[16] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__17, __pyx_mstate_global->__pyx_n_u_p); if (unlikely(!__pyx_mstate_global->__pyx_tuple[16])) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[16]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[16]);
  __pyx_mstate_global->__pyx_tuple[17] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__18, __pyx_mstate_global->__pyx_n_u_q); if (unlikely(!__pyx_mstate_global->__pyx_tuple[17])) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[17]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[17]);
  __pyx_mstate_global->__pyx_tuple[18] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__19, __pyx_mstate_global->__pyx_n_u_r); if (unlikely(!__pyx_mstate_global->__pyx_tuple[18])) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[18]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[18]);
  __pyx_mstate_global->__pyx_tuple[19] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__20, __pyx_mstate_global->__pyx_n_u_s); if (unlikely(!__pyx_mstate_global->__pyx_tuple[19])) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[19]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[19]);
  __pyx_mstate_global->__pyx_tuple[20] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__21, __pyx_mstate_global->__pyx_n_u_t); if (unlikely(!__pyx_mstate_global->__pyx_tuple[20])) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[20]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[20]);

  /* "neologdn.pyx":27
 *     ('', 'k'), ('', 'l'), ('', 'm'), ('', 'n'), ('', 'o'),
 *     ('', 'p'), ('', 'q'), ('', 'r'), ('', 's'), ('', 't'),
 *     ('', 'u'), ('', 'v'), ('', 'w'), ('', 'x'), ('', 'y'),             # <<<<<<<<<<<<<<
 *     ('', 'z'),
 *     ('', 'A'), ('', 'B'), ('', 'C'), ('', 'D'), ('', 'E'),
*/
  __pyx_mstate_global->__pyx_tuple[21] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__22, __pyx_mstate_global->__pyx_n_u_u); if (unlikely(!__pyx_mstate_global->__pyx_tuple[21])) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[21]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[21]);
  __pyx_mstate_global->__pyx_tuple[22] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__23, __pyx_mstate_global->__pyx_n_u_v); if (unlikely(!__pyx_mstate_global->__pyx_tuple[22])) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[22]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[22]);
  __pyx_mstate_global->__pyx_tuple[23] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__24, __pyx_mstate_global->__pyx_n_u_w); if (unlikely(!__pyx_mstate_global->__pyx_tuple[23])) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[23]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[23]);
  __pyx_mstate_global->__pyx_tuple[24] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__25, __pyx_mstate_global->__pyx_n_u_x); if (unlikely(!__pyx_mstate_global->__pyx_tuple[24])) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[24]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[24]);
  __pyx_mstate_global->__pyx_tuple[25] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__26, __pyx_mstate_global->__pyx_n_u_y); if (unlikely(!__pyx_mstate_global->__pyx_tuple[25])) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[25]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[25]);

  /* "neologdn.pyx":28
 *     ('', 'p'), ('', 'q'), ('', 'r'), ('', 's'), ('', 't'),
 *     ('', 'u'), ('', 'v'), ('', 'w'), ('', 'x'), ('', 'y'),
 *     ('', 'z'),             # <<<<<<<<<<<<<<
 *     ('', 'A'), ('', 'B'), ('', 'C'), ('', 'D'), ('', 'E'),
 *     ('', 'F'), ('', 'G'), ('', 'H'), ('', 'I'), ('', 'J'),
*/
  __pyx_mstate_global->__pyx_tuple[26] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__27, __pyx_mstate_global->__pyx_n_u_z); if (unlikely(!__pyx_mstate_global->__pyx_tuple[26])) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[26]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[26]);

  /* "neologdn.pyx":29
 *     ('', 'u'), ('', 'v'), ('', 'w'), ('', 'x'), ('', 'y'),
 *     ('', 'z'),
 *     ('', 'A'), ('', 'B'), ('', 'C'), ('', 'D'), ('', 'E'),             # <<<<<<<<<<<<<<
 *     ('', 'F'), ('', 'G'), ('', 'H'), ('', 'I'), ('', 'J'),
 *     ('', 'K'), ('', 'L'), ('', 'M'), ('', 'N'), ('', 'O'),
*/
  __pyx_mstate_global->__pyx_tuple[27] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__28, __pyx_mstate_global->__pyx_n_u_A); if (unlikely(!__pyx_mstate_global->__pyx_tuple[27])) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[27]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[27]);
  __pyx_mstate_global->__pyx_tuple[28] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__29, __pyx_mstate_global->__pyx_n_u_B); if (unlikely(!__pyx_mstate_global->__pyx_tuple[28])) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[28]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[28]);
  __pyx_mstate_global->__pyx_tuple[29] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__30, __pyx_mstate_global->__pyx_n_u_C); if (unlikely(!__pyx_mstate_global->__pyx_tuple[29])) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[29]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[29]);
  __pyx_mstate_global->__pyx_tuple[30] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__31, __pyx_mstate_global->__pyx_n_u_D); if (unlikely(!__pyx_mstate_global->__pyx_tuple[30])) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[30]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[30]);
  __pyx_mstate_global->__pyx_tuple[31] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__32, __pyx_mstate_global->__pyx_n_u_E); if (unlikely(!__pyx_mstate_global->__pyx_tuple[31])) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[31]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[31]);

  /* "neologdn.pyx":30
 *     ('', 'z'),
 *     ('', 'A'), ('', 'B'), ('', 'C'), ('', 'D'), ('', 'E'),
 *     ('', 'F'), ('', 'G'), ('', 'H'), ('', 'I'), ('', 'J'),             # <<<<<<<<<<<<<<
 *     ('', 'K'), ('', 'L'), ('', 'M'), ('', 'N'), ('', 'O'),
 *     ('', 'P'), ('', 'Q'), ('', 'R'), ('', 'S'), ('', 'T'),
*/
  __pyx_mstate_global->__pyx_tuple[32] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__33, __pyx_mstate_global->__pyx_n_u_F); if (unlikely(!__pyx_mstate_global->__pyx_tuple[32])) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[32]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[32]);
  __pyx_mstate_global->__pyx_tuple[33] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__34, __pyx_mstate_global->__pyx_n_u_G); if (unlikely(!__pyx_mstate_global->__pyx_tuple[33])) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[33]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[33]);
  __pyx_mstate_global->__pyx_tuple[34] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__35, __pyx_mstate_global->__pyx_n_u_H); if (unlikely(!__pyx_mstate_global->__pyx_tuple[34])) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[34]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[34]);
  __pyx_mstate_global->__pyx_tuple[35] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__36, __pyx_mstate_global->__pyx_n_u_I); if (unlikely(!__pyx_mstate_global->__pyx_tuple[35])) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[35]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[35]);
  __pyx_mstate_global->__pyx_tuple[36] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__37, __pyx_mstate_global->__pyx_n_u_J); if (unlikely(!__pyx_mstate_global->__pyx_tuple[36])) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[36]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[36]);

  /* "neologdn.pyx":31
 *     ('', 'A'), ('', 'B'), ('', 'C'), ('', 'D'), ('', 'E'),
 *     ('', 'F'), ('', 'G'), ('', 'H'), ('', 'I'), ('', 'J'),
 *     ('', 'K'), ('', 'L'), ('', 'M'), ('', 'N'), ('', 'O'),             # <<<<<<<<<<<<<<
 *     ('', 'P'), ('', 'Q'), ('', 'R'), ('', 'S'), ('', 'T'),
 *     ('', 'U'), ('', 'V'), ('', 'W'), ('', 'X'), ('', 'Y'),
*/
  __pyx_mstate_global->__pyx_tuple[37] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__38, __pyx_mstate_global->__pyx_n_u_K); if (unlikely(!__pyx_mstate_global->__pyx_tuple[37])) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[37]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[37]);
  __pyx_mstate_global->__pyx_tuple[38] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__39, __pyx_mstate_global->__pyx_n_u_L); if (unlikely(!__pyx_mstate_global->__pyx_tuple[38])) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[38]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[38]);
  __pyx_mstate_global->__pyx_tuple[39] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__40, __pyx_mstate_global->__pyx_n_u_M); if (unlikely(!__pyx_mstate_global->__pyx_tuple[39])) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[39]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[39]);
  __pyx_mstate_global->__pyx_tuple[40] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__41, __pyx_mstate_global->__pyx_n_u_N); if (unlikely(!__pyx_mstate_global->__pyx_tuple[40])) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[40]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[40]);
  __pyx_mstate_global->__pyx_tuple[41] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__42, __pyx_mstate_global->__pyx_n_u_O); if (unlikely(!__pyx_mstate_global->__pyx_tuple[41])) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[41]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[41]);

  /* "neologdn.pyx":32
 *     ('', 'F'), ('', 'G'), ('', 'H'), ('', 'I'), ('', 'J'),
 *     ('', 'K'), ('', 'L'), ('', 'M'), ('', 'N'), ('', 'O'),
 *     ('', 'P'), ('', 'Q'), ('', 'R'), ('', 'S'), ('', 'T'),             # <<<<<<<<<<<<<<
 *     ('', 'U'), ('', 'V'), ('', 'W'), ('', 'X'), ('', 'Y'),
 *     ('', 'Z'),
*/
  __pyx_mstate_global->__pyx_tuple[42] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__43, __pyx_mstate_global->__pyx_n_u_P); if (unlikely(!__pyx_mstate_global->__pyx_tuple[42])) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[42]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[42]);
  __pyx_mstate_global->__pyx_tuple[43] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__44, __pyx_mstate_global->__pyx_n_u_Q); if (unlikely(!__pyx_mstate_global->__pyx_tuple[43])) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[43]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[43]);
  __pyx_mstate_global->__pyx_tuple[44] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__45, __pyx_mstate_global->__pyx_n_u_R); if (unlikely(!__pyx_mstate_global->__pyx_tuple[44])) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[44]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[44]);
  __pyx_mstate_global->__pyx_tuple[45] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__46, __pyx_mstate_global->__pyx_n_u_S); if (unlikely(!__pyx_mstate_global->__pyx_tuple[45])) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[45]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[45]);
  __pyx_mstate_global->__pyx_tuple[46] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__47, __pyx_mstate_global->__pyx_n_u_T); if (unlikely(!__pyx_mstate_global->__pyx_tuple[46])) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[46]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[46]);

  /* "neologdn.pyx":33
 *     ('', 'K'), ('', 'L'), ('', 'M'), ('', 'N'), ('', 'O'),
 *     ('', 'P'), ('', 'Q'), ('', 'R'), ('', 'S'), ('', 'T'),
 *     ('', 'U'), ('', 'V'), ('', 'W'), ('', 'X'), ('', 'Y'),             # <<<<<<<<<<<<<<
 *     ('', 'Z'),
 *     ('', '!'), ('', '"'), ('', '#'), ('', '$'), ('', '%'),
*/
  __pyx_mstate_global->__pyx_tuple[47] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__48, __pyx_mstate_global->__pyx_n_u_U); if (unlikely(!__pyx_mstate_global->__pyx_tuple[47])) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[47]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[47]);
  __pyx_mstate_global->__pyx_tuple[48] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__49, __pyx_mstate_global->__pyx_n_u_V); if (unlikely(!__pyx_mstate_global->__pyx_tuple[48])) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[48]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[48]);
  __pyx_mstate_global->__pyx_tuple[49] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__50, __pyx_mstate_global->__pyx_n_u_W); if (unlikely(!__pyx_mstate_global->__pyx_tuple[49])) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[49]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[49]);
  __pyx_mstate_global->__pyx_tuple[50] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__51, __pyx_mstate_global->__pyx_n_u_X); if (unlikely(!__pyx_mstate_global->__pyx_tuple[50])) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[50]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[50]);
  __pyx_mstate_global->__pyx_tuple[51] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__52, __pyx_mstate_global->__pyx_n_u_Y); if (unlikely(!__pyx_mstate_global->__pyx_tuple[51])) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[51]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[51]);

  /* "neologdn.pyx":34
 *     ('', 'P'), ('', 'Q'), ('', 'R'), ('', 'S'), ('', 'T'),
 *     ('', 'U'), ('', 'V'), ('', 'W'), ('', 'X'), ('', 'Y'),
 *     ('', 'Z'),             # <<<<<<<<<<<<<<
 *     ('', '!'), ('', '"'), ('', '#'), ('', '$'), ('', '%'),
 *     ('', '&'), ('', '\''), ('', '('), ('', ')'), ('', '*'),
*/
  __pyx_mstate_global->__pyx_tuple[52] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__53, __pyx_mstate_global->__pyx_n_u_Z); if (unlikely(!__pyx_mstate_global->__pyx_tuple[52])) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[52]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[52]);

  /* "neologdn.pyx":35
 *     ('', 'U'), ('', 'V'), ('', 'W'), ('', 'X'), ('', 'Y'),
 *     ('', 'Z'),
 *     ('', '!'), ('', '"'), ('', '#'), ('', '$'), ('', '%'),             # <<<<<<<<<<<<<<
 *     ('', '&'), ('', '\''), ('', '('), ('', ')'), ('', '*'),
 *     ('', '+'), ('', ','), ('', '-'), ('', '.'), ('', '/'),
*/
  __pyx_mstate_global->__pyx_tuple[53] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_kp_u__54, __pyx_mstate_global->__pyx_kp_u__55); if (unlikely(!__pyx_mstate_global->__pyx_tuple[53])) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[53]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[53]);
  __pyx_mstate_global->__pyx_tuple[54] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_kp_u__56, __pyx_mstate_global->__pyx_kp_u__57); if (unlikely(!__pyx_mstate_global->__pyx_tuple[54])) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[54]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[54]);
  __pyx_mstate_global->__pyx_tuple[55] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_kp_u__58, __pyx_mstate_global->__pyx_kp_u__59); if (unlikely(!__pyx_mstate_global->__pyx_tuple[55])) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[55]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[55]);
  __pyx_mstate_global->__pyx_tuple[56] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_kp_u__60, __pyx_mstate_global->__pyx_kp_u__61); if (unlikely(!__pyx_mstate_global->__pyx_tuple[56])) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[56]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[56]);
  __pyx_mstate_global->__pyx_tuple[57] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_kp_u__62, __pyx_mstate_global->__pyx_kp_u__63); if (unlikely(!__pyx_mstate_global->__pyx_tuple[57])) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[57]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[57]);

  /* "neologdn.pyx":36
 *     ('', 'Z'),
 *     ('', '!'), ('', '"'), ('', '#'), ('', '$'), ('', '%'),
 *     ('', '&'), ('', '\''), ('', '('), ('', ')'), ('', '*'),             # <<<<<<<<<<<<<<
 *     ('', '+'), ('', ','), ('', '-'), ('', '.'), ('', '/'),
 *     ('', ':'), ('', ';'), ('', '<'), ('', '='), ('', '>'),
*/
  __pyx_mstate_global->__pyx_tuple[58] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_kp_u__64, __pyx_mstate_global->__pyx_kp_u__65); if (unlikely(!__pyx_mstate_global->__pyx_tuple[58])) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[58]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[58]);
  __pyx_mstate_global->__pyx_tuple[59] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_kp_u__66, __pyx_mstate_global->__pyx_kp_u__67); if (unlikely(!__pyx_mstate_global->__pyx_tuple[59])) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[59]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[59]);
  __pyx_mstate_global->__pyx_tuple[60] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_kp_u__68, __pyx_mstate_global->__pyx_kp_u__69); if (unlikely(!__pyx_mstate_global->__pyx_tuple[60])) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[60]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[60]);
  __pyx_mstate_global->__pyx_tuple[61] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_kp_u__70, __pyx_mstate_global->__pyx_kp_u__71); if (unlikely(!__pyx_mstate_global->__pyx_tuple[61])) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[61]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[61]);
  __pyx_mstate_global->__pyx_tuple[62] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_kp_u__72, __pyx_mstate_global->__pyx_kp_u__73); if (unlikely(!__pyx_mstate_global->__pyx_tuple[62])) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[62]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[62]);

  /* "neologdn.pyx":37
 *     ('', '!'), ('', '"'), ('', '#'), ('', '$'), ('', '%'),
 *     ('', '&'), ('', '\''), ('', '('), ('', ')'), ('', '*'),
 *     ('', '+'), ('', ','), ('', '-'), ('', '.'), ('', '/'),             # <<<<<<<<<<<<<<
 *     ('', ':'), ('', ';'), ('', '<'), ('', '='), ('', '>'),
 *     ('', '?'), ('', '@'), ('', '['), ('', '\\'), ('', ']'),
*/
  __pyx_mstate_global->__pyx_tuple[63] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_kp_u__74, __pyx_mstate_global->__pyx_kp_u__75); if (unlikely(!__pyx_mstate_global->__pyx_tuple[63])) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[63]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[63]);
  __pyx_mstate_global->__pyx_tuple[64] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_kp_u__76, __pyx_mstate_global->__pyx_kp_u__77); if (unlikely(!__pyx_mstate_global->__pyx_tuple[64])) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[64]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[64]);
  __pyx_mstate_global->__pyx_tuple[65] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_kp_u__78, __pyx_mstate_global->__pyx_kp_u__79); if (unlikely(!__pyx_mstate_global->__pyx_tuple[65])) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[65]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[65]);
  __pyx_mstate_global->__pyx_tuple[66] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_kp_u__80, __pyx_mstate_global->__pyx_kp_u_); if (unlikely(!__pyx_mstate_global->__pyx_tuple[66])) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[66]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[66]);
  __pyx_mstate_global->__pyx_tuple[67] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_kp_u__81, __pyx_mstate_global->__pyx_kp_u__82); if (unlikely(!__pyx_mstate_global->__pyx_tuple[67])) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[67]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[67]);

  /* "neologdn.pyx":38
 *     ('', '&'), ('', '\''), ('', '('), ('', ')'), ('', '*'),
 *     ('', '+'), ('', ','), ('', '-'), ('', '.'), ('', '/'),
 *     ('', ':'), ('', ';'), ('', '<'), ('', '='), ('', '>'),             # <<<<<<<<<<<<<<
 *     ('', '?'), ('', '@'), ('', '['), ('', '\\'), ('', ']'),
 *     ('', '^'), ('', '_'), ('', '`'), ('', '{'), ('', '|'),
*/
  __pyx_mstate_global->__pyx_tuple[68] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_kp_u__83, __pyx_mstate_global->__pyx_kp_u__84); if (unlikely(!__pyx_mstate_global->__pyx_tuple[68])) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[68]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[68]);
  __pyx_mstate_global->__pyx_tuple[69] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_kp_u__85, __pyx_mstate_global->__pyx_kp_u__86); if (unlikely(!__pyx_mstate_global->__pyx_tuple[69])) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[69]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[69]);
  __pyx_mstate_global->__pyx_tuple[70] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_kp_u__87, __pyx_mstate_global->__pyx_kp_u__88); if (unlikely(!__pyx_mstate_global->__pyx_tuple[70])) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[70]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[70]);
  __pyx_mstate_global->__pyx_tuple[71] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_kp_u__89, __pyx_mstate_global->__pyx_kp_u__90); if (unlikely(!__pyx_mstate_global->__pyx_tuple[71])) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[71]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[71]);
  __pyx_mstate_global->__pyx_tuple[72] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_kp_u__91, __pyx_mstate_global->__pyx_kp_u__92); if (unlikely(!__pyx_mstate_global->__pyx_tuple[72])) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[72]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[72]);

  /* "neologdn.pyx":39
 *     ('', '+'), ('', ','), ('', '-'), ('', '.'), ('', '/'),
 *     ('', ':'), ('', ';'), ('', '<'), ('', '='), ('', '>'),
 *     ('', '?'), ('', '@'), ('', '['), ('', '\\'), ('', ']'),             # <<<<<<<<<<<<<<
 *     ('', '^'), ('', '_'), ('', '`'), ('', '{'), ('', '|'),
 *     ('', '}')
*/
  __pyx_mstate_global->__pyx_tuple[73] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_kp_u__93, __pyx_mstate_global->__pyx_kp_u__94); if (unlikely(!__pyx_mstate_global->__pyx_tuple[73])) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[73]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[73]);
  __pyx_mstate_global->__pyx_tuple[74] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_kp_u__95, __pyx_mstate_global->__pyx_kp_u__96); if (unlikely(!__pyx_mstate_global->__pyx_tuple[74])) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[74]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[74]);
  __pyx_mstate_global->__pyx_tuple[75] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_kp_u__97, __pyx_mstate_global->__pyx_kp_u__98); if (unlikely(!__pyx_mstate_global->__pyx_tuple[75])) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[75]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[75]);
  __pyx_mstate_global->__pyx_tuple[76] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_kp_u__99, __pyx_mstate_global->__pyx_kp_u__100); if (unlikely(!__pyx_mstate_global->__pyx_tuple[76])) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[76]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[76]);
  __pyx_mstate_global->__pyx_tuple[77] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_kp_u__101, __pyx_mstate_global->__pyx_kp_u__102); if (unlikely(!__pyx_mstate_global->__pyx_tuple[77])) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[77]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[77]);

  /* "neologdn.pyx":40
 *     ('', ':'), ('', ';'), ('', '<'), ('', '='), ('', '>'),
 *     ('', '?'), ('', '@'), ('', '['), ('', '\\'), ('', ']'),
 *     ('', '^'), ('', '_'), ('', '`'), ('', '{'), ('', '|'),             # <<<<<<<<<<<<<<
 *     ('', '}')
 * )
*/
  __pyx_mstate_global->__pyx_tuple[78] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_kp_u__103, __pyx_mstate_global->__pyx_kp_u__104); if (unlikely(!__pyx_mstate_global->__pyx_tuple[78])) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[78]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[78]);
  __pyx_mstate_global->__pyx_tuple[79] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_kp_u__105, __pyx_mstate_global->__pyx_n_u__106); if (unlikely(!__pyx_mstate_global->__pyx_tuple[79])) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[79]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[79]);
  __pyx_mstate_global->__pyx_tuple[80] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_kp_u__107, __pyx_mstate_global->__pyx_kp_u__108); if (unlikely(!__pyx_mstate_global->__pyx_tuple[80])) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[80]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[80]);
  __pyx_mstate_global->__pyx_tuple[81] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_kp_u__109, __pyx_mstate_global->__pyx_kp_u__110); if (unlikely(!__pyx_mstate_global->__pyx_tuple[81])) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[81]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[81]);
  __pyx_mstate_global->__pyx_tuple[82] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_kp_u__111, __pyx_mstate_global->__pyx_kp_u__112); if (unlikely(!__pyx_mstate_global->__pyx_tuple[82])) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[82]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[82]);

  /* "neologdn.pyx":41
 *     ('', '?'), ('', '@'), ('', '['), ('', '\\'), ('', ']'),
 *     ('', '^'), ('', '_'), ('', '`'), ('', '{'), ('', '|'),
 *     ('', '}')             # <<<<<<<<<<<<<<
 * )
 * KANA = (
*/
  __pyx_mstate_global->__pyx_tuple[83] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_kp_u__113, __pyx_mstate_global->__pyx_kp_u__114); if (unlikely(!__pyx_mstate_global->__pyx_tuple[83])) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[83]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[83]);

  /* "neologdn.pyx":23
 * 
 * ASCII = (
 *     ('', 'a'), ('', 'b'), ('', 'c'), ('', 'd'), ('', 'e'),             # <<<<<<<<<<<<<<
 *     ('', 'f'), ('', 'g'), ('', 'h'), ('', 'i'), ('', 'j'),
 *     ('', 'k'), ('', 'l'), ('', 'm'), ('', 'n'), ('', 'o'),
*/
  __pyx_mstate_global->__pyx_tuple[84] = PyTuple_Pack(83, __pyx_mstate_global->__pyx_tuple[1], __pyx_mstate_global->__pyx_tuple[2], __pyx_mstate_global->__pyx_tuple[3], __pyx_mstate_global->__pyx_tuple[4], __pyx_mstate_global->__pyx_tuple[5], __pyx_mstate_global->__pyx_tuple[6], __pyx_mstate_global->__pyx_tuple[7], __pyx_mstate_global->__pyx_tuple[8], __pyx_mstate_global->__pyx_tuple[9], __pyx_mstate_global->__pyx_tuple[10], __pyx_mstate_global->__pyx_tuple[11], __pyx_mstate_global->__pyx_tuple[12], __pyx_mstate_global->__pyx_tuple[13], __pyx_mstate_global->__pyx_tuple[14], __pyx_mstate_global->__pyx_tuple[15], __pyx_mstate_global->__pyx_tuple[16], __pyx_mstate_global->__pyx_tuple[17], __pyx_mstate_global->__pyx_tuple[18], __pyx_mstate_global->__pyx_tuple[19], __pyx_mstate_global->__pyx_tuple[20], __pyx_mstate_global->__pyx_tuple[21], __pyx_mstate_global->__pyx_tuple[22], __pyx_mstate_global->__pyx_tuple[23], __pyx_mstate_global->__pyx_tuple[24], __pyx_mstate_global->__pyx_tuple[25], __pyx_mstate_global->__pyx_tuple[26], __pyx_mstate_global->__pyx_tuple[27], __pyx_mstate_global->__pyx_tuple[28], __pyx_mstate_global->__pyx_tuple[29], __pyx_mstate_global->__pyx_tuple[30], __pyx_mstate_global->__pyx_tuple[31], __pyx_mstate_global->__pyx_tuple[32], __pyx_mstate_global->__pyx_tuple[33], __pyx_mstate_global->__pyx_tuple[34], __pyx_mstate_global->__pyx_tuple[35], __pyx_mstate_global->__pyx_tuple[36], __pyx_mstate_global->__pyx_tuple[37], __pyx_mstate_global->__pyx_tuple[38], __pyx_mstate_global->__pyx_tuple[39], __pyx_mstate_global->__pyx_tuple[40], __pyx_mstate_global->__pyx_tuple[41], __pyx_mstate_global->__pyx_tuple[42], __pyx_mstate_global->__pyx_tuple[43], __pyx_mstate_global->__pyx_tuple[44], __pyx_mstate_global->__pyx_tuple[45], __pyx_mstate_global->__pyx_tuple[46], __pyx_mstate_global->__pyx_tuple[47], __pyx_mstate_global->__pyx_tuple[48], __pyx_mstate_global->__pyx_tuple[49], __pyx_mstate_global->__pyx_tuple[50], __pyx_mstate_global->__pyx_tuple[51], __pyx_mstate_global->__pyx_tuple[52], __pyx_mstate_global->__pyx_tuple[53], __pyx_mstate_global->__pyx_tuple[54], __pyx_mstate_global->__pyx_tuple[55], __pyx_mstate_global->__pyx_tuple[56], __pyx_mstate_global->__pyx_tuple[57], __pyx_mstate_global->__pyx_tuple[58], __pyx_mstate_global->__pyx_tuple[59], __pyx_mstate_global->__pyx_tuple[60], __pyx_mstate_global->__pyx_tuple[61], __pyx_mstate_global->__pyx_tuple[62], __pyx_mstate_global->__pyx_tuple[63], __pyx_mstate_global->__pyx_tuple[64], __pyx_mstate_global->__pyx_tuple[65], __pyx_mstate_global->__pyx_tuple[66], __pyx_mstate_global->__pyx_tuple[67], __pyx_mstate_global->__pyx_tuple[68], __pyx_mstate_global->__pyx_tuple[69], __pyx_mstate_global->__pyx_tuple[70], __pyx_mstate_global->__pyx_tuple[71], __pyx_mstate_global->__pyx_tuple[72], __pyx_mstate_global->__pyx_tuple[73], __pyx_mstate_global->__pyx_tuple[74], __pyx_mstate_global->__pyx_tuple[75], __pyx_mstate_global->__pyx_tuple[76], __pyx_mstate_global->__pyx_tuple[77], __pyx_mstate_global->__pyx_tuple[78], __pyx_mstate_global->__pyx_tuple[79], __pyx_mstate_global->__pyx_tuple[80], __pyx_mstate_global->__pyx_tuple[81], __pyx_mstate_global->__pyx_tuple[82], __pyx_mstate_global->__pyx_tuple[83]); if (unlikely(!__pyx_mstate_global->__pyx_tuple[84])) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[84]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[84]);

  /* "neologdn.pyx":44
 * )
 * KANA = (
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),             # <<<<<<<<<<<<<<
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
*/
  __pyx_mstate_global->__pyx_tuple[85] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__115, __pyx_mstate_global->__pyx_n_u__116); if (unlikely(!__pyx_mstate_global->__pyx_tuple[85])) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[85]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[85]);
  __pyx_mstate_global->__pyx_tuple[86] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__117, __pyx_mstate_global->__pyx_n_u__118); if (unlikely(!__pyx_mstate_global->__pyx_tuple[86])) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[86]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[86]);
  __pyx_mstate_global->__pyx_tuple[87] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__119, __pyx_mstate_global->__pyx_n_u__120); if (unlikely(!__pyx_mstate_global->__pyx_tuple[87])) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[87]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[87]);
  __pyx_mstate_global->__pyx_tuple[88] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__121, __pyx_mstate_global->__pyx_n_u__122); if (unlikely(!__pyx_mstate_global->__pyx_tuple[88])) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[88]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[88]);
  __pyx_mstate_global->__pyx_tuple[89] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__123, __pyx_mstate_global->__pyx_n_u__124); if (unlikely(!__pyx_mstate_global->__pyx_tuple[89])) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[89]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[89]);

  /* "neologdn.pyx":45
 * KANA = (
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),             # <<<<<<<<<<<<<<
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
*/
  __pyx_mstate_global->__pyx_tuple[90] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__125, __pyx_mstate_global->__pyx_n_u__126); if (unlikely(!__pyx_mstate_global->__pyx_tuple[90])) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[90]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[90]);
  __pyx_mstate_global->__pyx_tuple[91] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__127, __pyx_mstate_global->__pyx_n_u__128); if (unlikely(!__pyx_mstate_global->__pyx_tuple[91])) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[91]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[91]);
  __pyx_mstate_global->__pyx_tuple[92] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__129, __pyx_mstate_global->__pyx_n_u__130); if (unlikely(!__pyx_mstate_global->__pyx_tuple[92])) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[92]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[92]);
  __pyx_mstate_global->__pyx_tuple[93] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__131, __pyx_mstate_global->__pyx_n_u__132); if (unlikely(!__pyx_mstate_global->__pyx_tuple[93])) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[93]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[93]);
  __pyx_mstate_global->__pyx_tuple[94] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__133, __pyx_mstate_global->__pyx_n_u__134); if (unlikely(!__pyx_mstate_global->__pyx_tuple[94])) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[94]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[94]);

  /* "neologdn.pyx":46
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),             # <<<<<<<<<<<<<<
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
*/
  __pyx_mstate_global->__pyx_tuple[95] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__135, __pyx_mstate_global->__pyx_n_u__136); if (unlikely(!__pyx_mstate_global->__pyx_tuple[95])) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[95]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[95]);
  __pyx_mstate_global->__pyx_tuple[96] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__137, __pyx_mstate_global->__pyx_n_u__138); if (unlikely(!__pyx_mstate_global->__pyx_tuple[96])) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[96]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[96]);
  __pyx_mstate_global->__pyx_tuple[97] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__139, __pyx_mstate_global->__pyx_n_u__140); if (unlikely(!__pyx_mstate_global->__pyx_tuple[97])) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[97]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[97]);
  __pyx_mstate_global->__pyx_tuple[98] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__141, __pyx_mstate_global->__pyx_n_u__142); if (unlikely(!__pyx_mstate_global->__pyx_tuple[98])) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[98]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[98]);
  __pyx_mstate_global->__pyx_tuple[99] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__143, __pyx_mstate_global->__pyx_n_u__144); if (unlikely(!__pyx_mstate_global->__pyx_tuple[99])) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[99]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[99]);

  /* "neologdn.pyx":47
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),             # <<<<<<<<<<<<<<
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
*/
  __pyx_mstate_global->__pyx_tuple[100] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__145, __pyx_mstate_global->__pyx_n_u__146); if (unlikely(!__pyx_mstate_global->__pyx_tuple[100])) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[100]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[100]);
  __pyx_mstate_global->__pyx_tuple[101] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__147, __pyx_mstate_global->__pyx_n_u__148); if (unlikely(!__pyx_mstate_global->__pyx_tuple[101])) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[101]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[101]);
  __pyx_mstate_global->__pyx_tuple[102] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__149, __pyx_mstate_global->__pyx_n_u__150); if (unlikely(!__pyx_mstate_global->__pyx_tuple[102])) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[102]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[102]);
  __pyx_mstate_global->__pyx_tuple[103] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__151, __pyx_mstate_global->__pyx_n_u__152); if (unlikely(!__pyx_mstate_global->__pyx_tuple[103])) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[103]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[103]);
  __pyx_mstate_global->__pyx_tuple[104] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__153, __pyx_mstate_global->__pyx_n_u__154); if (unlikely(!__pyx_mstate_global->__pyx_tuple[104])) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[104]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[104]);

  /* "neologdn.pyx":48
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),             # <<<<<<<<<<<<<<
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
*/
  __pyx_mstate_global->__pyx_tuple[105] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__155, __pyx_mstate_global->__pyx_n_u__156); if (unlikely(!__pyx_mstate_global->__pyx_tuple[105])) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[105]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[105]);
  __pyx_mstate_global->__pyx_tuple[106] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__157, __pyx_mstate_global->__pyx_n_u__158); if (unlikely(!__pyx_mstate_global->__pyx_tuple[106])) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[106]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[106]);
  __pyx_mstate_global->__pyx_tuple[107] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__159, __pyx_mstate_global->__pyx_n_u__160); if (unlikely(!__pyx_mstate_global->__pyx_tuple[107])) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[107]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[107]);
  __pyx_mstate_global->__pyx_tuple[108] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__161, __pyx_mstate_global->__pyx_n_u__162); if (unlikely(!__pyx_mstate_global->__pyx_tuple[108])) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[108]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[108]);
  __pyx_mstate_global->__pyx_tuple[109] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__163, __pyx_mstate_global->__pyx_n_u__164); if (unlikely(!__pyx_mstate_global->__pyx_tuple[109])) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[109]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[109]);

  /* "neologdn.pyx":49
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),             # <<<<<<<<<<<<<<
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''),
*/
  __pyx_mstate_global->__pyx_tuple[110] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__165, __pyx_mstate_global->__pyx_n_u__166); if (unlikely(!__pyx_mstate_global->__pyx_tuple[110])) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[110]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[110]);
  __pyx_mstate_global->__pyx_tuple[111] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__167, __pyx_mstate_global->__pyx_n_u__168); if (unlikely(!__pyx_mstate_global->__pyx_tuple[111])) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[111]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[111]);
  __pyx_mstate_global->__pyx_tuple[112] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__169, __pyx_mstate_global->__pyx_n_u__170); if (unlikely(!__pyx_mstate_global->__pyx_tuple[112])) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[112]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[112]);
  __pyx_mstate_global->__pyx_tuple[113] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__171, __pyx_mstate_global->__pyx_n_u__172); if (unlikely(!__pyx_mstate_global->__pyx_tuple[113])) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[113]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[113]);
  __pyx_mstate_global->__pyx_tuple[114] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__173, __pyx_mstate_global->__pyx_n_u__174); if (unlikely(!__pyx_mstate_global->__pyx_tuple[114])) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[114]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[114]);

  /* "neologdn.pyx":50
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),             # <<<<<<<<<<<<<<
 *     ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
*/
  __pyx_mstate_global->__pyx_tuple[115] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__175, __pyx_mstate_global->__pyx_n_u__176); if (unlikely(!__pyx_mstate_global->__pyx_tuple[115])) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[115]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[115]);
  __pyx_mstate_global->__pyx_tuple[116] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__177, __pyx_mstate_global->__pyx_n_u__178); if (unlikely(!__pyx_mstate_global->__pyx_tuple[116])) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[116]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[116]);
  __pyx_mstate_global->__pyx_tuple[117] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__179, __pyx_mstate_global->__pyx_n_u__180); if (unlikely(!__pyx_mstate_global->__pyx_tuple[117])) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[117]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[117]);
  __pyx_mstate_global->__pyx_tuple[118] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__181, __pyx_mstate_global->__pyx_n_u__182); if (unlikely(!__pyx_mstate_global->__pyx_tuple[118])) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[118]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[118]);
  __pyx_mstate_global->__pyx_tuple[119] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__183, __pyx_mstate_global->__pyx_n_u__184); if (unlikely(!__pyx_mstate_global->__pyx_tuple[119])) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[119]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[119]);

  /* "neologdn.pyx":51
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''),             # <<<<<<<<<<<<<<
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''),
*/
  __pyx_mstate_global->__pyx_tuple[120] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__185, __pyx_mstate_global->__pyx_n_u__186); if (unlikely(!__pyx_mstate_global->__pyx_tuple[120])) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[120]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[120]);
  __pyx_mstate_global->__pyx_tuple[121] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__187, __pyx_mstate_global->__pyx_n_u__188); if (unlikely(!__pyx_mstate_global->__pyx_tuple[121])) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[121]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[121]);
  __pyx_mstate_global->__pyx_tuple[122] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__189, __pyx_mstate_global->__pyx_n_u__190); if (unlikely(!__pyx_mstate_global->__pyx_tuple[122])) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[122]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[122]);

  /* "neologdn.pyx":52
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),             # <<<<<<<<<<<<<<
 *     ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
*/
  __pyx_mstate_global->__pyx_tuple[123] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__191, __pyx_mstate_global->__pyx_n_u__192); if (unlikely(!__pyx_mstate_global->__pyx_tuple[123])) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[123]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[123]);
  __pyx_mstate_global->__pyx_tuple[124] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__193, __pyx_mstate_global->__pyx_n_u__194); if (unlikely(!__pyx_mstate_global->__pyx_tuple[124])) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[124]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[124]);
  __pyx_mstate_global->__pyx_tuple[125] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__195, __pyx_mstate_global->__pyx_n_u__196); if (unlikely(!__pyx_mstate_global->__pyx_tuple[125])) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[125]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[125]);
  __pyx_mstate_global->__pyx_tuple[126] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__197, __pyx_mstate_global->__pyx_n_u__198); if (unlikely(!__pyx_mstate_global->__pyx_tuple[126])) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[126]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[126]);
  __pyx_mstate_global->__pyx_tuple[127] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__199, __pyx_mstate_global->__pyx_n_u__200); if (unlikely(!__pyx_mstate_global->__pyx_tuple[127])) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[127]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[127]);

  /* "neologdn.pyx":53
 *     ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''),             # <<<<<<<<<<<<<<
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''),
*/
  __pyx_mstate_global->__pyx_tuple[128] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__201, __pyx_mstate_global->__pyx_n_u__202); if (unlikely(!__pyx_mstate_global->__pyx_tuple[128])) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[128]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[128]);
  __pyx_mstate_global->__pyx_tuple[129] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__203, __pyx_mstate_global->__pyx_n_u__204); if (unlikely(!__pyx_mstate_global->__pyx_tuple[129])) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[129]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[129]);
  __pyx_mstate_global->__pyx_tuple[130] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__205, __pyx_mstate_global->__pyx_n_u__206); if (unlikely(!__pyx_mstate_global->__pyx_tuple[130])) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[130]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[130]);

  /* "neologdn.pyx":54
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),             # <<<<<<<<<<<<<<
 *     ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
*/
  __pyx_mstate_global->__pyx_tuple[131] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__207, __pyx_mstate_global->__pyx_n_u__208); if (unlikely(!__pyx_mstate_global->__pyx_tuple[131])) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[131]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[131]);
  __pyx_mstate_global->__pyx_tuple[132] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__209, __pyx_mstate_global->__pyx_n_u__210); if (unlikely(!__pyx_mstate_global->__pyx_tuple[132])) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[132]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[132]);
  __pyx_mstate_global->__pyx_tuple[133] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__211, __pyx_mstate_global->__pyx_n_u__212); if (unlikely(!__pyx_mstate_global->__pyx_tuple[133])) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[133]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[133]);
  __pyx_mstate_global->__pyx_tuple[134] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__213, __pyx_mstate_global->__pyx_n_u__214); if (unlikely(!__pyx_mstate_global->__pyx_tuple[134])) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[134]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[134]);
  __pyx_mstate_global->__pyx_tuple[135] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__215, __pyx_mstate_global->__pyx_n_u__216); if (unlikely(!__pyx_mstate_global->__pyx_tuple[135])) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[135]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[135]);

  /* "neologdn.pyx":55
 *     ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''),             # <<<<<<<<<<<<<<
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', '')
*/
  __pyx_mstate_global->__pyx_tuple[136] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__217, __pyx_mstate_global->__pyx_n_u__218); if (unlikely(!__pyx_mstate_global->__pyx_tuple[136])) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[136]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[136]);
  __pyx_mstate_global->__pyx_tuple[137] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__219, __pyx_mstate_global->__pyx_n_u__220); if (unlikely(!__pyx_mstate_global->__pyx_tuple[137])) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[137]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[137]);
  __pyx_mstate_global->__pyx_tuple[138] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__221, __pyx_mstate_global->__pyx_n_u__222); if (unlikely(!__pyx_mstate_global->__pyx_tuple[138])) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[138]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[138]);
  __pyx_mstate_global->__pyx_tuple[139] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__223, __pyx_mstate_global->__pyx_n_u__224); if (unlikely(!__pyx_mstate_global->__pyx_tuple[139])) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[139]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[139]);

  /* "neologdn.pyx":56
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),             # <<<<<<<<<<<<<<
 *     ('', ''), ('', ''), ('', '')
 * )
*/
  __pyx_mstate_global->__pyx_tuple[140] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_kp_u__225, __pyx_mstate_global->__pyx_kp_u__226); if (unlikely(!__pyx_mstate_global->__pyx_tuple[140])) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[140]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[140]);
  __pyx_mstate_global->__pyx_tuple[141] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_kp_u__227, __pyx_mstate_global->__pyx_kp_u__228); if (unlikely(!__pyx_mstate_global->__pyx_tuple[141])) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[141]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[141]);
  __pyx_mstate_global->__pyx_tuple[142] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_kp_u__229, __pyx_mstate_global->__pyx_kp_u__230); if (unlikely(!__pyx_mstate_global->__pyx_tuple[142])) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[142]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[142]);
  __pyx_mstate_global->__pyx_tuple[143] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_kp_u__231, __pyx_mstate_global->__pyx_n_u__232); if (unlikely(!__pyx_mstate_global->__pyx_tuple[143])) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[143]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[143]);
  __pyx_mstate_global->__pyx_tuple[144] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_kp_u__233, __pyx_mstate_global->__pyx_n_u__234); if (unlikely(!__pyx_mstate_global->__pyx_tuple[144])) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[144]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[144]);

  /* "neologdn.pyx":57
 *     ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', '')             # <<<<<<<<<<<<<<
 * )
 * DIGIT = (
*/
  __pyx_mstate_global->__pyx_tuple[145] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_kp_u__235, __pyx_mstate_global->__pyx_kp_u__236); if (unlikely(!__pyx_mstate_global->__pyx_tuple[145])) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[145]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[145]);
  __pyx_mstate_global->__pyx_tuple[146] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_kp_u__237, __pyx_mstate_global->__pyx_kp_u__238); if (unlikely(!__pyx_mstate_global->__pyx_tuple[146])) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[146]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[146]);
  __pyx_mstate_global->__pyx_tuple[147] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__239, __pyx_mstate_global->__pyx_n_u__240); if (unlikely(!__pyx_mstate_global->__pyx_tuple[147])) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[147]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[147]);

  /* "neologdn.pyx":44
 * )
 * KANA = (
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),             # <<<<<<<<<<<<<<
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
*/
  __pyx_mstate_global->__pyx_tuple[148] = PyTuple_Pack(63, __pyx_mstate_global->__pyx_tuple[85], __pyx_mstate_global->__pyx_tuple[86], __pyx_mstate_global->__pyx_tuple[87], __pyx_mstate_global->__pyx_tuple[88], __pyx_mstate_global->__pyx_tuple[89], __pyx_mstate_global->__pyx_tuple[90], __pyx_mstate_global->__pyx_tuple[91], __pyx_mstate_global->__pyx_tuple[92], __pyx_mstate_global->__pyx_tuple[93], __pyx_mstate_global->__pyx_tuple[94], __pyx_mstate_global->__pyx_tuple[95], __pyx_mstate_global->__pyx_tuple[96], __pyx_mstate_global->__pyx_tuple[97], __pyx_mstate_global->__pyx_tuple[98], __pyx_mstate_global->__pyx_tuple[99], __pyx_mstate_global->__pyx_tuple[100], __pyx_mstate_global->__pyx_tuple[101], __pyx_mstate_global->__pyx_tuple[102], __pyx_mstate_global->__pyx_tuple[103], __pyx_mstate_global->__pyx_tuple[104], __pyx_mstate_global->__pyx_tuple[105], __pyx_mstate_global->__pyx_tuple[106], __pyx_mstate_global->__pyx_tuple[107], __pyx_mstate_global->__pyx_tuple[108], __pyx_mstate_global->__pyx_tuple[109], __pyx_mstate_global->__pyx_tuple[110], __pyx_mstate_global->__pyx_tuple[111], __pyx_mstate_global->__pyx_tuple[112], __pyx_mstate_global->__pyx_tuple[113], __pyx_mstate_global->__pyx_tuple[114], __pyx_mstate_global->__pyx_tuple[115], __pyx_mstate_global->__pyx_tuple[116], __pyx_mstate_global->__pyx_tuple[117], __pyx_mstate_global->__pyx_tuple[118], __pyx_mstate_global->__pyx_tuple[119], __pyx_mstate_global->__pyx_tuple[120], __pyx_mstate_global->__pyx_tuple[121], __pyx_mstate_global->__pyx_tuple[122], __pyx_mstate_global->__pyx_tuple[123], __pyx_mstate_global->__pyx_tuple[124], __pyx_mstate_global->__pyx_tuple[125], __pyx_mstate_global->__pyx_tuple[126], __pyx_mstate_global->__pyx_tuple[127], __pyx_mstate_global->__pyx_tuple[128], __pyx_mstate_global->__pyx_tuple[129], __pyx_mstate_global->__pyx_tuple[130], __pyx_mstate_global->__pyx_tuple[131], __pyx_mstate_global->__pyx_tuple[132], __pyx_mstate_global->__pyx_tuple[133], __pyx_mstate_global->__pyx_tuple[134], __pyx_mstate_global->__pyx_tuple[135], __pyx_mstate_global->__pyx_tuple[136], __pyx_mstate_global->__pyx_tuple[137], __pyx_mstate_global->__pyx_tuple[138], __pyx_mstate_global->__pyx_tuple[139], __pyx_mstate_global->__pyx_tuple[140], __pyx_mstate_global->__pyx_tuple[141], __pyx_mstate_global->__pyx_tuple[142], __pyx_mstate_global->__pyx_tuple[143], __pyx_mstate_global->__pyx_tuple[144], __pyx_mstate_global->__pyx_tuple[145], __pyx_mstate_global->__pyx_tuple[146], __pyx_mstate_global->__pyx_tuple[147]); if (unlikely(!__pyx_mstate_global->__pyx_tuple[148])) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[148]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[148]);

  /* "neologdn.pyx":60
 * )
 * DIGIT = (
 *     ('', '0'), ('', '1'), ('', '2'), ('', '3'), ('', '4'),             # <<<<<<<<<<<<<<
 *     ('', '5'), ('', '6'), ('', '7'), ('', '8'), ('', '9')
 * )
*/
  __pyx_mstate_global->__pyx_tuple[149] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__241, __pyx_mstate_global->__pyx_kp_u_0); if (unlikely(!__pyx_mstate_global->__pyx_tuple[149])) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[149]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[149]);
  __pyx_mstate_global->__pyx_tuple[150] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__242, __pyx_mstate_global->__pyx_kp_u_1); if (unlikely(!__pyx_mstate_global->__pyx_tuple[150])) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[150]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[150]);
  __pyx_mstate_global->__pyx_tuple[151] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__243, __pyx_mstate_global->__pyx_kp_u_2); if (unlikely(!__pyx_mstate_global->__pyx_tuple[151])) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[151]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[151]);
  __pyx_mstate_global->__pyx_tuple[152] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__244, __pyx_mstate_global->__pyx_kp_u_3); if (unlikely(!__pyx_mstate_global->__pyx_tuple[152])) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[152]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[152]);
  __pyx_mstate_global->__pyx_tuple[153] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__245, __pyx_mstate_global->__pyx_kp_u_4); if (unlikely(!__pyx_mstate_global->__pyx_tuple[153])) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[153]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[153]);

  /* "neologdn.pyx":61
 * DIGIT = (
 *     ('', '0'), ('', '1'), ('', '2'), ('', '3'), ('', '4'),
 *     ('', '5'), ('', '6'), ('', '7'), ('', '8'), ('', '9')             # <<<<<<<<<<<<<<
 * )
 * KANA_TEN = (
*/
  __pyx_mstate_global->__pyx_tuple[154] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__246, __pyx_mstate_global->__pyx_kp_u_5); if (unlikely(!__pyx_mstate_global->__pyx_tuple[154])) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[154]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[154]);
  __pyx_mstate_global->__pyx_tuple[155] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__247, __pyx_mstate_global->__pyx_kp_u_6); if (unlikely(!__pyx_mstate_global->__pyx_tuple[155])) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[155]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[155]);
  __pyx_mstate_global->__pyx_tuple[156] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__248, __pyx_mstate_global->__pyx_kp_u_7); if (unlikely(!__pyx_mstate_global->__pyx_tuple[156])) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[156]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[156]);
  __pyx_mstate_global->__pyx_tuple[157] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__249, __pyx_mstate_global->__pyx_kp_u_8); if (unlikely(!__pyx_mstate_global->__pyx_tuple[157])) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[157]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[157]);
  __pyx_mstate_global->__pyx_tuple[158] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__250, __pyx_mstate_global->__pyx_kp_u_9); if (unlikely(!__pyx_mstate_global->__pyx_tuple[158])) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[158]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[158]);

  /* "neologdn.pyx":60
 * )
 * DIGIT = (
 *     ('', '0'), ('', '1'), ('', '2'), ('', '3'), ('', '4'),             # <<<<<<<<<<<<<<
 *     ('', '5'), ('', '6'), ('', '7'), ('', '8'), ('', '9')
 * )
*/
  __pyx_mstate_global->__pyx_tuple[159] = PyTuple_Pack(10, __pyx_mstate_global->__pyx_tuple[149], __pyx_mstate_global->__pyx_tuple[150], __pyx_mstate_global->__pyx_tuple[151], __pyx_mstate_global->__pyx_tuple[152], __pyx_mstate_global->__pyx_tuple[153], __pyx_mstate_global->__pyx_tuple[154], __pyx_mstate_global->__pyx_tuple[155], __pyx_mstate_global->__pyx_tuple[156], __pyx_mstate_global->__pyx_tuple[157], __pyx_mstate_global->__pyx_tuple[158]); if (unlikely(!__pyx_mstate_global->__pyx_tuple[159])) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[159]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[159]);

  /* "neologdn.pyx":64
 * )
 * KANA_TEN = (
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),             # <<<<<<<<<<<<<<
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
*/
  __pyx_mstate_global->__pyx_tuple[160] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__126, __pyx_mstate_global->__pyx_n_u__251); if (unlikely(!__pyx_mstate_global->__pyx_tuple[160])) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[160]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[160]);
  __pyx_mstate_global->__pyx_tuple[161] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__128, __pyx_mstate_global->__pyx_n_u__252); if (unlikely(!__pyx_mstate_global->__pyx_tuple[161])) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[161]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[161]);
  __pyx_mstate_global->__pyx_tuple[162] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__130, __pyx_mstate_global->__pyx_n_u__253); if (unlikely(!__pyx_mstate_global->__pyx_tuple[162])) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[162]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[162]);
  __pyx_mstate_global->__pyx_tuple[163] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__132, __pyx_mstate_global->__pyx_n_u__254); if (unlikely(!__pyx_mstate_global->__pyx_tuple[163])) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[163]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[163]);
  __pyx_mstate_global->__pyx_tuple[164] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__134, __pyx_mstate_global->__pyx_n_u__255); if (unlikely(!__pyx_mstate_global->__pyx_tuple[164])) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[164]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[164]);

  /* "neologdn.pyx":65
 * KANA_TEN = (
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),             # <<<<<<<<<<<<<<
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
*/
  __pyx_mstate_global->__pyx_tuple[165] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__136, __pyx_mstate_global->__pyx_n_u__256); if (unlikely(!__pyx_mstate_global->__pyx_tuple[165])) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[165]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[165]);
  __pyx_mstate_global->__pyx_tuple[166] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__138, __pyx_mstate_global->__pyx_n_u__257); if (unlikely(!__pyx_mstate_global->__pyx_tuple[166])) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[166]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[166]);
  __pyx_mstate_global->__pyx_tuple[167] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__140, __pyx_mstate_global->__pyx_n_u__258); if (unlikely(!__pyx_mstate_global->__pyx_tuple[167])) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[167]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[167]);
  __pyx_mstate_global->__pyx_tuple[168] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__142, __pyx_mstate_global->__pyx_n_u__259); if (unlikely(!__pyx_mstate_global->__pyx_tuple[168])) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[168]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[168]);
  __pyx_mstate_global->__pyx_tuple[169] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__144, __pyx_mstate_global->__pyx_n_u__260); if (unlikely(!__pyx_mstate_global->__pyx_tuple[169])) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[169]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[169]);

  /* "neologdn.pyx":66
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),             # <<<<<<<<<<<<<<
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', '')
*/
  __pyx_mstate_global->__pyx_tuple[170] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__146, __pyx_mstate_global->__pyx_n_u__261); if (unlikely(!__pyx_mstate_global->__pyx_tuple[170])) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[170]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[170]);
  __pyx_mstate_global->__pyx_tuple[171] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__148, __pyx_mstate_global->__pyx_n_u__262); if (unlikely(!__pyx_mstate_global->__pyx_tuple[171])) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[171]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[171]);
  __pyx_mstate_global->__pyx_tuple[172] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__150, __pyx_mstate_global->__pyx_n_u__263); if (unlikely(!__pyx_mstate_global->__pyx_tuple[172])) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[172]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[172]);
  __pyx_mstate_global->__pyx_tuple[173] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__152, __pyx_mstate_global->__pyx_n_u__264); if (unlikely(!__pyx_mstate_global->__pyx_tuple[173])) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[173]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[173]);
  __pyx_mstate_global->__pyx_tuple[174] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__154, __pyx_mstate_global->__pyx_n_u__265); if (unlikely(!__pyx_mstate_global->__pyx_tuple[174])) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[174]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[174]);

  /* "neologdn.pyx":67
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),             # <<<<<<<<<<<<<<
 *     ('', ''), ('', '')
 * )
*/
  __pyx_mstate_global->__pyx_tuple[175] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__166, __pyx_mstate_global->__pyx_n_u__266); if (unlikely(!__pyx_mstate_global->__pyx_tuple[175])) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[175]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[175]);
  __pyx_mstate_global->__pyx_tuple[176] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__168, __pyx_mstate_global->__pyx_n_u__267); if (unlikely(!__pyx_mstate_global->__pyx_tuple[176])) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[176]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[176]);
  __pyx_mstate_global->__pyx_tuple[177] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__170, __pyx_mstate_global->__pyx_n_u__268); if (unlikely(!__pyx_mstate_global->__pyx_tuple[177])) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[177]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[177]);
  __pyx_mstate_global->__pyx_tuple[178] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__172, __pyx_mstate_global->__pyx_n_u__269); if (unlikely(!__pyx_mstate_global->__pyx_tuple[178])) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[178]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[178]);
  __pyx_mstate_global->__pyx_tuple[179] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__174, __pyx_mstate_global->__pyx_n_u__270); if (unlikely(!__pyx_mstate_global->__pyx_tuple[179])) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[179]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[179]);

  /* "neologdn.pyx":68
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', '')             # <<<<<<<<<<<<<<
 * )
 * KANA_MARU = (
*/
  __pyx_mstate_global->__pyx_tuple[180] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__120, __pyx_mstate_global->__pyx_n_u__271); if (unlikely(!__pyx_mstate_global->__pyx_tuple[180])) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[180]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[180]);
  __pyx_mstate_global->__pyx_tuple[181] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__272, __pyx_mstate_global->__pyx_n_u__273); if (unlikely(!__pyx_mstate_global->__pyx_tuple[181])) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[181]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[181]);

  /* "neologdn.pyx":64
 * )
 * KANA_TEN = (
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),             # <<<<<<<<<<<<<<
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
*/
  __pyx_mstate_global->__pyx_tuple[182] = PyTuple_Pack(22, __pyx_mstate_global->__pyx_tuple[160], __pyx_mstate_global->__pyx_tuple[161], __pyx_mstate_global->__pyx_tuple[162], __pyx_mstate_global->__pyx_tuple[163], __pyx_mstate_global->__pyx_tuple[164], __pyx_mstate_global->__pyx_tuple[165], __pyx_mstate_global->__pyx_tuple[166], __pyx_mstate_global->__pyx_tuple[167], __pyx_mstate_global->__pyx_tuple[168], __pyx_mstate_global->__pyx_tuple[169], __pyx_mstate_global->__pyx_tuple[170], __pyx_mstate_global->__pyx_tuple[171], __pyx_mstate_global->__pyx_tuple[172], __pyx_mstate_global->__pyx_tuple[173], __pyx_mstate_global->__pyx_tuple[174], __pyx_mstate_global->__pyx_tuple[175], __pyx_mstate_global->__pyx_tuple[176], __pyx_mstate_global->__pyx_tuple[177], __pyx_mstate_global->__pyx_tuple[178], __pyx_mstate_global->__pyx_tuple[179], __pyx_mstate_global->__pyx_tuple[180], __pyx_mstate_global->__pyx_tuple[181]); if (unlikely(!__pyx_mstate_global->__pyx_tuple[182])) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[182]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[182]);

  /* "neologdn.pyx":71
 * )
 * KANA_MARU = (
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),             # <<<<<<<<<<<<<<
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', '')
 * )
*/
  __pyx_mstate_global->__pyx_tuple[183] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__166, __pyx_mstate_global->__pyx_n_u__274); if (unlikely(!__pyx_mstate_global->__pyx_tuple[183])) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[183]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[183]);
  __pyx_mstate_global->__pyx_tuple[184] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__168, __pyx_mstate_global->__pyx_n_u__275); if (unlikely(!__pyx_mstate_global->__pyx_tuple[184])) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[184]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[184]);
  __pyx_mstate_global->__pyx_tuple[185] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__170, __pyx_mstate_global->__pyx_n_u__276); if (unlikely(!__pyx_mstate_global->__pyx_tuple[185])) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[185]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[185]);
  __pyx_mstate_global->__pyx_tuple[186] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__172, __pyx_mstate_global->__pyx_n_u__277); if (unlikely(!__pyx_mstate_global->__pyx_tuple[186])) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[186]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[186]);
  __pyx_mstate_global->__pyx_tuple[187] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__174, __pyx_mstate_global->__pyx_n_u__278); if (unlikely(!__pyx_mstate_global->__pyx_tuple[187])) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[187]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[187]);

  /* "neologdn.pyx":72
 * KANA_MARU = (
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', '')             # <<<<<<<<<<<<<<
 * )
 * 
*/
  __pyx_mstate_global->__pyx_tuple[188] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__279, __pyx_mstate_global->__pyx_n_u__280); if (unlikely(!__pyx_mstate_global->__pyx_tuple[188])) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[188]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[188]);
  __pyx_mstate_global->__pyx_tuple[189] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__281, __pyx_mstate_global->__pyx_n_u__282); if (unlikely(!__pyx_mstate_global->__pyx_tuple[189])) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[189]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[189]);
  __pyx_mstate_global->__pyx_tuple[190] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__283, __pyx_mstate_global->__pyx_n_u__284); if (unlikely(!__pyx_mstate_global->__pyx_tuple[190])) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[190]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[190]);
  __pyx_mstate_global->__pyx_tuple[191] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__285, __pyx_mstate_global->__pyx_n_u__286); if (unlikely(!__pyx_mstate_global->__pyx_tuple[191])) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[191]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[191]);
  __pyx_mstate_global->__pyx_tuple[192] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u__287, __pyx_mstate_global->__pyx_n_u__288); if (unlikely(!__pyx_mstate_global->__pyx_tuple[192])) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[192]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[192]);

  /* "neologdn.pyx":71
 * )
 * KANA_MARU = (
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),             # <<<<<<<<<<<<<<
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', '')
 * )
*/
  __pyx_mstate_global->__pyx_tuple[193] = PyTuple_Pack(10, __pyx_mstate_global->__pyx_tuple[183], __pyx_mstate_global->__pyx_tuple[184], __pyx_mstate_global->__pyx_tuple[185], __pyx_mstate_global->__pyx_tuple[186], __pyx_mstate_global->__pyx_tuple[187], __pyx_mstate_global->__pyx_tuple[188], __pyx_mstate_global->__pyx_tuple[189], __pyx_mstate_global->__pyx_tuple[190], __pyx_mstate_global->__pyx_tuple[191], __pyx_mstate_global->__pyx_tuple[192]); if (unlikely(!__pyx_mstate_global->__pyx_tuple[193])) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[193]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[193]);

  /* "neologdn.pyx":75
 * )
 * 
 * HIPHENS = ('', '', '', '', '', '', '', '', '', '')             # <<<<<<<<<<<<<<
 * CHOONPUS = ('', '', '', '', '', '', '', '')
 * TILDES = ('~', '', '', '', '', '')
*/
  __pyx_mstate_global->__pyx_tuple[194] = PyTuple_Pack(10, __pyx_mstate_global->__pyx_kp_u__289, __pyx_mstate_global->__pyx_kp_u__290, __pyx_mstate_global->__pyx_kp_u__291, __pyx_mstate_global->__pyx_kp_u__292, __pyx_mstate_global->__pyx_kp_u__293, __pyx_mstate_global->__pyx_kp_u__294, __pyx_mstate_global->__pyx_kp_u__295, __pyx_mstate_global->__pyx_kp_u__296, __pyx_mstate_global->__pyx_kp_u__297, __pyx_mstate_global->__pyx_kp_u__78); if (unlikely(!__pyx_mstate_global->__pyx_tuple[194])) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[194]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[194]);

  /* "neologdn.pyx":76
 * 
 * HIPHENS = ('', '', '', '', '', '', '', '', '', '')
 * CHOONPUS = ('', '', '', '', '', '', '', '')             # <<<<<<<<<<<<<<
 * TILDES = ('~', '', '', '', '', '')
 * 
*/
  __pyx_mstate_global->__pyx_tuple[195] = PyTuple_Pack(8, __pyx_mstate_global->__pyx_kp_u__298, __pyx_mstate_global->__pyx_kp_u__299, __pyx_mstate_global->__pyx_n_u__239, __pyx_mstate_global->__pyx_kp_u__300, __pyx_mstate_global->__pyx_kp_u__301, __pyx_mstate_global->__pyx_kp_u__302, __pyx_mstate_global->__pyx_kp_u__303, __pyx_mstate_global->__pyx_n_u__240); if (unlikely(!__pyx_mstate_global->__pyx_tuple[195])) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[195]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[195]);

  /* "neologdn.pyx":77
 * HIPHENS = ('', '', '', '', '', '', '', '', '', '')
 * CHOONPUS = ('', '', '', '', '', '', '', '')
 * TILDES = ('~', '', '', '', '', '')             # <<<<<<<<<<<<<<
 * 
 * SPACE = (' ', '')
*/
  __pyx_mstate_global->__pyx_tuple[196] = PyTuple_Pack(6, __pyx_mstate_global->__pyx_kp_u__304, __pyx_mstate_global->__pyx_kp_u__305, __pyx_mstate_global->__pyx_kp_u__306, __pyx_mstate_global->__pyx_kp_u__307, __pyx_mstate_global->__pyx_kp_u__308, __pyx_mstate_global->__pyx_kp_u__309); if (unlikely(!__pyx_mstate_global->__pyx_tuple[196])) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[196]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[196]);

  /* "neologdn.pyx":79
 * TILDES = ('~', '', '', '', '', '')
 * 
 * SPACE = (' ', '')             # <<<<<<<<<<<<<<
 * 
 * cdef unordered_map[Py_UCS4, Py_UCS4] conversion_map, kana_ten_map, kana_maru_map
*/
  __pyx_mstate_global->__pyx_tuple[197] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_kp_u__310, __pyx_mstate_global->__pyx_kp_u__311); if (unlikely(!__pyx_mstate_global->__pyx_tuple[197])) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[197]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[197]);

  /* "neologdn.pyx":94
 * 
 * char_codes = itertools.chain(
 *     range(19968, 40960),  # CJK UNIFIED IDEOGRAPHS             # <<<<<<<<<<<<<<
 *     range(12352, 12448),  # HIRAGANA
 *     range(12448, 12544),  # KATAKANA
*/
  __pyx_mstate_global->__pyx_tuple[198] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_int_19968, __pyx_mstate_global->__pyx_int_40960); if (unlikely(!__pyx_mstate_global->__pyx_tuple[198])) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[198]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[198]);

  /* "neologdn.pyx":95
 * char_codes = itertools.chain(
 *     range(19968, 40960),  # CJK UNIFIED IDEOGRAPHS
 *     range(12352, 12448),  # HIRAGANA             # <<<<<<<<<<<<<<
 *     range(12448, 12544),  # KATAKANA
 *     range(12289, 12352),  # CJK SYMBOLS AND PUNCTUATION
*/
  __pyx_mstate_global->__pyx_tuple[199] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_int_12352, __pyx_mstate_global->__pyx_int_12448); if (unlikely(!__pyx_mstate_global->__pyx_tuple[199])) __PYX_ERR(0, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[199]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[199]);

  /* "neologdn.pyx":96
 *     range(19968, 40960),  # CJK UNIFIED IDEOGRAPHS
 *     range(12352, 12448),  # HIRAGANA
 *     range(12448, 12544),  # KATAKANA             # <<<<<<<<<<<<<<
 *     range(12289, 12352),  # CJK SYMBOLS AND PUNCTUATION
 *     range(65280, 65520)   # HALFWIDTH AND FULLWIDTH FORMS
*/
  __pyx_mstate_global->__pyx_tuple[200] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_int_12448, __pyx_mstate_global->__pyx_int_12544); if (unlikely(!__pyx_mstate_global->__pyx_tuple[200])) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[200]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[200]);

  /* "neologdn.pyx":97
 *     range(12352, 12448),  # HIRAGANA
 *     range(12448, 12544),  # KATAKANA
 *     range(12289, 12352),  # CJK SYMBOLS AND PUNCTUATION             # <<<<<<<<<<<<<<
 *     range(65280, 65520)   # HALFWIDTH AND FULLWIDTH FORMS
 * )
*/
  __pyx_mstate_global->__pyx_tuple[201] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_int_12289, __pyx_mstate_global->__pyx_int_12352); if (unlikely(!__pyx_mstate_global->__pyx_tuple[201])) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[201]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[201]);

  /* "neologdn.pyx":98
 *     range(12448, 12544),  # KATAKANA
 *     range(12289, 12352),  # CJK SYMBOLS AND PUNCTUATION
 *     range(65280, 65520)   # HALFWIDTH AND FULLWIDTH FORMS             # <<<<<<<<<<<<<<
 * )
 * for c in map(chr, char_codes):
*/
  __pyx_mstate_global->__pyx_tuple[202] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_int_65280, __pyx_mstate_global->__pyx_int_65520); if (unlikely(!__pyx_mstate_global->__pyx_tuple[202])) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[202]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[202]);

  /* "neologdn.pyx":104
 * 
 * 
 * for c in map(chr, range(128)):             # <<<<<<<<<<<<<<
 *     basic_latin.insert(c)
 * 
*/
  __pyx_mstate_global->__pyx_tuple[203] = PyTuple_Pack(1, __pyx_mstate_global->__pyx_int_128); if (unlikely(!__pyx_mstate_global->__pyx_tuple[203])) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[203]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[203]);

  /* "neologdn.pyx":110
 * 
 * 
 * cpdef unicode shorten_repeat(unicode text, int repeat_threshould, int max_repeat_substr_length=8):             # <<<<<<<<<<<<<<
 *     cdef int text_length, i, repeat_length, right_start, right_end, num_repeat_substrs
 *     cdef int upper_repeat_substr_length
*/
  __pyx_mstate_global->__pyx_tuple[204] = PyTuple_Pack(1, __pyx_mstate_global->__pyx_int_8); if (unlikely(!__pyx_mstate_global->__pyx_tuple[204])) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[204]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[204]);

  /* "neologdn.pyx":140
 * 
 * 
 * cpdef unicode normalize(unicode text, int repeat=0, bint remove_space=True,             # <<<<<<<<<<<<<<
 *                         int max_repeat_substr_length=8, unicode tilde='remove'):
 *     cdef Py_UCS4 *buf = <Py_UCS4 *>malloc(sizeof(Py_UCS4) * (len(text) + 1))
*/
  __pyx_mstate_global->__pyx_tuple[205] = PyTuple_Pack(4, __pyx_mstate_global->__pyx_int_0, Py_True, __pyx_mstate_global->__pyx_int_8, __pyx_mstate_global->__pyx_n_u_remove); if (unlikely(!__pyx_mstate_global->__pyx_tuple[205])) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[205]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[205]);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}
/* #### Code section: init_constants ### */

static int __Pyx_InitConstants(__pyx_mstatetype *__pyx_mstate) {
  CYTHON_UNUSED_VAR(__pyx_mstate);
  if (__Pyx_InitStrings(__pyx_string_tab, __pyx_mstate->__pyx_string_tab, __pyx_string_tab_encodings) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_mstate->__pyx_int_0 = PyLong_FromLong(0); if (unlikely(!__pyx_mstate->__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_int_4 = PyLong_FromLong(4); if (unlikely(!__pyx_mstate->__pyx_int_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_int_5 = PyLong_FromLong(5); if (unlikely(!__pyx_mstate->__pyx_int_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_int_8 = PyLong_FromLong(8); if (unlikely(!__pyx_mstate->__pyx_int_8)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_int_128 = PyLong_FromLong(128); if (unlikely(!__pyx_mstate->__pyx_int_128)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_int_12289 = PyLong_FromLong(12289L); if (unlikely(!__pyx_mstate->__pyx_int_12289)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_int_12352 = PyLong_FromLong(12352L); if (unlikely(!__pyx_mstate->__pyx_int_12352)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_int_12448 = PyLong_FromLong(12448L); if (unlikely(!__pyx_mstate->__pyx_int_12448)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_int_12544 = PyLong_FromLong(12544L); if (unlikely(!__pyx_mstate->__pyx_int_12544)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_int_19968 = PyLong_FromLong(19968L); if (unlikely(!__pyx_mstate->__pyx_int_19968)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_int_40960 = PyLong_FromLong(40960L); if (unlikely(!__pyx_mstate->__pyx_int_40960)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_int_65280 = PyLong_FromLong(65280L); if (unlikely(!__pyx_mstate->__pyx_int_65280)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_int_65520 = PyLong_FromLong(65520L); if (unlikely(!__pyx_mstate->__pyx_int_65520)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_codeobjects ### */
\
        typedef struct {
            unsigned int argcount : 3;
            unsigned int num_posonly_args : 1;
            unsigned int num_kwonly_args : 1;
            unsigned int nlocals : 3;
            unsigned int flags : 10;
            unsigned int first_line : 8;
            unsigned int line_table_length : 14;
        } __Pyx_PyCode_New_function_description;
/* NewCodeObj.proto */
static PyObject* __Pyx_PyCode_New(
        __Pyx_PyCode_New_function_description descr,
        PyObject **varnames,
        PyObject *filename,
        PyObject *funcname,
        const char *line_table,
        PyObject *tuple_dedup_map
);


static int __Pyx_CreateCodeObjects(__pyx_mstatetype *__pyx_mstate) {
  PyObject* tuple_dedup_map = PyDict_New();
  if (unlikely(!tuple_dedup_map)) return -1;
  {
    __Pyx_PyCode_New_function_description descr = {3, 0, 0, 3, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 110, 235};
    PyObject* varnames[] = {__pyx_mstate->__pyx_n_u_text, __pyx_mstate->__pyx_n_u_repeat_threshould, __pyx_mstate->__pyx_n_u_max_repeat_substr_length};
    __pyx_mstate_global->__pyx_codeobj_tab[0] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_neologdn_pyx, __pyx_mstate->__pyx_n_u_shorten_repeat, __pyx_k_Bc_c_l_Cs_D_A_1_B_A_U_3a_T_A, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[0])) goto bad;
  }
  {
    __Pyx_PyCode_New_function_description descr = {5, 0, 0, 5, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 140, 501};
    PyObject* varnames[] = {__pyx_mstate->__pyx_n_u_text, __pyx_mstate->__pyx_n_u_repeat, __pyx_mstate->__pyx_n_u_remove_space, __pyx_mstate->__pyx_n_u_max_repeat_substr_length, __pyx_mstate->__pyx_n_u_tilde};
    __pyx_mstate_global->__pyx_codeobj_tab[1] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_neologdn_pyx, __pyx_mstate->__pyx_n_u_normalize, __pyx_k_11Fa5Fa_6_S_r_1_1_Q_Q_2S_S_CvV1, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[1])) goto bad;
  }
  Py_DECREF(tuple_dedup_map);
  return 0;
  bad:
  Py_DECREF(tuple_dedup_map);
  return -1;
}
/* #### Code section: init_globals ### */

static int __Pyx_InitGlobals(void) {
  /* CachedMethodType.init */
  #if CYTHON_COMPILING_IN_LIMITED_API
{
    PyObject *typesModule=NULL;
    typesModule = PyImport_ImportModule("types");
    if (typesModule) {
        __pyx_mstate_global->__Pyx_CachedMethodType = PyObject_GetAttrString(typesModule, "MethodType");
        Py_DECREF(typesModule);
    }
} // error handling follows
#endif

if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L1_error)

  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: cleanup_globals ### */
/* #### Code section: cleanup_module ### */
/* #### Code section: main_method ### */
/* #### Code section: utility_code_pragmas ### */
#ifdef _MSC_VER
#pragma warning( push )
/* Warning 4127: conditional expression is constant
 * Cython uses constant conditional expressions to allow in inline functions to be optimized at
 * compile-time, so this warning is not useful
 */
#pragma warning( disable : 4127 )
#endif



/* #### Code section: utility_code_def ### */

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    int result;
    PyObject *exc_type;
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *current_exception = tstate->current_exception;
    if (unlikely(!current_exception)) return 0;
    exc_type = (PyObject*) Py_TYPE(current_exception);
    if (exc_type == err) return 1;
#else
    exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
#endif
    #if CYTHON_AVOID_BORROWED_REFS
    Py_INCREF(exc_type);
    #endif
    if (unlikely(PyTuple_Check(err))) {
        result = __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    } else {
        result = __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
    }
    #if CYTHON_AVOID_BORROWED_REFS
    Py_DECREF(exc_type);
    #endif
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *tmp_value;
    assert(type == NULL || (value != NULL && type == (PyObject*) Py_TYPE(value)));
    if (value) {
        #if CYTHON_COMPILING_IN_CPYTHON
        if (unlikely(((PyBaseExceptionObject*) value)->traceback != tb))
        #endif
            PyException_SetTraceback(value, tb);
    }
    tmp_value = tstate->current_exception;
    tstate->current_exception = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
#else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject* exc_value;
    exc_value = tstate->current_exception;
    tstate->current_exception = 0;
    *value = exc_value;
    *type = NULL;
    *tb = NULL;
    if (exc_value) {
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        #if CYTHON_COMPILING_IN_CPYTHON
        *tb = ((PyBaseExceptionObject*) exc_value)->traceback;
        Py_XINCREF(*tb);
        #else
        *tb = PyException_GetTraceback(exc_value);
        #endif
    }
#else
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#endif
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
#if __PYX_LIMITED_VERSION_HEX < 0x030d00A1
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
    (void) PyObject_GetOptionalAttr(obj, attr_name, &result);
    return result;
#else
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
#endif
}

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStrNoError(__pyx_mstate_global->__pyx_b, name);
    if (unlikely(!result) && !PyErr_Occurred()) {
        PyErr_Format(PyExc_NameError,
            "name '%U' is not defined", name);
    }
    return result;
}

/* DivInt[long] */
static CYTHON_INLINE long __Pyx_div_long(long a, long b) {
    long q = a / b;
    long r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

/* PyUnicode_Substring */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_Substring(
            PyObject* text, Py_ssize_t start, Py_ssize_t stop) {
    Py_ssize_t length;
    #if !CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(__Pyx_PyUnicode_READY(text) == -1)) return NULL;
    #endif
    length = __Pyx_PyUnicode_GET_LENGTH(text);
    #if !CYTHON_ASSUME_SAFE_SIZE
    if (unlikely(length < 0)) return NULL;
    #endif
    if (start < 0) {
        start += length;
        if (start < 0)
            start = 0;
    }
    if (stop < 0)
        stop += length;
    else if (stop > length)
        stop = length;
    if (stop <= start)
        return __Pyx_NewRef(__pyx_mstate_global->__pyx_empty_unicode);
    if (start == 0 && stop == length)
        return __Pyx_NewRef(text);
#if CYTHON_COMPILING_IN_LIMITED_API
    return PyUnicode_Substring(text, start, stop);
#else
    return PyUnicode_FromKindAndData(PyUnicode_KIND(text),
        PyUnicode_1BYTE_DATA(text) + start*PyUnicode_KIND(text), stop-start);
#endif
}

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_GRAAL ||\
        !(CYTHON_ASSUME_SAFE_SIZE && CYTHON_ASSUME_SAFE_MACROS)
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS && (PY_VERSION_HEX < 0x030B0000)
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_GRAAL
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length, length2;
        int kind;
        void *data1, *data2;
        #if !CYTHON_COMPILING_IN_LIMITED_API
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        #endif
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        #if !CYTHON_ASSUME_SAFE_SIZE
        if (unlikely(length < 0)) return -1;
        #endif
        length2 = __Pyx_PyUnicode_GET_LENGTH(s2);
        #if !CYTHON_ASSUME_SAFE_SIZE
        if (unlikely(length2 < 0)) return -1;
        #endif
        if (length != length2) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    return (equals == Py_EQ);
return_ne:
    return (equals == Py_NE);
#endif
}

/* UnicodeConcatInPlace */
# if CYTHON_COMPILING_IN_CPYTHON
static int
__Pyx_unicode_modifiable(PyObject *unicode)
{
    if (Py_REFCNT(unicode) != 1)
        return 0;
    if (!PyUnicode_CheckExact(unicode))
        return 0;
    if (PyUnicode_CHECK_INTERNED(unicode))
        return 0;
    return 1;
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **p_left, PyObject *right
        #if CYTHON_REFNANNY
        , void* __pyx_refnanny
        #endif
    ) {
    PyObject *left = *p_left;
    Py_ssize_t left_len, right_len, new_len;
    if (unlikely(__Pyx_PyUnicode_READY(left) == -1))
        return NULL;
    if (unlikely(__Pyx_PyUnicode_READY(right) == -1))
        return NULL;
    left_len = PyUnicode_GET_LENGTH(left);
    if (left_len == 0) {
        Py_INCREF(right);
        return right;
    }
    right_len = PyUnicode_GET_LENGTH(right);
    if (right_len == 0) {
        Py_INCREF(left);
        return left;
    }
    if (unlikely(left_len > PY_SSIZE_T_MAX - right_len)) {
        PyErr_SetString(PyExc_OverflowError,
                        "strings are too large to concat");
        return NULL;
    }
    new_len = left_len + right_len;
    if (__Pyx_unicode_modifiable(left)
            && PyUnicode_CheckExact(right)
            && PyUnicode_KIND(right) <= PyUnicode_KIND(left)
            && !(PyUnicode_IS_ASCII(left) && !PyUnicode_IS_ASCII(right))) {
        int ret;
        __Pyx_GIVEREF(*p_left);
        ret = PyUnicode_Resize(p_left, new_len);
        __Pyx_GOTREF(*p_left);
        if (unlikely(ret != 0))
            return NULL;
        #if PY_VERSION_HEX >= 0x030d0000
        if (unlikely(PyUnicode_CopyCharacters(*p_left, left_len, right, 0, right_len) < 0)) return NULL;
        #else
        _PyUnicode_FastCopyCharacters(*p_left, left_len, right, 0, right_len);
        #endif
        __Pyx_INCREF(*p_left);
        __Pyx_GIVEREF(*p_left);
        return *p_left;
    } else {
        return __Pyx_PyUnicode_Concat(left, right);
    }
  }
#endif

/* TupleAndListFromArray */
#if !CYTHON_COMPILING_IN_CPYTHON && CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject *
__Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    Py_ssize_t i;
    if (n <= 0) {
        return __Pyx_NewRef(__pyx_mstate_global->__pyx_empty_tuple);
    }
    res = PyTuple_New(n);
    if (unlikely(res == NULL)) return NULL;
    for (i = 0; i < n; i++) {
        if (unlikely(__Pyx_PyTuple_SET_ITEM(res, i, src[i]) < 0)) {
            Py_DECREF(res);
            return NULL;
        }
        Py_INCREF(src[i]);
    }
    return res;
}
#elif CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject *const *CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject *
__Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        return __Pyx_NewRef(__pyx_mstate_global->__pyx_empty_tuple);
    }
    res = PyTuple_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyTupleObject*)res)->ob_item, n);
    return res;
}
static CYTHON_INLINE PyObject *
__Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        return PyList_New(0);
    }
    res = PyList_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyListObject*)res)->ob_item, n);
    return res;
}
#endif

/* fastcall */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s)
{
    Py_ssize_t i, n = __Pyx_PyTuple_GET_SIZE(kwnames);
    #if !CYTHON_ASSUME_SAFE_SIZE
    if (unlikely(n == -1)) return NULL;
    #endif
    for (i = 0; i < n; i++)
    {
        PyObject *namei = __Pyx_PyTuple_GET_ITEM(kwnames, i);
        #if !CYTHON_ASSUME_SAFE_MACROS
        if (unlikely(!namei)) return NULL;
        #endif
        if (s == namei) return kwvalues[i];
    }
    for (i = 0; i < n; i++)
    {
        PyObject *namei = __Pyx_PyTuple_GET_ITEM(kwnames, i);
        #if !CYTHON_ASSUME_SAFE_MACROS
        if (unlikely(!namei)) return NULL;
        #endif
        int eq = __Pyx_PyUnicode_Equals(s, namei, Py_EQ);
        if (unlikely(eq != 0)) {
            if (unlikely(eq < 0)) return NULL;
            return kwvalues[i];
        }
    }
    return NULL;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues) {
    Py_ssize_t i, nkwargs = PyTuple_GET_SIZE(kwnames);
    PyObject *dict;
    dict = PyDict_New();
    if (unlikely(!dict))
        return NULL;
    for (i=0; i<nkwargs; i++) {
        PyObject *key = PyTuple_GET_ITEM(kwnames, i);
        if (unlikely(PyDict_SetItem(dict, key, kwvalues[i]) < 0))
            goto bad;
    }
    return dict;
bad:
    Py_DECREF(dict);
    return NULL;
}
#endif
#endif

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    int kwds_is_tuple = CYTHON_METH_FASTCALL && likely(PyTuple_Check(kwds));
    while (1) {
        Py_XDECREF(key); key = NULL;
        Py_XDECREF(value); value = NULL;
        if (kwds_is_tuple) {
            Py_ssize_t size;
#if CYTHON_ASSUME_SAFE_SIZE
            size = PyTuple_GET_SIZE(kwds);
#else
            size = PyTuple_Size(kwds);
            if (size < 0) goto bad;
#endif
            if (pos >= size) break;
#if CYTHON_AVOID_BORROWED_REFS
            key = __Pyx_PySequence_ITEM(kwds, pos);
            if (!key) goto bad;
#elif CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kwds, pos);
#else
            key = PyTuple_GetItem(kwds, pos);
            if (!key) goto bad;
#endif
            value = kwvalues[pos];
            pos++;
        }
        else
        {
            if (!PyDict_Next(kwds, &pos, &key, &value)) break;
#if CYTHON_AVOID_BORROWED_REFS
            Py_INCREF(key);
#endif
        }
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
            Py_INCREF(value);
            Py_DECREF(key);
#endif
            key = NULL;
            value = NULL;
            continue;
        }
#if !CYTHON_AVOID_BORROWED_REFS
        Py_INCREF(key);
#endif
        Py_INCREF(value);
        name = first_kw_arg;
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (
                #if CYTHON_ASSUME_SAFE_SIZE
                    (PyUnicode_GET_LENGTH(**name) != PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key)
                );
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
                    value = NULL;
#endif
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if CYTHON_ASSUME_SAFE_SIZE
                        (PyUnicode_GET_LENGTH(**argname) != PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    Py_XDECREF(key);
    Py_XDECREF(value);
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
bad:
    Py_XDECREF(key);
    Py_XDECREF(value);
    return -1;
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    __Pyx_TypeName type_name;
    __Pyx_TypeName obj_type_name;
    PyObject *extra_info = __pyx_mstate_global->__pyx_empty_unicode;
    int from_annotation_subclass = 0;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (!exact) {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    } else if (exact == 2) {
        if (__Pyx_TypeCheck(obj, type)) {
            from_annotation_subclass = 1;
            extra_info = __pyx_mstate_global->__pyx_kp_u_Note_that_Cython_is_deliberately;
        }
    }
    type_name = __Pyx_PyType_GetName(type);
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected " __Pyx_FMT_TYPENAME
        ", got " __Pyx_FMT_TYPENAME ")"
#if __PYX_LIMITED_VERSION_HEX < 0x030C0000
        "%s%U"
#endif
        , name, type_name, obj_type_name
#if __PYX_LIMITED_VERSION_HEX < 0x030C0000
        , (from_annotation_subclass ? ". " : ""), extra_info
#endif
        );
#if __PYX_LIMITED_VERSION_HEX >= 0x030C0000
    if (exact == 2 && from_annotation_subclass) {
        PyObject *res;
        PyObject *vargs[2];
        vargs[0] = PyErr_GetRaisedException();
        vargs[1] = extra_info;
        res = PyObject_VectorcallMethod(__pyx_mstate_global->__pyx_kp_u_add_note, vargs, 2, NULL);
        Py_XDECREF(res);
        PyErr_SetRaisedException(vargs[0]);
    }
#endif
    __Pyx_DECREF_TypeName(type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* unicode_iter */
static CYTHON_INLINE int __Pyx_init_unicode_iteration(
    PyObject* ustring, Py_ssize_t *length, void** data, int *kind) {
#if CYTHON_COMPILING_IN_LIMITED_API
    *kind   = 0;
    *length = PyUnicode_GetLength(ustring);
    *data   = (void*)ustring;
#else
    if (unlikely(__Pyx_PyUnicode_READY(ustring) < 0)) return -1;
    *kind   = PyUnicode_KIND(ustring);
    *length = PyUnicode_GET_LENGTH(ustring);
    *data   = PyUnicode_DATA(ustring);
#endif
    return 0;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(!__pyx_m)) {
        return NULL;
    }
    result = PyObject_GetAttr(__pyx_m, name);
    if (likely(result)) {
        return result;
    }
#elif !CYTHON_AVOID_BORROWED_REFS && !CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
    result = _PyDict_GetItem_KnownHash(__pyx_mstate_global->__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_mstate_global->__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#elif !CYTHON_AVOID_BORROWED_REFS
    if (unlikely(__Pyx_PyDict_GetItemRef(__pyx_mstate_global->__pyx_d, name, &result) == -1)) PyErr_Clear();
    __PYX_UPDATE_DICT_CACHE(__pyx_mstate_global->__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return result;
    }
#else
    result = PyObject_GetItem(__pyx_mstate_global->__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_mstate_global->__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* RaiseUnexpectedTypeError */
static int
__Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj)
{
    __Pyx_TypeName obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError, "Expected %s, got " __Pyx_FMT_TYPENAME,
                 expected, obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* PyVersionSanityCheck */
static int __Pyx_VersionSanityCheck(void) {
  #if CYTHON_COMPILING_IN_CPYTHON
  #if PY_VERSION_HEX < 0x03080000
    if (PySys_GetObject("gettotalrefcount")) {
      #ifndef Py_DEBUG
        PyErr_SetString(
            PyExc_ImportError,
            "Module was compiled with a non-debug version of Python but imported into a debug version."
        );
        return -1;
      #endif
    } else {
      #ifdef Py_DEBUG
        PyErr_SetString(
            PyExc_ImportError,
            "Module was compiled with a debug version of Python but imported into a non-debug version."
        );
        return -1;
      #endif
    }
  #endif // Py_VERSION_HEX < 0x03080000
  #if PY_VERSION_HEX >= 0x030d0000
    if (PyRun_SimpleStringFlags(
      "if "
      #ifdef Py_GIL_DISABLED
        "not "
      #endif
      "__import__('sysconfig').get_config_var('Py_GIL_DISABLED'): raise ImportError",
      NULL
    ) == -1) {
        PyErr_SetString(
            PyExc_ImportError,
      #ifdef Py_GIL_DISABLED
            "Module was compiled with a freethreading build of Python but imported into a non-freethreading build."
      #else
            "Module was compiled with a non-freethreading build of Python but imported into a freethreading build."
      #endif
        );
      return -1;
    }
  #endif // version hex 3.13+
    if (PySys_GetObject("getobjects")) {
      #ifndef Py_TRACE_REFS
        PyErr_SetString(
            PyExc_ImportError,
            "Module was compiled without Py_TRACE_REFS but imported into a build of Python with."
        );
        return -1;
      #endif
    } else {
      #ifdef Py_TRACE_REFS
        PyErr_SetString(
            PyExc_ImportError,
            "Module was compiled with Py_TRACE_REFS but imported into a build of Python without."
        );
        return -1;
      #endif
    }
    const char code[] = "if __import__('sys').getsizeof(object()) != %u: raise ImportError";
    char formattedCode[sizeof(code)+50];
    PyOS_snprintf(formattedCode, sizeof(formattedCode), code, (unsigned int)sizeof(PyObject));
    if (PyRun_SimpleStringFlags(formattedCode, NULL) == -1) {
      PyErr_SetString(
        PyExc_ImportError,
        "Runtime and compile-time PyObject size do not match."
      );
      return -1;
    }
  #endif
    return 0;
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *module = 0;
    PyObject *empty_dict = 0;
    PyObject *empty_list = 0;
    empty_dict = PyDict_New();
    if (unlikely(!empty_dict))
        goto bad;
    if (level == -1) {
        if (strchr(__Pyx_MODULE_NAME, '.') != (0)) {
            module = PyImport_ImportModuleLevelObject(
                name, __pyx_mstate_global->__pyx_d, empty_dict, from_list, 1);
            if (unlikely(!module)) {
                if (unlikely(!PyErr_ExceptionMatches(PyExc_ImportError)))
                    goto bad;
                PyErr_Clear();
            }
        }
        level = 0;
    }
    if (!module) {
        module = PyImport_ImportModuleLevelObject(
            name, __pyx_mstate_global->__pyx_d, empty_dict, from_list, level);
    }
bad:
    Py_XDECREF(empty_dict);
    Py_XDECREF(empty_list);
    return module;
}

/* ImportDottedModule */
static PyObject *__Pyx__ImportDottedModule_Error(PyObject *name, PyObject *parts_tuple, Py_ssize_t count) {
    PyObject *partial_name = NULL, *slice = NULL, *sep = NULL;
    Py_ssize_t size;
    if (unlikely(PyErr_Occurred())) {
        PyErr_Clear();
    }
#if CYTHON_ASSUME_SAFE_SIZE
    size = PyTuple_GET_SIZE(parts_tuple);
#else
    size = PyTuple_Size(parts_tuple);
    if (size < 0) goto bad;
#endif
    if (likely(size == count)) {
        partial_name = name;
    } else {
        slice = PySequence_GetSlice(parts_tuple, 0, count);
        if (unlikely(!slice))
            goto bad;
        sep = PyUnicode_FromStringAndSize(".", 1);
        if (unlikely(!sep))
            goto bad;
        partial_name = PyUnicode_Join(sep, slice);
    }
    PyErr_Format(
        PyExc_ModuleNotFoundError,
        "No module named '%U'", partial_name);
bad:
    Py_XDECREF(sep);
    Py_XDECREF(slice);
    Py_XDECREF(partial_name);
    return NULL;
}
static PyObject *__Pyx__ImportDottedModule_Lookup(PyObject *name) {
    PyObject *imported_module;
#if (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400) ||\
        CYTHON_COMPILING_IN_GRAAL
    PyObject *modules = PyImport_GetModuleDict();
    if (unlikely(!modules))
        return NULL;
    imported_module = __Pyx_PyDict_GetItemStr(modules, name);
    Py_XINCREF(imported_module);
#else
    imported_module = PyImport_GetModule(name);
#endif
    return imported_module;
}
static PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple) {
    Py_ssize_t i, nparts;
#if CYTHON_ASSUME_SAFE_SIZE
    nparts = PyTuple_GET_SIZE(parts_tuple);
#else
    nparts = PyTuple_Size(parts_tuple);
    if (nparts < 0) return NULL;
#endif
    for (i=1; i < nparts && module; i++) {
        PyObject *part, *submodule;
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        part = PyTuple_GET_ITEM(parts_tuple, i);
#else
        part = __Pyx_PySequence_ITEM(parts_tuple, i);
        if (!part) return NULL;
#endif
        submodule = __Pyx_PyObject_GetAttrStrNoError(module, part);
#if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
        Py_DECREF(part);
#endif
        Py_DECREF(module);
        module = submodule;
    }
    if (unlikely(!module)) {
        return __Pyx__ImportDottedModule_Error(name, parts_tuple, i);
    }
    return module;
}
static PyObject *__Pyx__ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
    PyObject *imported_module;
    PyObject *module = __Pyx_Import(name, NULL, 0);
    if (!parts_tuple || unlikely(!module))
        return module;
    imported_module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(imported_module)) {
        Py_DECREF(module);
        return imported_module;
    }
    PyErr_Clear();
    return __Pyx_ImportDottedModule_WalkParts(module, name, parts_tuple);
}
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(module)) {
        PyObject *spec = __Pyx_PyObject_GetAttrStrNoError(module, __pyx_mstate_global->__pyx_n_u_spec);
        if (likely(spec)) {
            PyObject *unsafe = __Pyx_PyObject_GetAttrStrNoError(spec, __pyx_mstate_global->__pyx_n_u_initializing);
            if (likely(!unsafe || !__Pyx_PyObject_IsTrue(unsafe))) {
                Py_DECREF(spec);
                spec = NULL;
            }
            Py_XDECREF(unsafe);
        }
        if (likely(!spec)) {
            PyErr_Clear();
            return module;
        }
        Py_DECREF(spec);
        Py_DECREF(module);
    } else if (PyErr_Occurred()) {
        PyErr_Clear();
    }
#endif
    return __Pyx__ImportDottedModule(name, parts_tuple);
}

/* ListPack */
static PyObject *__Pyx_PyList_Pack(Py_ssize_t n, ...) {
    va_list va;
    PyObject *l = PyList_New(n);
    va_start(va, n);
    if (unlikely(!l)) goto end;
    for (Py_ssize_t i=0; i<n; ++i) {
        PyObject *arg = va_arg(va, PyObject*);
        Py_INCREF(arg);
        if (__Pyx_PyList_SET_ITEM(l, i, arg) != (0)) {
            Py_CLEAR(l);
            goto end;
        }
    }
    end:
    va_end(va);
    return l;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        const char* module_name_str = 0;
        PyObject* module_name = 0;
        PyObject* module_dot = 0;
        PyObject* full_name = 0;
        PyErr_Clear();
        module_name_str = PyModule_GetName(module);
        if (unlikely(!module_name_str)) { goto modbad; }
        module_name = PyUnicode_FromString(module_name_str);
        if (unlikely(!module_name)) { goto modbad; }
        module_dot = PyUnicode_Concat(module_name, __pyx_mstate_global->__pyx_kp_u_);
        if (unlikely(!module_dot)) { goto modbad; }
        full_name = PyUnicode_Concat(module_dot, name);
        if (unlikely(!full_name)) { goto modbad; }
        #if (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400) ||\
                CYTHON_COMPILING_IN_GRAAL
        {
            PyObject *modules = PyImport_GetModuleDict();
            if (unlikely(!modules))
                goto modbad;
            value = PyObject_GetItem(modules, full_name);
        }
        #else
        value = PyImport_GetModule(full_name);
        #endif
      modbad:
        Py_XDECREF(full_name);
        Py_XDECREF(module_dot);
        Py_XDECREF(module_name);
    }
    if (unlikely(!value)) {
        PyErr_Format(PyExc_ImportError, "cannot import name %S", name);
    }
    return value;
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
    PyObject* exc_type;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    exc_type = __Pyx_PyErr_CurrentExceptionType();
    if (unlikely(exc_type)) {
        if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))
            return -1;
        __Pyx_PyErr_Clear();
        return 0;
    }
    return 0;
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    }
    return __Pyx_IterFinish();
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL && !CYTHON_VECTORCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
    PyObject *kwdefs;
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object"))) {
        return NULL;
    }
    if (
            co->co_kwonlyargcount == 0 &&
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = __Pyx_CyOrPyCFunction_GET_FUNCTION(func);
    self = __Pyx_CyOrPyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectFastCall */
#if PY_VERSION_HEX < 0x03090000 || CYTHON_COMPILING_IN_LIMITED_API
static PyObject* __Pyx_PyObject_FastCall_fallback(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs) {
    PyObject *argstuple;
    PyObject *result = 0;
    size_t i;
    argstuple = PyTuple_New((Py_ssize_t)nargs);
    if (unlikely(!argstuple)) return NULL;
    for (i = 0; i < nargs; i++) {
        Py_INCREF(args[i]);
        if (__Pyx_PyTuple_SET_ITEM(argstuple, (Py_ssize_t)i, args[i]) != (0)) goto bad;
    }
    result = __Pyx_PyObject_Call(func, argstuple, kwargs);
  bad:
    Py_DECREF(argstuple);
    return result;
}
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t _nargs, PyObject *kwargs) {
    Py_ssize_t nargs = __Pyx_PyVectorcall_NARGS(_nargs);
#if CYTHON_COMPILING_IN_CPYTHON
    if (nargs == 0 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_NOARGS))
            return __Pyx_PyObject_CallMethO(func, NULL);
    }
    else if (nargs == 1 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_O))
            return __Pyx_PyObject_CallMethO(func, args[0]);
    }
#endif
    #if PY_VERSION_HEX < 0x030800B1
    #if CYTHON_FAST_PYCCALL
    if (PyCFunction_Check(func)) {
        if (kwargs) {
            return _PyCFunction_FastCallDict(func, args, nargs, kwargs);
        } else {
            return _PyCFunction_FastCallKeywords(func, args, nargs, NULL);
        }
    }
    if (!kwargs && __Pyx_IS_TYPE(func, &PyMethodDescr_Type)) {
        return _PyMethodDescr_FastCallKeywords(func, args, nargs, NULL);
    }
    #endif
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs);
    }
    #endif
    #endif
    if (kwargs == NULL) {
        #if CYTHON_VECTORCALL && !CYTHON_COMPILING_IN_LIMITED_API
        #if PY_VERSION_HEX < 0x03090000
        vectorcallfunc f = _PyVectorcall_Function(func);
        #else
        vectorcallfunc f = PyVectorcall_Function(func);
        #endif
        if (f) {
            return f(func, args, (size_t)nargs, NULL);
        }
        #elif defined(__Pyx_CyFunction_USED) && CYTHON_BACKPORT_VECTORCALL
        if (__Pyx_CyFunction_CheckExact(func)) {
            __pyx_vectorcallfunc f = __Pyx_CyFunction_func_vectorcall(func);
            if (f) return f(func, args, (size_t)nargs, NULL);
        }
        #elif CYTHON_COMPILING_IN_LIMITED_API && CYTHON_VECTORCALL
        return PyObject_Vectorcall(func, args, (size_t)nargs, NULL);
        #endif
    }
    if (nargs == 0) {
        return __Pyx_PyObject_Call(func, __pyx_mstate_global->__pyx_empty_tuple, kwargs);
    }
    #if PY_VERSION_HEX >= 0x03090000 && !CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_VectorcallDict(func, args, (size_t)nargs, kwargs);
    #else
    return __Pyx_PyObject_FastCall_fallback(func, args, (size_t)nargs, kwargs);
    #endif
}

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* FixUpExtensionType */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type) {
#if PY_VERSION_HEX > 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    CYTHON_UNUSED_VAR(spec);
    CYTHON_UNUSED_VAR(type);
#else
    const PyType_Slot *slot = spec->slots;
    while (slot && slot->slot && slot->slot != Py_tp_members)
        slot++;
    if (slot && slot->slot == Py_tp_members) {
        int changed = 0;
#if !(PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON)
        const
#endif
            PyMemberDef *memb = (PyMemberDef*) slot->pfunc;
        while (memb && memb->name) {
            if (memb->name[0] == '_' && memb->name[1] == '_') {
#if PY_VERSION_HEX < 0x030900b1
                if (strcmp(memb->name, "__weaklistoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_weaklistoffset = memb->offset;
                    changed = 1;
                }
                else if (strcmp(memb->name, "__dictoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_dictoffset = memb->offset;
                    changed = 1;
                }
#if CYTHON_METH_FASTCALL
                else if (strcmp(memb->name, "__vectorcalloffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
#if PY_VERSION_HEX >= 0x030800b4
                    type->tp_vectorcall_offset = memb->offset;
#else
                    type->tp_print = (printfunc) memb->offset;
#endif
                    changed = 1;
                }
#endif
#else
                if ((0));
#endif
#if PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON
                else if (strcmp(memb->name, "__module__") == 0) {
                    PyObject *descr;
                    assert(memb->type == T_OBJECT);
                    assert(memb->flags == 0 || memb->flags == READONLY);
                    descr = PyDescr_NewMember(type, memb);
                    if (unlikely(!descr))
                        return -1;
                    if (unlikely(PyDict_SetItem(type->tp_dict, PyDescr_NAME(descr), descr) < 0)) {
                        Py_DECREF(descr);
                        return -1;
                    }
                    Py_DECREF(descr);
                    changed = 1;
                }
#endif
            }
            memb++;
        }
        if (changed)
            PyType_Modified(type);
    }
#endif
    return 0;
}
#endif

/* FetchSharedCythonModule */
static PyObject *__Pyx_FetchSharedCythonABIModule(void) {
    return __Pyx_PyImport_AddModuleRef(__PYX_ABI_MODULE_NAME);
}

/* FetchCommonType */
static int __Pyx_VerifyCachedType(PyObject *cached_type,
                               const char *name,
                               Py_ssize_t basicsize,
                               Py_ssize_t expected_basicsize) {
    if (!PyType_Check(cached_type)) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s is not a type object", name);
        return -1;
    }
    if (basicsize != expected_basicsize) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s has the wrong size, try recompiling",
            name);
        return -1;
    }
    return 0;
}
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* abi_module;
    const char* object_name;
    PyTypeObject *cached_type = NULL;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    object_name = strrchr(type->tp_name, '.');
    object_name = object_name ? object_name+1 : type->tp_name;
    cached_type = (PyTypeObject*) PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        if (__Pyx_VerifyCachedType(
              (PyObject *)cached_type,
              object_name,
              cached_type->tp_basicsize,
              type->tp_basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    if (PyType_Ready(type) < 0) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, (PyObject *)type) < 0)
        goto bad;
    Py_INCREF(type);
    cached_type = type;
done:
    Py_DECREF(abi_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#else
static PyTypeObject *__Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases) {
    PyObject *abi_module, *cached_type = NULL;
    const char* object_name = strrchr(spec->name, '.');
    object_name = object_name ? object_name+1 : spec->name;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    cached_type = PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        Py_ssize_t basicsize;
#if CYTHON_COMPILING_IN_LIMITED_API
        PyObject *py_basicsize;
        py_basicsize = PyObject_GetAttrString(cached_type, "__basicsize__");
        if (unlikely(!py_basicsize)) goto bad;
        basicsize = PyLong_AsSsize_t(py_basicsize);
        Py_DECREF(py_basicsize);
        py_basicsize = 0;
        if (unlikely(basicsize == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
#else
        basicsize = likely(PyType_Check(cached_type)) ? ((PyTypeObject*) cached_type)->tp_basicsize : -1;
#endif
        if (__Pyx_VerifyCachedType(
              cached_type,
              object_name,
              basicsize,
              spec->basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    CYTHON_UNUSED_VAR(module);
    cached_type = __Pyx_PyType_FromModuleAndSpec(abi_module, spec, bases);
    if (unlikely(!cached_type)) goto bad;
    if (unlikely(__Pyx_fix_up_extension_type_from_spec(spec, (PyTypeObject *) cached_type) < 0)) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, cached_type) < 0) goto bad;
done:
    Py_DECREF(abi_module);
    assert(cached_type == NULL || PyType_Check(cached_type));
    return (PyTypeObject *) cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#endif

/* CallTypeTraverse */
#if !CYTHON_USE_TYPE_SPECS || (!CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x03090000)
#else
static int __Pyx_call_type_traverse(PyObject *o, int always_call, visitproc visit, void *arg) {
    #if CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX < 0x03090000
    if (__Pyx_get_runtime_version() < 0x03090000) return 0;
    #endif
    if (!always_call) {
        PyTypeObject *base = __Pyx_PyObject_GetSlot(o, tp_base, PyTypeObject*);
        unsigned long flags = PyType_GetFlags(base);
        if (flags & Py_TPFLAGS_HEAPTYPE) {
            return 0;
        }
    }
    Py_VISIT((PyObject*)Py_TYPE(o));
    return 0;
}
#endif

/* PyMethodNew */
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    PyObject *result;
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    #if __PYX_LIMITED_VERSION_HEX >= 0x030C0000
    {
        PyObject *args[] = {func, self};
        result = PyObject_Vectorcall(__pyx_mstate_global->__Pyx_CachedMethodType, args, 2, NULL);
    }
    #else
    result = PyObject_CallFunctionObjArgs(__pyx_mstate_global->__Pyx_CachedMethodType, func, self, NULL);
    #endif
    return result;
}
#else
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    return PyMethod_New(func, self);
}
#endif

/* PyVectorcallFastCallDict */
#if CYTHON_METH_FASTCALL && (CYTHON_VECTORCALL || CYTHON_BACKPORT_VECTORCALL)
static PyObject *__Pyx_PyVectorcall_FastCallDict_kw(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    PyObject *res = NULL;
    PyObject *kwnames;
    PyObject **newargs;
    PyObject **kwvalues;
    Py_ssize_t i, pos;
    size_t j;
    PyObject *key, *value;
    unsigned long keys_are_strings;
    #if !CYTHON_ASSUME_SAFE_SIZE
    Py_ssize_t nkw = PyDict_Size(kw);
    if (unlikely(nkw == -1)) return NULL;
    #else
    Py_ssize_t nkw = PyDict_GET_SIZE(kw);
    #endif
    newargs = (PyObject **)PyMem_Malloc((nargs + (size_t)nkw) * sizeof(args[0]));
    if (unlikely(newargs == NULL)) {
        PyErr_NoMemory();
        return NULL;
    }
    for (j = 0; j < nargs; j++) newargs[j] = args[j];
    kwnames = PyTuple_New(nkw);
    if (unlikely(kwnames == NULL)) {
        PyMem_Free(newargs);
        return NULL;
    }
    kwvalues = newargs + nargs;
    pos = i = 0;
    keys_are_strings = Py_TPFLAGS_UNICODE_SUBCLASS;
    while (PyDict_Next(kw, &pos, &key, &value)) {
        keys_are_strings &=
        #if CYTHON_COMPILING_IN_LIMITED_API
            PyType_GetFlags(Py_TYPE(key));
        #else
            Py_TYPE(key)->tp_flags;
        #endif
        Py_INCREF(key);
        Py_INCREF(value);
        #if !CYTHON_ASSUME_SAFE_MACROS
        if (unlikely(PyTuple_SetItem(kwnames, i, key) < 0)) goto cleanup;
        #else
        PyTuple_SET_ITEM(kwnames, i, key);
        #endif
        kwvalues[i] = value;
        i++;
    }
    if (unlikely(!keys_are_strings)) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        goto cleanup;
    }
    res = vc(func, newargs, nargs, kwnames);
cleanup:
    Py_DECREF(kwnames);
    for (i = 0; i < nkw; i++)
        Py_DECREF(kwvalues[i]);
    PyMem_Free(newargs);
    return res;
}
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    Py_ssize_t kw_size =
        likely(kw == NULL) ?
        0 :
#if !CYTHON_ASSUME_SAFE_SIZE
        PyDict_Size(kw);
#else
        PyDict_GET_SIZE(kw);
#endif
    if (kw_size == 0) {
        return vc(func, args, nargs, NULL);
    }
#if !CYTHON_ASSUME_SAFE_SIZE
    else if (unlikely(kw_size == -1)) {
        return NULL;
    }
#endif
    return __Pyx_PyVectorcall_FastCallDict_kw(func, vc, args, nargs, kw);
}
#endif

/* CythonFunctionShared */
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunctionNoMethod(PyObject *func, void *cfunc) {
    if (__Pyx_CyFunction_Check(func)) {
        return PyCFunction_GetFunction(((__pyx_CyFunctionObject*)func)->func) == (PyCFunction) cfunc;
    } else if (PyCFunction_Check(func)) {
        return PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc) {
    if ((PyObject*)Py_TYPE(func) == __pyx_mstate_global->__Pyx_CachedMethodType) {
        int result;
        PyObject *newFunc = PyObject_GetAttr(func, __pyx_mstate_global->__pyx_n_u_func);
        if (unlikely(!newFunc)) {
            PyErr_Clear(); // It's only an optimization, so don't throw an error
            return 0;
        }
        result = __Pyx__IsSameCyOrCFunctionNoMethod(newFunc, cfunc);
        Py_DECREF(newFunc);
        return result;
    }
    return __Pyx__IsSameCyOrCFunctionNoMethod(func, cfunc);
}
#else
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc) {
    if (PyMethod_Check(func)) {
        func = PyMethod_GET_FUNCTION(func);
    }
    return __Pyx_CyOrPyCFunction_Check(func) && __Pyx_CyOrPyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
}
#endif
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj) {
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    __Pyx_Py_XDECREF_SET(
        __Pyx_CyFunction_GetClassObj(f),
            ((classobj) ? __Pyx_NewRef(classobj) : NULL));
#else
    __Pyx_Py_XDECREF_SET(
        ((PyCMethodObject *) (f))->mm_class,
        (PyTypeObject*)((classobj) ? __Pyx_NewRef(classobj) : NULL));
#endif
}
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, void *closure)
{
    CYTHON_UNUSED_VAR(closure);
    if (unlikely(op->func_doc == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_doc = PyObject_GetAttrString(op->func, "__doc__");
        if (unlikely(!op->func_doc)) return NULL;
#else
        if (((PyCFunctionObject*)op)->m_ml->ml_doc) {
            op->func_doc = PyUnicode_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
#endif
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_doc, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_name == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_name = PyObject_GetAttrString(op->func, "__name__");
#else
        op->func_name = PyUnicode_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_name, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_qualname, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_dict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(op);
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = __Pyx_PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = __Pyx_PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyTuple_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__defaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_tuple, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_tuple;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__kwdefaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_kwdict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_kwdict;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value || value == Py_None) {
        value = NULL;
    } else if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_annotations, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->func_annotations;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyObject *
__Pyx_CyFunction_get_is_coroutine(__pyx_CyFunctionObject *op, void *context) {
    int is_coroutine;
    CYTHON_UNUSED_VAR(context);
    if (op->func_is_coroutine) {
        return __Pyx_NewRef(op->func_is_coroutine);
    }
    is_coroutine = op->flags & __Pyx_CYFUNCTION_COROUTINE;
    if (is_coroutine) {
        PyObject *module, *fromlist, *marker = __pyx_mstate_global->__pyx_n_u_is_coroutine;
        fromlist = PyList_New(1);
        if (unlikely(!fromlist)) return NULL;
        Py_INCREF(marker);
#if CYTHON_ASSUME_SAFE_MACROS
        PyList_SET_ITEM(fromlist, 0, marker);
#else
        if (unlikely(PyList_SetItem(fromlist, 0, marker) < 0)) {
            Py_DECREF(marker);
            Py_DECREF(fromlist);
            return NULL;
        }
#endif
        module = PyImport_ImportModuleLevelObject(__pyx_mstate_global->__pyx_n_u_asyncio_coroutines, NULL, NULL, fromlist, 0);
        Py_DECREF(fromlist);
        if (unlikely(!module)) goto ignore;
        op->func_is_coroutine = __Pyx_PyObject_GetAttrStr(module, marker);
        Py_DECREF(module);
        if (likely(op->func_is_coroutine)) {
            return __Pyx_NewRef(op->func_is_coroutine);
        }
ignore:
        PyErr_Clear();
    }
    op->func_is_coroutine = __Pyx_PyBool_FromLong(is_coroutine);
    return __Pyx_NewRef(op->func_is_coroutine);
}
static void __Pyx_CyFunction_raise_argument_count_error(__pyx_CyFunctionObject *func, const char* message, Py_ssize_t size) {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *py_name = __Pyx_CyFunction_get_name(func, NULL);
    if (!py_name) return;
    PyErr_Format(PyExc_TypeError,
        "%.200S() %s (%" CYTHON_FORMAT_SSIZE_T "d given)",
        py_name, message, size);
    Py_DECREF(py_name);
#else
    const char* name = ((PyCFunctionObject*)func)->m_ml->ml_name;
    PyErr_Format(PyExc_TypeError,
        "%.200s() %s (%" CYTHON_FORMAT_SSIZE_T "d given)",
        name, message, size);
#endif
}
static void __Pyx_CyFunction_raise_type_error(__pyx_CyFunctionObject *func, const char* message) {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *py_name = __Pyx_CyFunction_get_name(func, NULL);
    if (!py_name) return;
    PyErr_Format(PyExc_TypeError,
        "%.200S() %s",
        py_name, message);
    Py_DECREF(py_name);
#else
    const char* name = ((PyCFunctionObject*)func)->m_ml->ml_name;
    PyErr_Format(PyExc_TypeError,
        "%.200s() %s",
        name, message);
#endif
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *
__Pyx_CyFunction_get_module(__pyx_CyFunctionObject *op, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_GetAttrString(op->func, "__module__");
}
static int
__Pyx_CyFunction_set_module(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_SetAttrString(op->func, "__module__", value);
}
#endif
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {"func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {"__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {"func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {"__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {"__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {"func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {"__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {"func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {"__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {"func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {"__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {"func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {"__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {"func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {"__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {"__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {"__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {"_is_coroutine", (getter)__Pyx_CyFunction_get_is_coroutine, 0, 0, 0},
#if CYTHON_COMPILING_IN_LIMITED_API
    {"__module__", (getter)__Pyx_CyFunction_get_module, (setter)__Pyx_CyFunction_set_module, 0, 0},
#endif
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
#if !CYTHON_COMPILING_IN_LIMITED_API
    {"__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), 0, 0},
#endif
#if CYTHON_USE_TYPE_SPECS
    {"__dictoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_dict), READONLY, 0},
#if CYTHON_METH_FASTCALL
#if CYTHON_BACKPORT_VECTORCALL || CYTHON_COMPILING_IN_LIMITED_API
    {"__vectorcalloffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_vectorcall), READONLY, 0},
#else
    {"__vectorcalloffset__", T_PYSSIZET, offsetof(PyCFunctionObject, vectorcall), READONLY, 0},
#endif
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
    {"__weaklistoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_weakreflist), READONLY, 0},
#else
    {"__weaklistoffset__", T_PYSSIZET, offsetof(PyCFunctionObject, m_weakreflist), READONLY, 0},
#endif
#endif
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, PyObject *args)
{
    CYTHON_UNUSED_VAR(args);
    Py_INCREF(m->func_qualname);
    return m->func_qualname;
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) (((PyCFunctionObject*)cyfunc)->m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
#if !CYTHON_COMPILING_IN_LIMITED_API
    PyCFunctionObject *cf = (PyCFunctionObject*) op;
#endif
    if (unlikely(op == NULL))
        return NULL;
#if CYTHON_COMPILING_IN_LIMITED_API
    op->func = PyCFunction_NewEx(ml, (PyObject*)op, module);
    if (unlikely(!op->func)) return NULL;
#endif
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
#if !CYTHON_COMPILING_IN_LIMITED_API
    cf->m_ml = ml;
    cf->m_self = (PyObject *) op;
#endif
    Py_XINCREF(closure);
    op->func_closure = closure;
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_XINCREF(module);
    cf->m_module = module;
#endif
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    op->func_classobj = NULL;
#else
    ((PyCMethodObject*)op)->mm_class = NULL;
#endif
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    op->func_is_coroutine = NULL;
#if CYTHON_METH_FASTCALL
    switch (ml->ml_flags & (METH_VARARGS | METH_FASTCALL | METH_NOARGS | METH_O | METH_KEYWORDS | METH_METHOD)) {
    case METH_NOARGS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_NOARGS;
        break;
    case METH_O:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_O;
        break;
    case METH_METHOD | METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD;
        break;
    case METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS;
        break;
    case METH_VARARGS | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = NULL;
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        Py_DECREF(op);
        return NULL;
    }
#endif
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_CLEAR(m->func);
#else
    Py_CLEAR(((PyCFunctionObject*)m)->m_module);
#endif
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
#if PY_VERSION_HEX < 0x030900B1
    Py_CLEAR(__Pyx_CyFunction_GetClassObj(m));
#else
    {
        PyObject *cls = (PyObject*) ((PyCMethodObject *) (m))->mm_class;
        ((PyCMethodObject *) (m))->mm_class = NULL;
        Py_XDECREF(cls);
    }
#endif
#endif
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    Py_CLEAR(m->func_is_coroutine);
    Py_CLEAR(m->defaults);
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    __Pyx_PyHeapTypeObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    {
        int e = __Pyx_call_type_traverse((PyObject*)m, 1, visit, arg);
        if (e) return e;
    }
    Py_VISIT(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(m->func);
#else
    Py_VISIT(((PyCFunctionObject*)m)->m_module);
#endif
    Py_VISIT(m->func_dict);
    __Pyx_VISIT_CONST(m->func_name);
    __Pyx_VISIT_CONST(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    __Pyx_VISIT_CONST(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(__Pyx_CyFunction_GetClassObj(m));
#endif
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    Py_VISIT(m->func_is_coroutine);
    Py_VISIT(m->defaults);
    return 0;
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *f = ((__pyx_CyFunctionObject*)func)->func;
    PyCFunction meth;
    int flags;
    meth = PyCFunction_GetFunction(f);
    if (unlikely(!meth)) return NULL;
    flags = PyCFunction_GetFlags(f);
    if (unlikely(flags < 0)) return NULL;
#else
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    int flags = f->m_ml->ml_flags;
#endif
    Py_ssize_t size;
    switch (flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_SIZE
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 0))
                return (*meth)(self, NULL);
            __Pyx_CyFunction_raise_argument_count_error(
                (__pyx_CyFunctionObject*)func,
                "takes no arguments", size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_SIZE
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = __Pyx_PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            __Pyx_CyFunction_raise_argument_count_error(
                (__pyx_CyFunctionObject*)func,
                "takes exactly one argument", size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        return NULL;
    }
    __Pyx_CyFunction_raise_type_error(
        (__pyx_CyFunctionObject*)func, "takes no keyword arguments");
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *self, *result;
#if CYTHON_COMPILING_IN_LIMITED_API
    self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)func)->func);
    if (unlikely(!self) && PyErr_Occurred()) return NULL;
#else
    self = ((PyCFunctionObject*)func)->m_self;
#endif
    result = __Pyx_CyFunction_CallMethod(func, self, arg, kw);
    return result;
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
#if CYTHON_METH_FASTCALL && (CYTHON_VECTORCALL || CYTHON_BACKPORT_VECTORCALL)
     __pyx_vectorcallfunc vc = __Pyx_CyFunction_func_vectorcall(cyfunc);
    if (vc) {
#if CYTHON_ASSUME_SAFE_MACROS && CYTHON_ASSUME_SAFE_SIZE
        return __Pyx_PyVectorcall_FastCallDict(func, vc, &PyTuple_GET_ITEM(args, 0), (size_t)PyTuple_GET_SIZE(args), kw);
#else
        (void) &__Pyx_PyVectorcall_FastCallDict;
        return PyVectorcall_Call(func, args, kw);
#endif
    }
#endif
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
#if CYTHON_ASSUME_SAFE_SIZE
        argc = PyTuple_GET_SIZE(args);
#else
        argc = PyTuple_Size(args);
        if (unlikely(argc < 0)) return NULL;
#endif
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            PyErr_Format(PyExc_TypeError,
                         "unbound method %.200S() needs an argument",
                         cyfunc->func_qualname);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
#if CYTHON_METH_FASTCALL && (CYTHON_VECTORCALL || CYTHON_BACKPORT_VECTORCALL)
static CYTHON_INLINE int __Pyx_CyFunction_Vectorcall_CheckArgs(__pyx_CyFunctionObject *cyfunc, Py_ssize_t nargs, PyObject *kwnames)
{
    int ret = 0;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        if (unlikely(nargs < 1)) {
            __Pyx_CyFunction_raise_type_error(
                cyfunc, "needs an argument");
            return -1;
        }
        ret = 1;
    }
    if (unlikely(kwnames) && unlikely(__Pyx_PyTuple_GET_SIZE(kwnames))) {
        __Pyx_CyFunction_raise_type_error(
            cyfunc, "takes no keyword arguments");
        return -1;
    }
    return ret;
}
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyCFunction meth = PyCFunction_GetFunction(cyfunc->func);
    if (unlikely(!meth)) return NULL;
#else
    PyCFunction meth = ((PyCFunctionObject*)cyfunc)->m_ml->ml_meth;
#endif
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
#if CYTHON_COMPILING_IN_LIMITED_API
        self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)cyfunc)->func);
        if (unlikely(!self) && PyErr_Occurred()) return NULL;
#else
        self = ((PyCFunctionObject*)cyfunc)->m_self;
#endif
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 0)) {
        __Pyx_CyFunction_raise_argument_count_error(
            cyfunc, "takes no arguments", nargs);
        return NULL;
    }
    return meth(self, NULL);
}
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyCFunction meth = PyCFunction_GetFunction(cyfunc->func);
    if (unlikely(!meth)) return NULL;
#else
    PyCFunction meth = ((PyCFunctionObject*)cyfunc)->m_ml->ml_meth;
#endif
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
#if CYTHON_COMPILING_IN_LIMITED_API
        self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)cyfunc)->func);
        if (unlikely(!self) && PyErr_Occurred()) return NULL;
#else
        self = ((PyCFunctionObject*)cyfunc)->m_self;
#endif
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 1)) {
        __Pyx_CyFunction_raise_argument_count_error(
            cyfunc, "takes exactly one argument", nargs);
        return NULL;
    }
    return meth(self, args[0]);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyCFunction meth = PyCFunction_GetFunction(cyfunc->func);
    if (unlikely(!meth)) return NULL;
#else
    PyCFunction meth = ((PyCFunctionObject*)cyfunc)->m_ml->ml_meth;
#endif
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
#if CYTHON_COMPILING_IN_LIMITED_API
        self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)cyfunc)->func);
        if (unlikely(!self) && PyErr_Occurred()) return NULL;
#else
        self = ((PyCFunctionObject*)cyfunc)->m_self;
#endif
        break;
    default:
        return NULL;
    }
    return ((__Pyx_PyCFunctionFastWithKeywords)(void(*)(void))meth)(self, args, nargs, kwnames);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyTypeObject *cls = (PyTypeObject *) __Pyx_CyFunction_GetClassObj(cyfunc);
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyCFunction meth = PyCFunction_GetFunction(cyfunc->func);
    if (unlikely(!meth)) return NULL;
#else
    PyCFunction meth = ((PyCFunctionObject*)cyfunc)->m_ml->ml_meth;
#endif
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
#if CYTHON_COMPILING_IN_LIMITED_API
        self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)cyfunc)->func);
        if (unlikely(!self) && PyErr_Occurred()) return NULL;
#else
        self = ((PyCFunctionObject*)cyfunc)->m_self;
#endif
        break;
    default:
        return NULL;
    }
    return ((__Pyx_PyCMethod)(void(*)(void))meth)(self, cls, args, (size_t)nargs, kwnames);
}
#endif
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_CyFunctionType_slots[] = {
    {Py_tp_dealloc, (void *)__Pyx_CyFunction_dealloc},
    {Py_tp_repr, (void *)__Pyx_CyFunction_repr},
    {Py_tp_call, (void *)__Pyx_CyFunction_CallAsMethod},
    {Py_tp_traverse, (void *)__Pyx_CyFunction_traverse},
    {Py_tp_clear, (void *)__Pyx_CyFunction_clear},
    {Py_tp_methods, (void *)__pyx_CyFunction_methods},
    {Py_tp_members, (void *)__pyx_CyFunction_members},
    {Py_tp_getset, (void *)__pyx_CyFunction_getsets},
    {Py_tp_descr_get, (void *)__Pyx_PyMethod_New},
    {0, 0},
};
static PyType_Spec __pyx_CyFunctionType_spec = {
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if CYTHON_METH_FASTCALL
#if defined(Py_TPFLAGS_HAVE_VECTORCALL)
    Py_TPFLAGS_HAVE_VECTORCALL |
#elif defined(_Py_TPFLAGS_HAVE_VECTORCALL)
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
#endif // CYTHON_METH_FASTCALL
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    __pyx_CyFunctionType_slots
};
#else
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
#if !CYTHON_METH_FASTCALL
    0,
#elif CYTHON_BACKPORT_VECTORCALL
    (printfunc)offsetof(__pyx_CyFunctionObject, func_vectorcall),
#else
    offsetof(PyCFunctionObject, vectorcall),
#endif
    0,
    0,
    0,
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if defined(_Py_TPFLAGS_HAVE_VECTORCALL) && CYTHON_METH_FASTCALL
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
    offsetof(PyCFunctionObject, m_weakreflist),
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_PyMethod_New,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if __PYX_NEED_TP_PRINT_SLOT
    0,
#endif
#if PY_VERSION_HEX >= 0x030C0000
    0,
#endif
#if PY_VERSION_HEX >= 0x030d00A4
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
    0,
#endif
};
#endif
static int __pyx_CyFunction_init(PyObject *module) {
    __pyx_mstatetype *mstate = __Pyx_PyModule_GetState(module);
#if CYTHON_USE_TYPE_SPECS
    mstate->__pyx_CyFunctionType = __Pyx_FetchCommonTypeFromSpec(module, &__pyx_CyFunctionType_spec, NULL);
#else
    mstate->__pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
#endif
    if (unlikely(mstate->__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_InitDefaults(PyObject *func, PyTypeObject *defaults_type) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_CallObject((PyObject*)defaults_type, NULL); // _PyObject_New(defaults_type);
    if (unlikely(!m->defaults))
        return NULL;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_mstate_global->__pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* CLineInTraceback */
#if CYTHON_CLINE_IN_TRACEBACK && CYTHON_CLINE_IN_TRACEBACK_RUNTIME
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    CYTHON_MAYBE_UNUSED_VAR(tstate);
    if (unlikely(!__pyx_mstate_global->__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_mstate_global->__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_mstate_global->__pyx_n_u_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStrNoError(__pyx_mstate_global->__pyx_cython_runtime, __pyx_mstate_global->__pyx_n_u_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_mstate_global->__pyx_cython_runtime, __pyx_mstate_global->__pyx_n_u_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static __Pyx_CachedCodeObjectType *__pyx_find_code_object(int code_line) {
    __Pyx_CachedCodeObjectType* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, __Pyx_CachedCodeObjectType* code_object)
{
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        __Pyx_CachedCodeObjectType* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API && !defined(PYPY_VERSION)
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyCode_Replace_For_AddTraceback(PyObject *code, PyObject *scratch_dict,
                                                       PyObject *firstlineno, PyObject *name) {
    PyObject *replace = NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_firstlineno", firstlineno))) return NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_name", name))) return NULL;
    replace = PyObject_GetAttrString(code, "replace");
    if (likely(replace)) {
        PyObject *result = PyObject_Call(replace, __pyx_mstate_global->__pyx_empty_tuple, scratch_dict);
        Py_DECREF(replace);
        return result;
    }
    PyErr_Clear();
    #if __PYX_LIMITED_VERSION_HEX < 0x030780000
    {
        PyObject *compiled = NULL, *result = NULL;
        if (unlikely(PyDict_SetItemString(scratch_dict, "code", code))) return NULL;
        if (unlikely(PyDict_SetItemString(scratch_dict, "type", (PyObject*)(&PyType_Type)))) return NULL;
        compiled = Py_CompileString(
            "out = type(code)(\n"
            "  code.co_argcount, code.co_kwonlyargcount, code.co_nlocals, code.co_stacksize,\n"
            "  code.co_flags, code.co_code, code.co_consts, code.co_names,\n"
            "  code.co_varnames, code.co_filename, co_name, co_firstlineno,\n"
            "  code.co_lnotab)\n", "<dummy>", Py_file_input);
        if (!compiled) return NULL;
        result = PyEval_EvalCode(compiled, scratch_dict, scratch_dict);
        Py_DECREF(compiled);
        if (!result) PyErr_Print();
        Py_DECREF(result);
        result = PyDict_GetItemString(scratch_dict, "out");
        if (result) Py_INCREF(result);
        return result;
    }
    #else
    return NULL;
    #endif
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyObject *code_object = NULL, *py_py_line = NULL, *py_funcname = NULL, *dict = NULL;
    PyObject *replace = NULL, *getframe = NULL, *frame = NULL;
    PyObject *exc_type, *exc_value, *exc_traceback;
    int success = 0;
    if (c_line) {
        (void) __pyx_cfilenm;
        (void) __Pyx_CLineForTraceback(__Pyx_PyThreadState_Current, c_line);
    }
    PyErr_Fetch(&exc_type, &exc_value, &exc_traceback);
    code_object = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!code_object) {
        code_object = Py_CompileString("_getframe()", filename, Py_eval_input);
        if (unlikely(!code_object)) goto bad;
        py_py_line = PyLong_FromLong(py_line);
        if (unlikely(!py_py_line)) goto bad;
        py_funcname = PyUnicode_FromString(funcname);
        if (unlikely(!py_funcname)) goto bad;
        dict = PyDict_New();
        if (unlikely(!dict)) goto bad;
        {
            PyObject *old_code_object = code_object;
            code_object = __Pyx_PyCode_Replace_For_AddTraceback(code_object, dict, py_py_line, py_funcname);
            Py_DECREF(old_code_object);
        }
        if (unlikely(!code_object)) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, code_object);
    } else {
        dict = PyDict_New();
    }
    getframe = PySys_GetObject("_getframe");
    if (unlikely(!getframe)) goto bad;
    if (unlikely(PyDict_SetItemString(dict, "_getframe", getframe))) goto bad;
    frame = PyEval_EvalCode(code_object, dict, dict);
    if (unlikely(!frame) || frame == Py_None) goto bad;
    success = 1;
  bad:
    PyErr_Restore(exc_type, exc_value, exc_traceback);
    Py_XDECREF(code_object);
    Py_XDECREF(py_py_line);
    Py_XDECREF(py_funcname);
    Py_XDECREF(dict);
    Py_XDECREF(replace);
    if (success) {
        PyTraceBack_Here(
            (struct _frame*)frame);
    }
    Py_XDECREF(frame);
}
#else
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    if (c_line) {
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
    }
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    Py_XDECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_mstate_global->__pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}
#endif

/* UnicodeAsUCS4 */
static void __Pyx_PyUnicode_AsPy_UCS4_error(Py_ssize_t length) {
    if (likely(length >= 0)) {
        PyErr_Format(PyExc_ValueError,
                     "only single character unicode strings can be converted to Py_UCS4, "
                     "got length %" CYTHON_FORMAT_SSIZE_T "d", length);
    }
}
static CYTHON_INLINE Py_UCS4 __Pyx_PyUnicode_AsPy_UCS4(PyObject* x) {
    Py_ssize_t length = __Pyx_PyUnicode_GET_LENGTH(x);
    if (unlikely(length != 1)) {
        __Pyx_PyUnicode_AsPy_UCS4_error(length);
        return (Py_UCS4)-1;
    }
    return __Pyx_PyUnicode_READ_CHAR(x, 0);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* ObjectAsUCS4 */
static void __Pyx__PyObject_AsPy_UCS4_raise_error(long ival) {
   if (ival < 0) {
       if (!PyErr_Occurred())
           PyErr_SetString(PyExc_OverflowError,
                           "cannot convert negative value to Py_UCS4");
   } else {
       PyErr_SetString(PyExc_OverflowError,
                       "value too large to convert to Py_UCS4");
   }
}
static Py_UCS4 __Pyx__PyObject_AsPy_UCS4(PyObject* x) {
   long ival;
   ival = __Pyx_PyLong_As_long(x);
   if (unlikely(!__Pyx_is_valid_index(ival, 1114111 + 1))) {
       __Pyx__PyObject_AsPy_UCS4_raise_error(ival);
       return (Py_UCS4)-1;
   }
   return (Py_UCS4)ival;
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyLong_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (unlikely(!PyLong_Check(x))) {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Long(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyLong_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 2 * PyLong_SHIFT)) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 3 * PyLong_SHIFT)) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 4 * PyLong_SHIFT)) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (int) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(int) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(int) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(int) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(int) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(int) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        int val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (int) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (int) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (int) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (int) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(int) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((int) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(int) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((int) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((int) 1) << (sizeof(int) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (int) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* PyObjectVectorCallKwBuilder */
#if CYTHON_VECTORCALL
static int __Pyx_VectorcallBuilder_AddArg(PyObject *key, PyObject *value, PyObject *builder, PyObject **args, int n) {
    (void)__Pyx_PyObject_FastCallDict;
    if (__Pyx_PyTuple_SET_ITEM(builder, n, key) != (0)) return -1;
    Py_INCREF(key);
    args[n] = value;
    return 0;
}
CYTHON_UNUSED static int __Pyx_VectorcallBuilder_AddArg_Check(PyObject *key, PyObject *value, PyObject *builder, PyObject **args, int n) {
    (void)__Pyx_VectorcallBuilder_AddArgStr;
    if (unlikely(!PyUnicode_Check(key))) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        return -1;
    }
    return __Pyx_VectorcallBuilder_AddArg(key, value, builder, args, n);
}
static int __Pyx_VectorcallBuilder_AddArgStr(const char *key, PyObject *value, PyObject *builder, PyObject **args, int n) {
    PyObject *pyKey = PyUnicode_FromString(key);
    if (!pyKey) return -1;
    return __Pyx_VectorcallBuilder_AddArg(pyKey, value, builder, args, n);
}
#else // CYTHON_VECTORCALL
CYTHON_UNUSED static int __Pyx_VectorcallBuilder_AddArg_Check(PyObject *key, PyObject *value, PyObject *builder, CYTHON_UNUSED PyObject **args, CYTHON_UNUSED int n) {
    if (unlikely(!PyUnicode_Check(key))) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        return -1;
    }
    return PyDict_SetItem(builder, key, value);
}
#endif

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyLong_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyLong_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyLong_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d00A4
        if (is_unsigned) {
            return PyLong_FromUnsignedNativeBytes(bytes, sizeof(value), -1);
        } else {
            return PyLong_FromNativeBytes(bytes, sizeof(value), -1);
        }
#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        int one = 1; int little = (int)*(unsigned char *)&one;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
#else
        int one = 1; int little = (int)*(unsigned char *)&one;
        PyObject *from_bytes, *result = NULL, *kwds = NULL;
        PyObject *py_bytes = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(int));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        {
            PyObject *args[3+(CYTHON_VECTORCALL ? 1 : 0)] = { NULL, py_bytes, order_str };
            if (!is_unsigned) {
                kwds = __Pyx_MakeVectorcallBuilderKwds(1);
                if (!kwds) goto limited_bad;
                if (__Pyx_VectorcallBuilder_AddArgStr("signed", __Pyx_NewRef(Py_True), kwds, args+3, 0) < 0) goto limited_bad;
            }
            result = __Pyx_Object_Vectorcall_CallFromBuilder(from_bytes, args+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET, kwds);
        }
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* FormatTypeName */
#if CYTHON_COMPILING_IN_LIMITED_API
static __Pyx_TypeName
__Pyx_PyType_GetName(PyTypeObject* tp)
{
    PyObject *name = __Pyx_PyObject_GetAttrStr((PyObject *)tp,
                                               __pyx_mstate_global->__pyx_n_u_name);
    if (unlikely(name == NULL) || unlikely(!PyUnicode_Check(name))) {
        PyErr_Clear();
        Py_XDECREF(name);
        name = __Pyx_NewRef(__pyx_mstate_global->__pyx_kp_u__94);
    }
    return name;
}
#endif

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyLong_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyLong_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyLong_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d00A4
        if (is_unsigned) {
            return PyLong_FromUnsignedNativeBytes(bytes, sizeof(value), -1);
        } else {
            return PyLong_FromNativeBytes(bytes, sizeof(value), -1);
        }
#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        int one = 1; int little = (int)*(unsigned char *)&one;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
#else
        int one = 1; int little = (int)*(unsigned char *)&one;
        PyObject *from_bytes, *result = NULL, *kwds = NULL;
        PyObject *py_bytes = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(long));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        {
            PyObject *args[3+(CYTHON_VECTORCALL ? 1 : 0)] = { NULL, py_bytes, order_str };
            if (!is_unsigned) {
                kwds = __Pyx_MakeVectorcallBuilderKwds(1);
                if (!kwds) goto limited_bad;
                if (__Pyx_VectorcallBuilder_AddArgStr("signed", __Pyx_NewRef(Py_True), kwds, args+3, 0) < 0) goto limited_bad;
            }
            result = __Pyx_Object_Vectorcall_CallFromBuilder(from_bytes, args+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET, kwds);
        }
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyLong_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (unlikely(!PyLong_Check(x))) {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Long(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyLong_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 2 * PyLong_SHIFT)) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 3 * PyLong_SHIFT)) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 4 * PyLong_SHIFT)) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (long) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(long) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(long) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(long) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(long) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(long) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        long val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (long) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (long) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (long) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (long) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(long) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((long) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(long) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((long) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((long) 1) << (sizeof(long) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (long) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = __Pyx_PyType_GetSlot(a, tp_base, PyTypeObject*);
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (cls == a || cls == b) return 1;
    mro = cls->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            PyObject *base = PyTuple_GET_ITEM(mro, i);
            if (base == (PyObject *)a || base == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(cls, a) || __Pyx_InBases(cls, b);
}
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    if (exc_type1) {
        return __Pyx_IsAnySubtype2((PyTypeObject*)err, (PyTypeObject*)exc_type1, (PyTypeObject*)exc_type2);
    } else {
        return __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
}
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* GetRuntimeVersion */
static unsigned long __Pyx_get_runtime_version(void) {
#if __PYX_LIMITED_VERSION_HEX >= 0x030B00A4
    return Py_Version & ~0xFFUL;
#else
    static unsigned long __Pyx_cached_runtime_version = 0;
    if (__Pyx_cached_runtime_version == 0) {
        const char* rt_version = Py_GetVersion();
        unsigned long version = 0;
        unsigned long factor = 0x01000000UL;
        unsigned int digit = 0;
        int i = 0;
        while (factor) {
            while ('0' <= rt_version[i] && rt_version[i] <= '9') {
                digit = digit * 10 + (unsigned int) (rt_version[i] - '0');
                ++i;
            }
            version += factor * digit;
            if (rt_version[i] != '.')
                break;
            digit = 0;
            factor >>= 8;
            ++i;
        }
        __Pyx_cached_runtime_version = version;
    }
    return __Pyx_cached_runtime_version;
#endif
}

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer) {
    const unsigned long MAJOR_MINOR = 0xFFFF0000UL;
    if ((rt_version & MAJOR_MINOR) == (ct_version & MAJOR_MINOR))
        return 0;
    if (likely(allow_newer && (rt_version & MAJOR_MINOR) > (ct_version & MAJOR_MINOR)))
        return 1;
    {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compile time Python version %d.%d "
                      "of module '%.100s' "
                      "%s "
                      "runtime version %d.%d",
                       (int) (ct_version >> 24), (int) ((ct_version >> 16) & 0xFF),
                       __Pyx_MODULE_NAME,
                       (allow_newer) ? "was newer than" : "does not match",
                       (int) (rt_version >> 24), (int) ((rt_version >> 16) & 0xFF)
       );
        return PyErr_WarnEx(NULL, message, 1);
    }
}

/* NewCodeObj */
#if CYTHON_COMPILING_IN_LIMITED_API
    static PyObject* __Pyx__PyCode_New(int a, int p, int k, int l, int s, int f,
                                       PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                       PyObject *fv, PyObject *cell, PyObject* fn,
                                       PyObject *name, int fline, PyObject *lnos) {
        PyObject *exception_table = NULL;
        PyObject *types_module=NULL, *code_type=NULL, *result=NULL;
        #if __PYX_LIMITED_VERSION_HEX < 0x030B0000
        PyObject *version_info;
        PyObject *py_minor_version = NULL;
        #endif
        long minor_version = 0;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        #if __PYX_LIMITED_VERSION_HEX >= 0x030B0000
        minor_version = 11;
        #else
        if (!(version_info = PySys_GetObject("version_info"))) goto end;
        if (!(py_minor_version = PySequence_GetItem(version_info, 1))) goto end;
        minor_version = PyLong_AsLong(py_minor_version);
        Py_DECREF(py_minor_version);
        if (minor_version == -1 && PyErr_Occurred()) goto end;
        #endif
        if (!(types_module = PyImport_ImportModule("types"))) goto end;
        if (!(code_type = PyObject_GetAttrString(types_module, "CodeType"))) goto end;
        if (minor_version <= 7) {
            (void)p;
            result = PyObject_CallFunction(code_type, "iiiiiOOOOOOiOO", a, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else if (minor_version <= 10) {
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else {
            if (!(exception_table = PyBytes_FromStringAndSize(NULL, 0))) goto end;
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, name, fline, lnos, exception_table, fv, cell);
        }
    end:
        Py_XDECREF(code_type);
        Py_XDECREF(exception_table);
        Py_XDECREF(types_module);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return result;
    }
#elif PY_VERSION_HEX >= 0x030B0000
  static PyCodeObject* __Pyx__PyCode_New(int a, int p, int k, int l, int s, int f,
                                         PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                         PyObject *fv, PyObject *cell, PyObject* fn,
                                         PyObject *name, int fline, PyObject *lnos) {
    PyCodeObject *result;
    result =
      #if PY_VERSION_HEX >= 0x030C0000
        PyUnstable_Code_NewWithPosOnlyArgs
      #else
        PyCode_NewWithPosOnlyArgs
      #endif
        (a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, name, fline, lnos, __pyx_mstate_global->__pyx_empty_bytes);
    return result;
  }
#elif PY_VERSION_HEX >= 0x030800B2 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx__PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_NewWithPosOnlyArgs(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx__PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
static PyObject* __Pyx_PyCode_New(
        __Pyx_PyCode_New_function_description descr,
        PyObject **varnames,
        PyObject* filename,
        PyObject *funcname,
        const char *line_table,
        PyObject *tuple_dedup_map
) {
    PyObject *code_obj = NULL, *varnames_tuple_dedup = NULL, *code_bytes = NULL, *line_table_bytes = NULL;
    Py_ssize_t var_count = (Py_ssize_t) descr.nlocals;
    PyObject *varnames_tuple = PyTuple_New(var_count);
    if (unlikely(!varnames_tuple)) return NULL;
    for (Py_ssize_t i=0; i < var_count; i++) {
        Py_INCREF(varnames[i]);
        if (__Pyx_PyTuple_SET_ITEM(varnames_tuple, i, varnames[i]) != (0)) goto done;
    }
    #if CYTHON_COMPILING_IN_LIMITED_API
    varnames_tuple_dedup = PyDict_GetItem(tuple_dedup_map, varnames_tuple);
    if (!varnames_tuple_dedup) {
        if (unlikely(PyDict_SetItem(tuple_dedup_map, varnames_tuple, varnames_tuple) < 0)) goto done;
        varnames_tuple_dedup = varnames_tuple;
    }
    #else
    varnames_tuple_dedup = PyDict_SetDefault(tuple_dedup_map, varnames_tuple, varnames_tuple);
    if (unlikely(!varnames_tuple_dedup)) goto done;
    #endif
    #if CYTHON_AVOID_BORROWED_REFS
    Py_INCREF(varnames_tuple_dedup);
    #endif
    if (__PYX_LIMITED_VERSION_HEX >= (0x030b0000) && line_table != NULL) {
        line_table_bytes = PyBytes_FromStringAndSize(line_table, descr.line_table_length);
        if (unlikely(!line_table_bytes)) goto done;
        Py_ssize_t code_len = (descr.line_table_length * 2 + 4) & ~3;
        code_bytes = PyBytes_FromStringAndSize(NULL, code_len);
        if (unlikely(!code_bytes)) goto done;
        char* c_code_bytes = PyBytes_AsString(code_bytes);
        if (unlikely(!c_code_bytes)) goto done;
        memset(c_code_bytes, 0, (size_t) code_len);
    }
    code_obj = (PyObject*) __Pyx__PyCode_New(
        (int) descr.argcount,
        (int) descr.num_posonly_args,
        (int) descr.num_kwonly_args,
        (int) descr.nlocals,
        0,
        (int) descr.flags,
        code_bytes ? code_bytes : __pyx_mstate_global->__pyx_empty_bytes,
        __pyx_mstate_global->__pyx_empty_tuple,
        __pyx_mstate_global->__pyx_empty_tuple,
        varnames_tuple_dedup,
        __pyx_mstate_global->__pyx_empty_tuple,
        __pyx_mstate_global->__pyx_empty_tuple,
        filename,
        funcname,
        (int) descr.first_line,
        (__PYX_LIMITED_VERSION_HEX >= (0x030b0000)) ? line_table_bytes : __pyx_mstate_global->__pyx_empty_bytes
    );
done:
    Py_XDECREF(code_bytes);
    Py_XDECREF(line_table_bytes);
    #if CYTHON_AVOID_BORROWED_REFS
    Py_XDECREF(varnames_tuple_dedup);
    #endif
    Py_DECREF(varnames_tuple);
    return code_obj;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry const *t, PyObject **target, const char* const* encoding_names) {
    while (t->s) {
        PyObject *str;
        if (t->is_unicode) {
            if (t->intern) {
                str = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                str = PyUnicode_Decode(t->s, t->n - 1, encoding_names[t->encoding], NULL);
            } else {
                str = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            str = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        if (!str)
            return -1;
        *target = str;
        if (PyObject_Hash(str) == -1)
            return -1;
        ++t;
        ++target;
    }
    return 0;
}

#include <string.h>
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s) {
    size_t len = strlen(s);
    if (unlikely(len > (size_t) PY_SSIZE_T_MAX)) {
        PyErr_SetString(PyExc_OverflowError, "byte string is too long");
        return -1;
    }
    return (Py_ssize_t) len;
}
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return __Pyx_PyUnicode_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return PyByteArray_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_UTF8
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if CYTHON_COMPILING_IN_LIMITED_API
    {
        const char* result;
        Py_ssize_t unicode_length;
        CYTHON_MAYBE_UNUSED_VAR(unicode_length); // only for __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        #if __PYX_LIMITED_VERSION_HEX < 0x030A0000
        if (unlikely(PyArg_Parse(o, "s#", &result, length) < 0)) return NULL;
        #else
        result = PyUnicode_AsUTF8AndSize(o, length);
        #endif
        #if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        unicode_length = PyUnicode_GetLength(o);
        if (unlikely(unicode_length < 0)) return NULL;
        if (unlikely(unicode_length != *length)) {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
        #endif
        return result;
    }
#else
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
}
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_UTF8
    if (PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY && !CYTHON_COMPILING_IN_LIMITED_API) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_LongWrongResultType(PyObject* result) {
    __Pyx_TypeName result_type_name = __Pyx_PyType_GetName(Py_TYPE(result));
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ").  "
                "The ability to return an instance of a strict subclass of int is deprecated, "
                "and may be removed in a future version of Python.",
                result_type_name)) {
            __Pyx_DECREF_TypeName(result_type_name);
            Py_DECREF(result);
            return NULL;
        }
        __Pyx_DECREF_TypeName(result_type_name);
        return result;
    }
    PyErr_Format(PyExc_TypeError,
                 "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ")",
                 result_type_name);
    __Pyx_DECREF_TypeName(result_type_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Long(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  PyObject *res = NULL;
  if (likely(PyLong_Check(x)))
      return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  if (likely(m && m->nb_int)) {
      res = m->nb_int(x);
  }
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
      res = PyNumber_Long(x);
  }
#endif
  if (likely(res)) {
      if (unlikely(!PyLong_CheckExact(res))) {
          return __Pyx_PyNumber_LongWrongResultType(res);
      }
  }
  else if (!PyErr_Occurred()) {
      PyErr_SetString(PyExc_TypeError,
                      "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(__Pyx_PyLong_IsCompact(b))) {
        return __Pyx_PyLong_CompactValue(b);
    } else {
      const digit* digits = __Pyx_PyLong_Digits(b);
      const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(b);
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyLong_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyLong_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyLong_FromSize_t(size_t ival) {
    return PyLong_FromSize_t(ival);
}


/* #### Code section: utility_code_pragmas_end ### */
#ifdef _MSC_VER
#pragma warning( pop )
#endif



/* #### Code section: end ### */
#endif /* Py_PYTHON_H */
