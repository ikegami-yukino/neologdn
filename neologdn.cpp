/* Generated by Cython 3.0.10 */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#if defined(CYTHON_LIMITED_API) && 0
  #ifndef Py_LIMITED_API
    #if CYTHON_LIMITED_API+0 > 0x03030000
      #define Py_LIMITED_API CYTHON_LIMITED_API
    #else
      #define Py_LIMITED_API 0x03030000
    #endif
  #endif
#endif

#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02070000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.7+ or Python 3.3+.
#else
#if defined(CYTHON_LIMITED_API) && CYTHON_LIMITED_API
#define __PYX_EXTRA_ABI_MODULE_NAME "limited"
#else
#define __PYX_EXTRA_ABI_MODULE_NAME ""
#endif
#define CYTHON_ABI "3_0_10" __PYX_EXTRA_ABI_MODULE_NAME
#define __PYX_ABI_MODULE_NAME "_cython_" CYTHON_ABI
#define __PYX_TYPE_MODULE_PREFIX __PYX_ABI_MODULE_NAME "."
#define CYTHON_HEX_VERSION 0x03000AF0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(_WIN32) && !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #define HAVE_LONG_LONG
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#define __PYX_LIMITED_VERSION_HEX PY_VERSION_HEX
#if defined(GRAALVM_PYTHON)
  /* For very preliminary testing purposes. Most variables are set the same as PyPy.
     The existence of this section does not imply that anything works or is even tested */
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(PYPY_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #if PY_VERSION_HEX < 0x03090000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1 && PYPY_VERSION_NUM >= 0x07030C00)
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(CYTHON_LIMITED_API)
  #ifdef Py_LIMITED_API
    #undef __PYX_LIMITED_VERSION_HEX
    #define __PYX_LIMITED_VERSION_HEX Py_LIMITED_API
  #endif
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 1
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_CLINE_IN_TRACEBACK
  #define CYTHON_CLINE_IN_TRACEBACK 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 1
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #endif
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 1
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(Py_GIL_DISABLED) || defined(Py_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL 1
  #endif
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
  #ifndef CYTHON_USE_FREELISTS
    #define CYTHON_USE_FREELISTS 0
  #endif
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #ifndef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_GIL
    #define CYTHON_FAST_GIL (PY_MAJOR_VERSION < 3 || PY_VERSION_HEX >= 0x03060000 && PY_VERSION_HEX < 0x030C00A6)
  #endif
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL (PY_VERSION_HEX >= 0x030700A1)
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #if PY_VERSION_HEX < 0x030400a1
    #undef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #elif !defined(CYTHON_USE_TP_FINALIZE)
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #if PY_VERSION_HEX < 0x030600B1
    #undef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS 0
  #elif !defined(CYTHON_USE_DICT_VERSIONS)
    #define CYTHON_USE_DICT_VERSIONS  (PY_VERSION_HEX < 0x030C00A5)
  #endif
  #if PY_VERSION_HEX < 0x030700A3
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK 1
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
  #ifndef CYTHON_USE_FREELISTS
    #define CYTHON_USE_FREELISTS 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if !defined(CYTHON_VECTORCALL)
#define CYTHON_VECTORCALL  (CYTHON_FAST_PYCCALL && PY_VERSION_HEX >= 0x030800B1)
#endif
#define CYTHON_BACKPORT_VECTORCALL (CYTHON_METH_FASTCALL && PY_VERSION_HEX < 0x030800B1)
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(maybe_unused) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(maybe_unused)
        #define CYTHON_UNUSED [[maybe_unused]]
      #endif
    #endif
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
  #define CYTHON_MAYBE_UNUSED_VAR(x) CYTHON_UNUSED_VAR(x)
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_USE_CPP_STD_MOVE
  #if defined(__cplusplus) && (\
    __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600))
    #define CYTHON_USE_CPP_STD_MOVE 1
  #else
    #define CYTHON_USE_CPP_STD_MOVE 0
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
            typedef unsigned char     uint8_t;
            typedef unsigned short    uint16_t;
            typedef unsigned int      uint32_t;
        #else
            typedef unsigned __int8   uint8_t;
            typedef unsigned __int16  uint16_t;
            typedef unsigned __int32  uint32_t;
        #endif
    #endif
    #if _MSC_VER < 1300
        #ifdef _WIN64
            typedef unsigned long long  __pyx_uintptr_t;
        #else
            typedef unsigned int        __pyx_uintptr_t;
        #endif
    #else
        #ifdef _WIN64
            typedef unsigned __int64    __pyx_uintptr_t;
        #else
            typedef unsigned __int32    __pyx_uintptr_t;
        #endif
    #endif
#else
    #include <stdint.h>
    typedef uintptr_t  __pyx_uintptr_t;
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(fallthrough) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(fallthrough)
        #define CYTHON_FALLTHROUGH [[fallthrough]]
      #endif
    #endif
    #ifndef CYTHON_FALLTHROUGH
      #if __has_cpp_attribute(clang::fallthrough)
        #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
      #elif __has_cpp_attribute(gnu::fallthrough)
        #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
      #endif
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif
#ifdef __cplusplus
  template <typename T>
  struct __PYX_IS_UNSIGNED_IMPL {static const bool value = T(0) < T(-1);};
  #define __PYX_IS_UNSIGNED(type) (__PYX_IS_UNSIGNED_IMPL<type>::value)
#else
  #define __PYX_IS_UNSIGNED(type) (((type)-1) > 0)
#endif
#if CYTHON_COMPILING_IN_PYPY == 1
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x030A0000)
#else
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000)
#endif
#define __PYX_REINTERPRET_FUNCION(func_pointer, other_pointer) ((func_pointer)(void(*)(void))(other_pointer))

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(const U& other) const { return *ptr == other; }
    template<typename U> bool operator !=(const U& other) const { return *ptr != other; }
    template<typename U> bool operator==(const __Pyx_FakeReference<U>& other) const { return *ptr == *other.ptr; }
    template<typename U> bool operator!=(const __Pyx_FakeReference<U>& other) const { return *ptr != *other.ptr; }
  private:
    T *ptr;
};

#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_DefaultClassType PyClass_Type
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if CYTHON_COMPILING_IN_LIMITED_API
    static CYTHON_INLINE PyObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *exception_table = NULL;
        PyObject *types_module=NULL, *code_type=NULL, *result=NULL;
        #if __PYX_LIMITED_VERSION_HEX < 0x030B0000
        PyObject *version_info;
        PyObject *py_minor_version = NULL;
        #endif
        long minor_version = 0;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        #if __PYX_LIMITED_VERSION_HEX >= 0x030B0000
        minor_version = 11;
        #else
        if (!(version_info = PySys_GetObject("version_info"))) goto end;
        if (!(py_minor_version = PySequence_GetItem(version_info, 1))) goto end;
        minor_version = PyLong_AsLong(py_minor_version);
        Py_DECREF(py_minor_version);
        if (minor_version == -1 && PyErr_Occurred()) goto end;
        #endif
        if (!(types_module = PyImport_ImportModule("types"))) goto end;
        if (!(code_type = PyObject_GetAttrString(types_module, "CodeType"))) goto end;
        if (minor_version <= 7) {
            (void)p;
            result = PyObject_CallFunction(code_type, "iiiiiOOOOOOiOO", a, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else if (minor_version <= 10) {
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else {
            if (!(exception_table = PyBytes_FromStringAndSize(NULL, 0))) goto end;
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, name, fline, lnos, exception_table, fv, cell);
        }
    end:
        Py_XDECREF(code_type);
        Py_XDECREF(exception_table);
        Py_XDECREF(types_module);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return result;
    }
    #ifndef CO_OPTIMIZED
    #define CO_OPTIMIZED 0x0001
    #endif
    #ifndef CO_NEWLOCALS
    #define CO_NEWLOCALS 0x0002
    #endif
    #ifndef CO_VARARGS
    #define CO_VARARGS 0x0004
    #endif
    #ifndef CO_VARKEYWORDS
    #define CO_VARKEYWORDS 0x0008
    #endif
    #ifndef CO_ASYNC_GENERATOR
    #define CO_ASYNC_GENERATOR 0x0200
    #endif
    #ifndef CO_GENERATOR
    #define CO_GENERATOR 0x0020
    #endif
    #ifndef CO_COROUTINE
    #define CO_COROUTINE 0x0080
    #endif
#elif PY_VERSION_HEX >= 0x030B0000
  static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
    PyCodeObject *result;
    PyObject *empty_bytes = PyBytes_FromStringAndSize("", 0);
    if (!empty_bytes) return NULL;
    result =
      #if PY_VERSION_HEX >= 0x030C0000
        PyUnstable_Code_NewWithPosOnlyArgs
      #else
        PyCode_NewWithPosOnlyArgs
      #endif
        (a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, name, fline, lnos, empty_bytes);
    Py_DECREF(empty_bytes);
    return result;
  }
#elif PY_VERSION_HEX >= 0x030800B2 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_NewWithPosOnlyArgs(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#endif
#if PY_VERSION_HEX >= 0x030900A4 || defined(Py_IS_TYPE)
  #define __Pyx_IS_TYPE(ob, type) Py_IS_TYPE(ob, type)
#else
  #define __Pyx_IS_TYPE(ob, type) (((const PyObject*)ob)->ob_type == (type))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_Is)
  #define __Pyx_Py_Is(x, y)  Py_Is(x, y)
#else
  #define __Pyx_Py_Is(x, y) ((x) == (y))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsNone)
  #define __Pyx_Py_IsNone(ob) Py_IsNone(ob)
#else
  #define __Pyx_Py_IsNone(ob) __Pyx_Py_Is((ob), Py_None)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsTrue)
  #define __Pyx_Py_IsTrue(ob) Py_IsTrue(ob)
#else
  #define __Pyx_Py_IsTrue(ob) __Pyx_Py_Is((ob), Py_True)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsFalse)
  #define __Pyx_Py_IsFalse(ob) Py_IsFalse(ob)
#else
  #define __Pyx_Py_IsFalse(ob) __Pyx_Py_Is((ob), Py_False)
#endif
#define __Pyx_NoneAsNull(obj)  (__Pyx_Py_IsNone(obj) ? NULL : (obj))
#if PY_VERSION_HEX >= 0x030900F0 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyObject_GC_IsFinalized(o) PyObject_GC_IsFinalized(o)
#else
  #define __Pyx_PyObject_GC_IsFinalized(o) _PyGC_FINALIZED(o)
#endif
#ifndef CO_COROUTINE
  #define CO_COROUTINE 0x80
#endif
#ifndef CO_ASYNC_GENERATOR
  #define CO_ASYNC_GENERATOR 0x200
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef Py_TPFLAGS_SEQUENCE
  #define Py_TPFLAGS_SEQUENCE 0
#endif
#ifndef Py_TPFLAGS_MAPPING
  #define Py_TPFLAGS_MAPPING 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #if PY_VERSION_HEX >= 0x030d00A4
  #  define __Pyx_PyCFunctionFast PyCFunctionFast
  #  define __Pyx_PyCFunctionFastWithKeywords PyCFunctionFastWithKeywords
  #else
  #  define __Pyx_PyCFunctionFast _PyCFunctionFast
  #  define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
  #endif
#endif
#if CYTHON_METH_FASTCALL
  #define __Pyx_METH_FASTCALL METH_FASTCALL
  #define __Pyx_PyCFunction_FastCall __Pyx_PyCFunctionFast
  #define __Pyx_PyCFunction_FastCallWithKeywords __Pyx_PyCFunctionFastWithKeywords
#else
  #define __Pyx_METH_FASTCALL METH_VARARGS
  #define __Pyx_PyCFunction_FastCall PyCFunction
  #define __Pyx_PyCFunction_FastCallWithKeywords PyCFunctionWithKeywords
#endif
#if CYTHON_VECTORCALL
  #define __pyx_vectorcallfunc vectorcallfunc
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  PY_VECTORCALL_ARGUMENTS_OFFSET
  #define __Pyx_PyVectorcall_NARGS(n)  PyVectorcall_NARGS((size_t)(n))
#elif CYTHON_BACKPORT_VECTORCALL
  typedef PyObject *(*__pyx_vectorcallfunc)(PyObject *callable, PyObject *const *args,
                                            size_t nargsf, PyObject *kwnames);
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  ((size_t)1 << (8 * sizeof(size_t) - 1))
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(((size_t)(n)) & ~__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET))
#else
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  0
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(n))
#endif
#if PY_MAJOR_VERSION >= 0x030900B1
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_CheckExact(func)
#else
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_Check(func)
#endif
#define __Pyx_CyOrPyCFunction_Check(func)  PyCFunction_Check(func)
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  (((PyCFunctionObject*)(func))->m_ml->ml_meth)
#elif !CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  PyCFunction_GET_FUNCTION(func)
#endif
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FLAGS(func)  (((PyCFunctionObject*)(func))->m_ml->ml_flags)
static CYTHON_INLINE PyObject* __Pyx_CyOrPyCFunction_GET_SELF(PyObject *func) {
    return (__Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_STATIC) ? NULL : ((PyCFunctionObject*)func)->m_self;
}
#endif
static CYTHON_INLINE int __Pyx__IsSameCFunction(PyObject *func, void *cfunc) {
#if CYTHON_COMPILING_IN_LIMITED_API
    return PyCFunction_Check(func) && PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
#else
    return PyCFunction_Check(func) && PyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
#endif
}
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCFunction(func, cfunc)
#if __PYX_LIMITED_VERSION_HEX < 0x030900B1
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  ((void)m, PyType_FromSpecWithBases(s, b))
  typedef PyObject *(*__Pyx_PyCMethod)(PyObject *, PyTypeObject *, PyObject *const *, size_t, PyObject *);
#else
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  PyType_FromModuleAndSpec(m, s, b)
  #define __Pyx_PyCMethod  PyCMethod
#endif
#ifndef METH_METHOD
  #define METH_METHOD 0x200
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyThreadState_Current PyThreadState_Get()
#elif !CYTHON_FAST_THREAD_STATE
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyThreadState_Current PyThreadState_GetUnchecked()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE void *__Pyx_PyModule_GetState(PyObject *op)
{
    void *result;
    result = PyModule_GetState(op);
    if (!result)
        Py_FatalError("Couldn't find the module state");
    return result;
}
#endif
#define __Pyx_PyObject_GetSlot(obj, name, func_ctype)  __Pyx_PyType_GetSlot(Py_TYPE(obj), name, func_ctype)
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((func_ctype) PyType_GetSlot((type), Py_##name))
#else
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((type)->name)
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if PY_MAJOR_VERSION < 3
    #if CYTHON_COMPILING_IN_PYPY
        #if PYPY_VERSION_NUM < 0x07030600
            #if defined(__cplusplus) && __cplusplus >= 201402L
                [[deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")]]
            #elif defined(__GNUC__) || defined(__clang__)
                __attribute__ ((__deprecated__("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")))
            #elif defined(_MSC_VER)
                __declspec(deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6"))
            #endif
            static CYTHON_INLINE int PyGILState_Check(void) {
                return 0;
            }
        #else  // PYPY_VERSION_NUM < 0x07030600
        #endif  // PYPY_VERSION_NUM < 0x07030600
    #else
        static CYTHON_INLINE int PyGILState_Check(void) {
            PyThreadState * tstate = _PyThreadState_Current;
            return tstate && (tstate == PyGILState_GetThisThreadState());
        }
    #endif
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030d0000 || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX > 0x030600B4 && PY_VERSION_HEX < 0x030d0000 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStrWithError(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStr(PyObject *dict, PyObject *name) {
    PyObject *res = __Pyx_PyDict_GetItemStrWithError(dict, name);
    if (res == NULL) PyErr_Clear();
    return res;
}
#elif PY_MAJOR_VERSION >= 3 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000)
#define __Pyx_PyDict_GetItemStrWithError  PyDict_GetItemWithError
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#else
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStrWithError(PyObject *dict, PyObject *name) {
#if CYTHON_COMPILING_IN_PYPY
    return PyDict_GetItem(dict, name);
#else
    PyDictEntry *ep;
    PyDictObject *mp = (PyDictObject*) dict;
    long hash = ((PyStringObject *) name)->ob_shash;
    assert(hash != -1);
    ep = (mp->ma_lookup)(mp, name, hash);
    if (ep == NULL) {
        return NULL;
    }
    return ep->me_value;
#endif
}
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#endif
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_GetFlags(tp)   (((PyTypeObject *)tp)->tp_flags)
  #define __Pyx_PyType_HasFeature(type, feature)  ((__Pyx_PyType_GetFlags(type) & (feature)) != 0)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  (Py_TYPE(obj)->tp_iternext)
#else
  #define __Pyx_PyType_GetFlags(tp)   (PyType_GetFlags((PyTypeObject *)tp))
  #define __Pyx_PyType_HasFeature(type, feature)  PyType_HasFeature(type, feature)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  PyIter_Next
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyObject_GenericSetAttr((PyObject*)tp, k, v)
#else
  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyDict_SetItem(tp->tp_dict, k, v)
#endif
#if CYTHON_USE_TYPE_SPECS && PY_VERSION_HEX >= 0x03080000
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  {\
    PyTypeObject *type = Py_TYPE((PyObject*)obj);\
    assert(__Pyx_PyType_HasFeature(type, Py_TPFLAGS_HEAPTYPE));\
    PyObject_GC_Del(obj);\
    Py_DECREF(type);\
}
#else
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  PyObject_GC_Del(obj)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GetLength(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_ReadChar(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((void)u, 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((void)u, (0))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)u)
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)k, PyUnicode_ReadChar((PyObject*)(d), i))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GetLength(u))
#elif PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         ((int)PyUnicode_KIND(u))
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, (Py_UCS4) ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535U : 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((int)sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = (Py_UNICODE) ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #if !defined(PyUnicode_DecodeUnicodeEscape)
    #define PyUnicode_DecodeUnicodeEscape(s, size, errors)  PyUnicode_Decode(s, size, "unicode_escape", errors)
  #endif
  #if !defined(PyUnicode_Contains) || (PY_MAJOR_VERSION == 2 && PYPY_VERSION_NUM < 0x07030500)
    #undef PyUnicode_Contains
    #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
  #endif
  #if !defined(PyByteArray_Check)
    #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
  #endif
  #if !defined(PyObject_Format)
    #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
  #endif
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#if CYTHON_COMPILING_IN_CPYTHON
  #define __Pyx_PySequence_ListKeepNew(obj)\
    (likely(PyList_CheckExact(obj) && Py_REFCNT(obj) == 1) ? __Pyx_NewRef(obj) : PySequence_List(obj))
#else
  #define __Pyx_PySequence_ListKeepNew(obj)  PySequence_List(obj)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        __Pyx_IS_TYPE(obj, &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_ITEM(o, i) PySequence_ITEM(o, i)
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) (PyTuple_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyList_SET_ITEM(o, i, v) (PyList_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_GET_SIZE(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_GET_SIZE(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_GET_SIZE(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_GET_SIZE(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_GET_SIZE(o)
#else
  #define __Pyx_PySequence_ITEM(o, i) PySequence_GetItem(o, i)
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) PyTuple_SetItem(o, i, v)
  #define __Pyx_PyList_SET_ITEM(o, i, v) PyList_SetItem(o, i, v)
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_Size(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_Size(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_Size(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_Size(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_Size(o)
#endif
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyImport_AddModuleRef(name) PyImport_AddModuleRef(name)
#else
  static CYTHON_INLINE PyObject *__Pyx_PyImport_AddModuleRef(const char *name) {
      PyObject *module = PyImport_AddModule(name);
      Py_XINCREF(module);
      return module;
  }
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define __Pyx_Py3Int_Check(op)       PyLong_Check(op)
  #define __Pyx_Py3Int_CheckExact(op)  PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#else
  #define __Pyx_Py3Int_Check(op)       (PyLong_Check(op) || PyInt_Check(op))
  #define __Pyx_Py3Int_CheckExact(op)  (PyLong_CheckExact(op) || PyInt_CheckExact(op))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__;  (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifdef CYTHON_EXTERN_C
    #undef __PYX_EXTERN_C
    #define __PYX_EXTERN_C CYTHON_EXTERN_C
#elif defined(__PYX_EXTERN_C)
    #ifdef _MSC_VER
    #pragma message ("Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.")
    #else
    #warning Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.
    #endif
#else
    #define __PYX_EXTERN_C extern "C++"
#endif

#define __PYX_HAVE__neologdn
#define __PYX_HAVE_API__neologdn
/* Early includes */
#include <string.h>
#include <stdlib.h>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <utility>

    #if __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600)
    // move should be defined for these versions of MSVC, but __cplusplus isn't set usefully
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include <unordered_map>
#include <unordered_set>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s);
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char*);
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#define __Pyx_PyUnicode_FromOrdinal(o)       PyUnicode_FromOrdinal((int)o)
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_VERSION_HEX >= 0x030C00A7
  #ifndef _PyLong_SIGN_MASK
    #define _PyLong_SIGN_MASK 3
  #endif
  #ifndef _PyLong_NON_SIZE_BITS
    #define _PyLong_NON_SIZE_BITS 3
  #endif
  #define __Pyx_PyLong_Sign(x)  (((PyLongObject*)x)->long_value.lv_tag & _PyLong_SIGN_MASK)
  #define __Pyx_PyLong_IsNeg(x)  ((__Pyx_PyLong_Sign(x) & 2) != 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (!__Pyx_PyLong_IsNeg(x))
  #define __Pyx_PyLong_IsZero(x)  (__Pyx_PyLong_Sign(x) & 1)
  #define __Pyx_PyLong_IsPos(x)  (__Pyx_PyLong_Sign(x) == 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  (__Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  ((Py_ssize_t) (((PyLongObject*)x)->long_value.lv_tag >> _PyLong_NON_SIZE_BITS))
  #define __Pyx_PyLong_SignedDigitCount(x)\
        ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * __Pyx_PyLong_DigitCount(x))
  #if defined(PyUnstable_Long_IsCompact) && defined(PyUnstable_Long_CompactValue)
    #define __Pyx_PyLong_IsCompact(x)     PyUnstable_Long_IsCompact((PyLongObject*) x)
    #define __Pyx_PyLong_CompactValue(x)  PyUnstable_Long_CompactValue((PyLongObject*) x)
  #else
    #define __Pyx_PyLong_IsCompact(x)     (((PyLongObject*)x)->long_value.lv_tag < (2 << _PyLong_NON_SIZE_BITS))
    #define __Pyx_PyLong_CompactValue(x)  ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * (Py_ssize_t) __Pyx_PyLong_Digits(x)[0])
  #endif
  typedef Py_ssize_t  __Pyx_compact_pylong;
  typedef size_t  __Pyx_compact_upylong;
  #else
  #define __Pyx_PyLong_IsNeg(x)  (Py_SIZE(x) < 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (Py_SIZE(x) >= 0)
  #define __Pyx_PyLong_IsZero(x)  (Py_SIZE(x) == 0)
  #define __Pyx_PyLong_IsPos(x)  (Py_SIZE(x) > 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  ((Py_SIZE(x) == 0) ? 0 : __Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  __Pyx_sst_abs(Py_SIZE(x))
  #define __Pyx_PyLong_SignedDigitCount(x)  Py_SIZE(x)
  #define __Pyx_PyLong_IsCompact(x)  (Py_SIZE(x) == 0 || Py_SIZE(x) == 1 || Py_SIZE(x) == -1)
  #define __Pyx_PyLong_CompactValue(x)\
        ((Py_SIZE(x) == 0) ? (sdigit) 0 : ((Py_SIZE(x) < 0) ? -(sdigit)__Pyx_PyLong_Digits(x)[0] : (sdigit)__Pyx_PyLong_Digits(x)[0]))
  typedef sdigit  __Pyx_compact_pylong;
  typedef digit  __Pyx_compact_upylong;
  #endif
  #if PY_VERSION_HEX >= 0x030C00A5
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->long_value.ob_digit)
  #else
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->ob_digit)
  #endif
#endif
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
#include <string.h>
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = (char) c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#include <string.h>
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_m = NULL;
#endif
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm = __FILE__;
static const char *__pyx_filename;

/* #### Code section: filename_table ### */

static const char *__pyx_f[] = {
  "neologdn.pyx",
};
/* #### Code section: utility_code_proto_before_types ### */
/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* #### Code section: numeric_typedefs ### */
/* #### Code section: complex_type_declarations ### */
/* #### Code section: type_declarations ### */

/*--- Type declarations ---*/
struct __pyx_opt_args_8neologdn_shorten_repeat;
struct __pyx_opt_args_8neologdn_normalize;

/* "neologdn.pyx":110
 * 
 * 
 * cpdef unicode shorten_repeat(unicode text, int repeat_threshould, int max_repeat_substr_length=8):             # <<<<<<<<<<<<<<
 *     cdef int text_length, i, repeat_length, right_start, right_end, num_repeat_substrs
 *     cdef int upper_repeat_substr_length
 */
struct __pyx_opt_args_8neologdn_shorten_repeat {
  int __pyx_n;
  int max_repeat_substr_length;
};

/* "neologdn.pyx":140
 * 
 * 
 * cpdef unicode normalize(unicode text, int repeat=0, bint remove_space=True,             # <<<<<<<<<<<<<<
 *                         int max_repeat_substr_length=8, unicode tilde='remove'):
 *     cdef Py_UCS4 *buf = <Py_UCS4 *>malloc(sizeof(Py_UCS4) * (len(text) + 1))
 */
struct __pyx_opt_args_8neologdn_normalize {
  int __pyx_n;
  int repeat;
  int remove_space;
  int max_repeat_substr_length;
  PyObject *tilde;
};
/* #### Code section: utility_code_proto ### */

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, Py_ssize_t);
    void (*DECREF)(void*, PyObject*, Py_ssize_t);
    void (*GOTREF)(void*, PyObject*, Py_ssize_t);
    void (*GIVEREF)(void*, PyObject*, Py_ssize_t);
    void* (*SetupContext)(const char*, Py_ssize_t, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__))
  #define __Pyx_RefNannyFinishContextNogil() __Pyx_RefNannyFinishContext()
#endif
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_XINCREF(r)  do { if((r) == NULL); else {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) == NULL); else {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) == NULL); else {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) == NULL); else {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContextNogil()
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_Py_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; Py_XDECREF(tmp);\
    } while (0)
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#if PY_VERSION_HEX >= 0x030C00A6
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->current_exception != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->current_exception ? (PyObject*) Py_TYPE(__pyx_tstate->current_exception) : (PyObject*) NULL)
#else
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->curexc_type != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->curexc_type)
#endif
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  (PyErr_Occurred() != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A6
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* DivInt[long].proto */
static CYTHON_INLINE long __Pyx_div_long(long, long);

/* PyUnicode_Substring.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_Substring(
            PyObject* text, Py_ssize_t start, Py_ssize_t stop);

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeConcatInPlace.proto */
# if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
    #if CYTHON_REFNANNY
        #define __Pyx_PyUnicode_ConcatInPlace(left, right) __Pyx_PyUnicode_ConcatInPlaceImpl(&left, right, __pyx_refnanny)
    #else
        #define __Pyx_PyUnicode_ConcatInPlace(left, right) __Pyx_PyUnicode_ConcatInPlaceImpl(&left, right)
    #endif
    static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **p_left, PyObject *right
        #if CYTHON_REFNANNY
        , void* __pyx_refnanny
        #endif
    );
#else
#define __Pyx_PyUnicode_ConcatInPlace __Pyx_PyUnicode_Concat
#endif
#define __Pyx_PyUnicode_ConcatInPlaceSafe(left, right) ((unlikely((left) == Py_None) || unlikely((right) == Py_None)) ?\
    PyNumber_InPlaceAdd(left, right) : __Pyx_PyUnicode_ConcatInPlace(left, right))

/* TupleAndListFromArray.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n);
#endif

/* fastcall.proto */
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_Arg_VARARGS(args, i) PySequence_GetItem(args, i)
#elif CYTHON_ASSUME_SAFE_MACROS
    #define __Pyx_Arg_VARARGS(args, i) PyTuple_GET_ITEM(args, i)
#else
    #define __Pyx_Arg_VARARGS(args, i) PyTuple_GetItem(args, i)
#endif
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_Arg_NewRef_VARARGS(arg) __Pyx_NewRef(arg)
    #define __Pyx_Arg_XDECREF_VARARGS(arg) Py_XDECREF(arg)
#else
    #define __Pyx_Arg_NewRef_VARARGS(arg) arg
    #define __Pyx_Arg_XDECREF_VARARGS(arg)
#endif
#define __Pyx_NumKwargs_VARARGS(kwds) PyDict_Size(kwds)
#define __Pyx_KwValues_VARARGS(args, nargs) NULL
#define __Pyx_GetKwValue_VARARGS(kw, kwvalues, s) __Pyx_PyDict_GetItemStrWithError(kw, s)
#define __Pyx_KwargsAsDict_VARARGS(kw, kwvalues) PyDict_Copy(kw)
#if CYTHON_METH_FASTCALL
    #define __Pyx_Arg_FASTCALL(args, i) args[i]
    #define __Pyx_NumKwargs_FASTCALL(kwds) PyTuple_GET_SIZE(kwds)
    #define __Pyx_KwValues_FASTCALL(args, nargs) ((args) + (nargs))
    static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
    CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues);
  #else
    #define __Pyx_KwargsAsDict_FASTCALL(kw, kwvalues) _PyStack_AsDict(kwvalues, kw)
  #endif
    #define __Pyx_Arg_NewRef_FASTCALL(arg) arg  /* no-op, __Pyx_Arg_FASTCALL is direct and this needs
                                                   to have the same reference counting */
    #define __Pyx_Arg_XDECREF_FASTCALL(arg)
#else
    #define __Pyx_Arg_FASTCALL __Pyx_Arg_VARARGS
    #define __Pyx_NumKwargs_FASTCALL __Pyx_NumKwargs_VARARGS
    #define __Pyx_KwValues_FASTCALL __Pyx_KwValues_VARARGS
    #define __Pyx_GetKwValue_FASTCALL __Pyx_GetKwValue_VARARGS
    #define __Pyx_KwargsAsDict_FASTCALL __Pyx_KwargsAsDict_VARARGS
    #define __Pyx_Arg_NewRef_FASTCALL(arg) __Pyx_Arg_NewRef_VARARGS(arg)
    #define __Pyx_Arg_XDECREF_FASTCALL(arg) __Pyx_Arg_XDECREF_VARARGS(arg)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_VARARGS(args, start), stop - start)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_FASTCALL(args, start), stop - start)
#else
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) PyTuple_GetSlice(args, start, stop)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) PyTuple_GetSlice(args, start, stop)
#endif

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,
    const char* function_name);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely(__Pyx_IS_TYPE(obj, type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* unicode_iter.proto */
static CYTHON_INLINE int __Pyx_init_unicode_iteration(
    PyObject* ustring, Py_ssize_t *length, void** data, int *kind);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  do {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  do {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* RaiseUnexpectedTypeError.proto */
static int __Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportDottedModule.proto */
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple);
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple);
#endif

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* IncludeStructmemberH.proto */
#include <structmember.h>

/* FixUpExtensionType.proto */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type);
#endif

/* FetchSharedCythonModule.proto */
static PyObject *__Pyx_FetchSharedCythonABIModule(void);

/* FetchCommonType.proto */
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);
#else
static PyTypeObject* __Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases);
#endif

/* PyMethodNew.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    PyObject *typesModule=NULL, *methodType=NULL, *result=NULL;
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    typesModule = PyImport_ImportModule("types");
    if (!typesModule) return NULL;
    methodType = PyObject_GetAttrString(typesModule, "MethodType");
    Py_DECREF(typesModule);
    if (!methodType) return NULL;
    result = PyObject_CallFunctionObjArgs(methodType, func, self, NULL);
    Py_DECREF(methodType);
    return result;
}
#elif PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    return PyMethod_New(func, self);
}
#else
    #define __Pyx_PyMethod_New PyMethod_New
#endif

/* PyVectorcallFastCallDict.proto */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw);
#endif

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CYFUNCTION_COROUTINE     0x08
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_CyFunction_GetClassObj(f)\
      (((__pyx_CyFunctionObject *) (f))->func_classobj)
#else
  #define __Pyx_CyFunction_GetClassObj(f)\
      ((PyObject*) ((PyCMethodObject *) (f))->mm_class)
#endif
#define __Pyx_CyFunction_SetClassObj(f, classobj)\
    __Pyx__CyFunction_SetClassObj((__pyx_CyFunctionObject *) (f), (classobj))
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject_HEAD
    PyObject *func;
#elif PY_VERSION_HEX < 0x030900B1
    PyCFunctionObject func;
#else
    PyCMethodObject func;
#endif
#if CYTHON_BACKPORT_VECTORCALL
    __pyx_vectorcallfunc func_vectorcall;
#endif
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_classobj;
#endif
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
    PyObject *func_is_coroutine;
} __pyx_CyFunctionObject;
#undef __Pyx_CyOrPyCFunction_Check
#define __Pyx_CyFunction_Check(obj)  __Pyx_TypeCheck(obj, __pyx_CyFunctionType)
#define __Pyx_CyOrPyCFunction_Check(obj)  __Pyx_TypeCheck2(obj, __pyx_CyFunctionType, &PyCFunction_Type)
#define __Pyx_CyFunction_CheckExact(obj)  __Pyx_IS_TYPE(obj, __pyx_CyFunctionType)
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc);
#undef __Pyx_IsSameCFunction
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCyOrCFunction(func, cfunc)
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(PyObject *module);
#if CYTHON_METH_FASTCALL
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
#if CYTHON_BACKPORT_VECTORCALL
#define __Pyx_CyFunction_func_vectorcall(f) (((__pyx_CyFunctionObject*)f)->func_vectorcall)
#else
#define __Pyx_CyFunction_func_vectorcall(f) (((PyCFunctionObject*)f)->vectorcall)
#endif
#endif

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);
#endif

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* UnicodeAsUCS4.proto */
static CYTHON_INLINE Py_UCS4 __Pyx_PyUnicode_AsPy_UCS4(PyObject*);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* GCCDiagnostics.proto */
#if !defined(__INTEL_COMPILER) && defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* ObjectAsUCS4.proto */
#define __Pyx_PyObject_AsPy_UCS4(x)\
    (likely(PyUnicode_Check(x)) ? __Pyx_PyUnicode_AsPy_UCS4(x) : __Pyx__PyObject_AsPy_UCS4(x))
static Py_UCS4 __Pyx__PyObject_AsPy_UCS4(PyObject*);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* FormatTypeName.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%U"
static __Pyx_TypeName __Pyx_PyType_GetName(PyTypeObject* tp);
#define __Pyx_DECREF_TypeName(obj) Py_XDECREF(obj)
#else
typedef const char *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%.200s"
#define __Pyx_PyType_GetName(tp) ((tp)->tp_name)
#define __Pyx_DECREF_TypeName(obj)
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) __Pyx_IsAnySubtype2(Py_TYPE(obj), (PyTypeObject *)type1, (PyTypeObject *)type2)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) (PyObject_TypeCheck(obj, (PyTypeObject *)type1) || PyObject_TypeCheck(obj, (PyTypeObject *)type2))
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyErr_ExceptionMatches2(err1, err2)  __Pyx_PyErr_GivenExceptionMatches2(__Pyx_PyErr_CurrentExceptionType(), err1, err2)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static unsigned long __Pyx_get_runtime_version(void);
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

/* #### Code section: module_declarations ### */

/* Module declarations from "libc.string" */

/* Module declarations from "libc.stdlib" */

/* Module declarations from "libcpp.utility" */

/* Module declarations from "libcpp.unordered_map" */

/* Module declarations from "libcpp.unordered_set" */

/* Module declarations from "neologdn" */
static std::unordered_map<Py_UCS4,Py_UCS4>  __pyx_v_8neologdn_conversion_map;
static std::unordered_map<Py_UCS4,Py_UCS4>  __pyx_v_8neologdn_kana_ten_map;
static std::unordered_map<Py_UCS4,Py_UCS4>  __pyx_v_8neologdn_kana_maru_map;
static std::unordered_set<Py_UCS4>  __pyx_v_8neologdn_blocks;
static std::unordered_set<Py_UCS4>  __pyx_v_8neologdn_basic_latin;
static PyObject *__pyx_f_8neologdn_py_ucs4_to_unicode(Py_UCS4 *, Py_ssize_t); /*proto*/
static PyObject *__pyx_f_8neologdn_shorten_repeat(PyObject *, int, int __pyx_skip_dispatch, struct __pyx_opt_args_8neologdn_shorten_repeat *__pyx_optional_args); /*proto*/
static PyObject *__pyx_f_8neologdn_normalize(PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_8neologdn_normalize *__pyx_optional_args); /*proto*/
/* #### Code section: typeinfo ### */
/* #### Code section: before_global_var ### */
#define __Pyx_MODULE_NAME "neologdn"
extern int __pyx_module_is_main_neologdn;
int __pyx_module_is_main_neologdn = 0;

/* Implementation of "neologdn" */
/* #### Code section: global_var ### */
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_map;
static PyObject *__pyx_builtin_chr;
/* #### Code section: string_decls ### */
static const char __pyx_k_[] = "*";
static const char __pyx_k_0[] = "0";
static const char __pyx_k_1[] = "1";
static const char __pyx_k_2[] = "2";
static const char __pyx_k_3[] = "3";
static const char __pyx_k_4[] = "4";
static const char __pyx_k_5[] = "5";
static const char __pyx_k_6[] = "6";
static const char __pyx_k_7[] = "7";
static const char __pyx_k_8[] = "8";
static const char __pyx_k_9[] = "9";
static const char __pyx_k_A[] = "A";
static const char __pyx_k_B[] = "B";
static const char __pyx_k_C[] = "C";
static const char __pyx_k_D[] = "D";
static const char __pyx_k_E[] = "E";
static const char __pyx_k_F[] = "F";
static const char __pyx_k_G[] = "G";
static const char __pyx_k_H[] = "H";
static const char __pyx_k_I[] = "I";
static const char __pyx_k_J[] = "J";
static const char __pyx_k_K[] = "K";
static const char __pyx_k_L[] = "L";
static const char __pyx_k_M[] = "M";
static const char __pyx_k_N[] = "N";
static const char __pyx_k_O[] = "O";
static const char __pyx_k_P[] = "P";
static const char __pyx_k_Q[] = "Q";
static const char __pyx_k_R[] = "R";
static const char __pyx_k_S[] = "S";
static const char __pyx_k_T[] = "T";
static const char __pyx_k_U[] = "U";
static const char __pyx_k_V[] = "V";
static const char __pyx_k_W[] = "W";
static const char __pyx_k_X[] = "X";
static const char __pyx_k_Y[] = "Y";
static const char __pyx_k_Z[] = "Z";
static const char __pyx_k_a[] = "a";
static const char __pyx_k_b[] = "b";
static const char __pyx_k_c[] = "c";
static const char __pyx_k_d[] = "d";
static const char __pyx_k_e[] = "e";
static const char __pyx_k_f[] = "f";
static const char __pyx_k_g[] = "g";
static const char __pyx_k_h[] = "h";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_j[] = "j";
static const char __pyx_k_k[] = "k";
static const char __pyx_k_l[] = "l";
static const char __pyx_k_m[] = "m";
static const char __pyx_k_n[] = "n";
static const char __pyx_k_o[] = "o";
static const char __pyx_k_p[] = "p";
static const char __pyx_k_q[] = "q";
static const char __pyx_k_r[] = "r";
static const char __pyx_k_s[] = "s";
static const char __pyx_k_t[] = "t";
static const char __pyx_k_u[] = "u";
static const char __pyx_k_v[] = "v";
static const char __pyx_k_w[] = "w";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_y[] = "y";
static const char __pyx_k_z[] = "z";
static const char __pyx_k__2[] = ".";
static const char __pyx_k__4[] = "\357\275\201";
static const char __pyx_k__6[] = "\357\275\202";
static const char __pyx_k__8[] = "\357\275\203";
static const char __pyx_k__10[] = "\357\275\204";
static const char __pyx_k__12[] = "\357\275\205";
static const char __pyx_k__14[] = "\357\275\206";
static const char __pyx_k__16[] = "\357\275\207";
static const char __pyx_k__18[] = "\357\275\210";
static const char __pyx_k__20[] = "\357\275\211";
static const char __pyx_k__22[] = "\357\275\212";
static const char __pyx_k__24[] = "\357\275\213";
static const char __pyx_k__26[] = "\357\275\214";
static const char __pyx_k__28[] = "\357\275\215";
static const char __pyx_k__30[] = "\357\275\216";
static const char __pyx_k__32[] = "\357\275\217";
static const char __pyx_k__34[] = "\357\275\220";
static const char __pyx_k__36[] = "\357\275\221";
static const char __pyx_k__38[] = "\357\275\222";
static const char __pyx_k__40[] = "\357\275\223";
static const char __pyx_k__42[] = "\357\275\224";
static const char __pyx_k__44[] = "\357\275\225";
static const char __pyx_k__46[] = "\357\275\226";
static const char __pyx_k__48[] = "\357\275\227";
static const char __pyx_k__50[] = "\357\275\230";
static const char __pyx_k__52[] = "\357\275\231";
static const char __pyx_k__54[] = "\357\275\232";
static const char __pyx_k__56[] = "\357\274\241";
static const char __pyx_k__58[] = "\357\274\242";
static const char __pyx_k__60[] = "\357\274\243";
static const char __pyx_k__62[] = "\357\274\244";
static const char __pyx_k__64[] = "\357\274\245";
static const char __pyx_k__66[] = "\357\274\246";
static const char __pyx_k__68[] = "\357\274\247";
static const char __pyx_k__70[] = "\357\274\250";
static const char __pyx_k__72[] = "\357\274\251";
static const char __pyx_k__74[] = "\357\274\252";
static const char __pyx_k__76[] = "\357\274\253";
static const char __pyx_k__78[] = "\357\274\254";
static const char __pyx_k__80[] = "\357\274\255";
static const char __pyx_k__82[] = "\357\274\256";
static const char __pyx_k__84[] = "\357\274\257";
static const char __pyx_k__86[] = "\357\274\260";
static const char __pyx_k__88[] = "\357\274\261";
static const char __pyx_k__90[] = "\357\274\262";
static const char __pyx_k__92[] = "\357\274\263";
static const char __pyx_k__94[] = "\357\274\264";
static const char __pyx_k__96[] = "\357\274\265";
static const char __pyx_k__98[] = "\357\274\266";
static const char __pyx_k_chr[] = "chr";
static const char __pyx_k_map[] = "map";
static const char __pyx_k_sys[] = "sys";
static const char __pyx_k_KANA[] = "KANA";
static const char __pyx_k__100[] = "\357\274\267";
static const char __pyx_k__102[] = "\357\274\270";
static const char __pyx_k__104[] = "\357\274\271";
static const char __pyx_k__106[] = "\357\274\272";
static const char __pyx_k__108[] = "\357\274\201";
static const char __pyx_k__109[] = "!";
static const char __pyx_k__111[] = "\342\200\235";
static const char __pyx_k__112[] = "\"";
static const char __pyx_k__114[] = "\357\274\203";
static const char __pyx_k__115[] = "#";
static const char __pyx_k__117[] = "\357\274\204";
static const char __pyx_k__118[] = "$";
static const char __pyx_k__120[] = "\357\274\205";
static const char __pyx_k__121[] = "%";
static const char __pyx_k__123[] = "\357\274\206";
static const char __pyx_k__124[] = "&";
static const char __pyx_k__126[] = "\342\200\231";
static const char __pyx_k__127[] = "'";
static const char __pyx_k__129[] = "\357\274\210";
static const char __pyx_k__130[] = "(";
static const char __pyx_k__132[] = "\357\274\211";
static const char __pyx_k__133[] = ")";
static const char __pyx_k__135[] = "\357\274\212";
static const char __pyx_k__137[] = "\357\274\213";
static const char __pyx_k__138[] = "+";
static const char __pyx_k__140[] = "\357\274\214";
static const char __pyx_k__141[] = ",";
static const char __pyx_k__143[] = "\342\210\222";
static const char __pyx_k__144[] = "-";
static const char __pyx_k__146[] = "\357\274\216";
static const char __pyx_k__148[] = "\357\274\217";
static const char __pyx_k__149[] = "/";
static const char __pyx_k__151[] = "\357\274\232";
static const char __pyx_k__152[] = ":";
static const char __pyx_k__154[] = "\357\274\233";
static const char __pyx_k__155[] = ";";
static const char __pyx_k__157[] = "\357\274\234";
static const char __pyx_k__158[] = "<";
static const char __pyx_k__160[] = "\357\274\235";
static const char __pyx_k__161[] = "=";
static const char __pyx_k__163[] = "\357\274\236";
static const char __pyx_k__164[] = ">";
static const char __pyx_k__166[] = "\357\274\237";
static const char __pyx_k__167[] = "?";
static const char __pyx_k__169[] = "\357\274\240";
static const char __pyx_k__170[] = "@";
static const char __pyx_k__172[] = "\357\274\273";
static const char __pyx_k__173[] = "[";
static const char __pyx_k__175[] = "\302\245";
static const char __pyx_k__176[] = "\\";
static const char __pyx_k__178[] = "\357\274\275";
static const char __pyx_k__179[] = "]";
static const char __pyx_k__181[] = "\357\274\276";
static const char __pyx_k__182[] = "^";
static const char __pyx_k__184[] = "\357\274\277";
static const char __pyx_k__185[] = "_";
static const char __pyx_k__187[] = "\342\200\230";
static const char __pyx_k__188[] = "`";
static const char __pyx_k__190[] = "\357\275\233";
static const char __pyx_k__191[] = "{";
static const char __pyx_k__193[] = "\357\275\234";
static const char __pyx_k__194[] = "|";
static const char __pyx_k__196[] = "\357\275\235";
static const char __pyx_k__197[] = "}";
static const char __pyx_k__200[] = "\357\275\261";
static const char __pyx_k__201[] = "\343\202\242";
static const char __pyx_k__203[] = "\357\275\262";
static const char __pyx_k__204[] = "\343\202\244";
static const char __pyx_k__206[] = "\357\275\263";
static const char __pyx_k__207[] = "\343\202\246";
static const char __pyx_k__209[] = "\357\275\264";
static const char __pyx_k__210[] = "\343\202\250";
static const char __pyx_k__212[] = "\357\275\265";
static const char __pyx_k__213[] = "\343\202\252";
static const char __pyx_k__215[] = "\357\275\266";
static const char __pyx_k__216[] = "\343\202\253";
static const char __pyx_k__218[] = "\357\275\267";
static const char __pyx_k__219[] = "\343\202\255";
static const char __pyx_k__221[] = "\357\275\270";
static const char __pyx_k__222[] = "\343\202\257";
static const char __pyx_k__224[] = "\357\275\271";
static const char __pyx_k__225[] = "\343\202\261";
static const char __pyx_k__227[] = "\357\275\272";
static const char __pyx_k__228[] = "\343\202\263";
static const char __pyx_k__230[] = "\357\275\273";
static const char __pyx_k__231[] = "\343\202\265";
static const char __pyx_k__233[] = "\357\275\274";
static const char __pyx_k__234[] = "\343\202\267";
static const char __pyx_k__236[] = "\357\275\275";
static const char __pyx_k__237[] = "\343\202\271";
static const char __pyx_k__239[] = "\357\275\276";
static const char __pyx_k__240[] = "\343\202\273";
static const char __pyx_k__242[] = "\357\275\277";
static const char __pyx_k__243[] = "\343\202\275";
static const char __pyx_k__245[] = "\357\276\200";
static const char __pyx_k__246[] = "\343\202\277";
static const char __pyx_k__248[] = "\357\276\201";
static const char __pyx_k__249[] = "\343\203\201";
static const char __pyx_k__251[] = "\357\276\202";
static const char __pyx_k__252[] = "\343\203\204";
static const char __pyx_k__254[] = "\357\276\203";
static const char __pyx_k__255[] = "\343\203\206";
static const char __pyx_k__257[] = "\357\276\204";
static const char __pyx_k__258[] = "\343\203\210";
static const char __pyx_k__260[] = "\357\276\205";
static const char __pyx_k__261[] = "\343\203\212";
static const char __pyx_k__263[] = "\357\276\206";
static const char __pyx_k__264[] = "\343\203\213";
static const char __pyx_k__266[] = "\357\276\207";
static const char __pyx_k__267[] = "\343\203\214";
static const char __pyx_k__269[] = "\357\276\210";
static const char __pyx_k__270[] = "\343\203\215";
static const char __pyx_k__272[] = "\357\276\211";
static const char __pyx_k__273[] = "\343\203\216";
static const char __pyx_k__275[] = "\357\276\212";
static const char __pyx_k__276[] = "\343\203\217";
static const char __pyx_k__278[] = "\357\276\213";
static const char __pyx_k__279[] = "\343\203\222";
static const char __pyx_k__281[] = "\357\276\214";
static const char __pyx_k__282[] = "\343\203\225";
static const char __pyx_k__284[] = "\357\276\215";
static const char __pyx_k__285[] = "\343\203\230";
static const char __pyx_k__287[] = "\357\276\216";
static const char __pyx_k__288[] = "\343\203\233";
static const char __pyx_k__290[] = "\357\276\217";
static const char __pyx_k__291[] = "\343\203\236";
static const char __pyx_k__293[] = "\357\276\220";
static const char __pyx_k__294[] = "\343\203\237";
static const char __pyx_k__296[] = "\357\276\221";
static const char __pyx_k__297[] = "\343\203\240";
static const char __pyx_k__299[] = "\357\276\222";
static const char __pyx_k__300[] = "\343\203\241";
static const char __pyx_k__302[] = "\357\276\223";
static const char __pyx_k__303[] = "\343\203\242";
static const char __pyx_k__305[] = "\357\276\224";
static const char __pyx_k__306[] = "\343\203\244";
static const char __pyx_k__308[] = "\357\276\225";
static const char __pyx_k__309[] = "\343\203\246";
static const char __pyx_k__311[] = "\357\276\226";
static const char __pyx_k__312[] = "\343\203\250";
static const char __pyx_k__314[] = "\357\276\227";
static const char __pyx_k__315[] = "\343\203\251";
static const char __pyx_k__317[] = "\357\276\230";
static const char __pyx_k__318[] = "\343\203\252";
static const char __pyx_k__320[] = "\357\276\231";
static const char __pyx_k__321[] = "\343\203\253";
static const char __pyx_k__323[] = "\357\276\232";
static const char __pyx_k__324[] = "\343\203\254";
static const char __pyx_k__326[] = "\357\276\233";
static const char __pyx_k__327[] = "\343\203\255";
static const char __pyx_k__329[] = "\357\276\234";
static const char __pyx_k__330[] = "\343\203\257";
static const char __pyx_k__332[] = "\357\275\246";
static const char __pyx_k__333[] = "\343\203\262";
static const char __pyx_k__335[] = "\357\276\235";
static const char __pyx_k__336[] = "\343\203\263";
static const char __pyx_k__338[] = "\357\275\247";
static const char __pyx_k__339[] = "\343\202\241";
static const char __pyx_k__341[] = "\357\275\250";
static const char __pyx_k__342[] = "\343\202\243";
static const char __pyx_k__344[] = "\357\275\251";
static const char __pyx_k__345[] = "\343\202\245";
static const char __pyx_k__347[] = "\357\275\252";
static const char __pyx_k__348[] = "\343\202\247";
static const char __pyx_k__350[] = "\357\275\253";
static const char __pyx_k__351[] = "\343\202\251";
static const char __pyx_k__353[] = "\357\275\257";
static const char __pyx_k__354[] = "\343\203\203";
static const char __pyx_k__356[] = "\357\275\254";
static const char __pyx_k__357[] = "\343\203\243";
static const char __pyx_k__359[] = "\357\275\255";
static const char __pyx_k__360[] = "\343\203\245";
static const char __pyx_k__362[] = "\357\275\256";
static const char __pyx_k__363[] = "\343\203\247";
static const char __pyx_k__365[] = "\357\275\241";
static const char __pyx_k__366[] = "\343\200\202";
static const char __pyx_k__368[] = "\357\275\244";
static const char __pyx_k__369[] = "\343\200\201";
static const char __pyx_k__371[] = "\357\275\245";
static const char __pyx_k__372[] = "\343\203\273";
static const char __pyx_k__374[] = "\343\202\233";
static const char __pyx_k__375[] = "\357\276\236";
static const char __pyx_k__377[] = "\343\202\234";
static const char __pyx_k__378[] = "\357\276\237";
static const char __pyx_k__380[] = "\357\275\242";
static const char __pyx_k__381[] = "\343\200\214";
static const char __pyx_k__383[] = "\357\275\243";
static const char __pyx_k__384[] = "\343\200\215";
static const char __pyx_k__386[] = "\357\275\260";
static const char __pyx_k__387[] = "\343\203\274";
static const char __pyx_k__390[] = "\357\274\220";
static const char __pyx_k__392[] = "\357\274\221";
static const char __pyx_k__394[] = "\357\274\222";
static const char __pyx_k__396[] = "\357\274\223";
static const char __pyx_k__398[] = "\357\274\224";
static const char __pyx_k__400[] = "\357\274\225";
static const char __pyx_k__402[] = "\357\274\226";
static const char __pyx_k__404[] = "\357\274\227";
static const char __pyx_k__406[] = "\357\274\230";
static const char __pyx_k__408[] = "\357\274\231";
static const char __pyx_k__411[] = "\343\202\254";
static const char __pyx_k__413[] = "\343\202\256";
static const char __pyx_k__415[] = "\343\202\260";
static const char __pyx_k__417[] = "\343\202\262";
static const char __pyx_k__419[] = "\343\202\264";
static const char __pyx_k__421[] = "\343\202\266";
static const char __pyx_k__423[] = "\343\202\270";
static const char __pyx_k__425[] = "\343\202\272";
static const char __pyx_k__427[] = "\343\202\274";
static const char __pyx_k__429[] = "\343\202\276";
static const char __pyx_k__431[] = "\343\203\200";
static const char __pyx_k__433[] = "\343\203\202";
static const char __pyx_k__435[] = "\343\203\205";
static const char __pyx_k__437[] = "\343\203\207";
static const char __pyx_k__439[] = "\343\203\211";
static const char __pyx_k__441[] = "\343\203\220";
static const char __pyx_k__443[] = "\343\203\223";
static const char __pyx_k__445[] = "\343\203\226";
static const char __pyx_k__447[] = "\343\203\231";
static const char __pyx_k__449[] = "\343\203\234";
static const char __pyx_k__451[] = "\343\203\264";
static const char __pyx_k__453[] = "\343\201\206";
static const char __pyx_k__454[] = "\343\202\224";
static const char __pyx_k__457[] = "\343\203\221";
static const char __pyx_k__459[] = "\343\203\224";
static const char __pyx_k__461[] = "\343\203\227";
static const char __pyx_k__463[] = "\343\203\232";
static const char __pyx_k__465[] = "\343\203\235";
static const char __pyx_k__467[] = "\343\201\257";
static const char __pyx_k__468[] = "\343\201\261";
static const char __pyx_k__470[] = "\343\201\262";
static const char __pyx_k__471[] = "\343\201\264";
static const char __pyx_k__473[] = "\343\201\265";
static const char __pyx_k__474[] = "\343\201\267";
static const char __pyx_k__476[] = "\343\201\270";
static const char __pyx_k__477[] = "\343\201\272";
static const char __pyx_k__479[] = "\343\201\273";
static const char __pyx_k__480[] = "\343\201\275";
static const char __pyx_k__483[] = "\313\227";
static const char __pyx_k__484[] = "\326\212";
static const char __pyx_k__485[] = "\342\200\220";
static const char __pyx_k__486[] = "\342\200\221";
static const char __pyx_k__487[] = "\342\200\222";
static const char __pyx_k__488[] = "\342\200\223";
static const char __pyx_k__489[] = "\342\201\203";
static const char __pyx_k__490[] = "\342\201\273";
static const char __pyx_k__491[] = "\342\202\213";
static const char __pyx_k__493[] = "\357\271\243";
static const char __pyx_k__494[] = "\357\274\215";
static const char __pyx_k__495[] = "\342\200\224";
static const char __pyx_k__496[] = "\342\200\225";
static const char __pyx_k__497[] = "\342\224\200";
static const char __pyx_k__498[] = "\342\224\201";
static const char __pyx_k__500[] = "~";
static const char __pyx_k__501[] = "\342\210\274";
static const char __pyx_k__502[] = "\342\210\276";
static const char __pyx_k__503[] = "\343\200\234";
static const char __pyx_k__504[] = "\343\200\260";
static const char __pyx_k__505[] = "\357\275\236";
static const char __pyx_k__507[] = " ";
static const char __pyx_k__508[] = "\343\200\200";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_spec[] = "__spec__";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_text[] = "text";
static const char __pyx_k_0_5_3[] = "0.5.3";
static const char __pyx_k_ASCII[] = "ASCII";
static const char __pyx_k_DIGIT[] = "DIGIT";
static const char __pyx_k_SPACE[] = "SPACE";
static const char __pyx_k_after[] = "after";
static const char __pyx_k_chain[] = "chain";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_tilde[] = "tilde";
static const char __pyx_k_TILDES[] = "TILDES";
static const char __pyx_k_before[] = "before";
static const char __pyx_k_ignore[] = "ignore";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_remove[] = "remove";
static const char __pyx_k_repeat[] = "repeat";
static const char __pyx_k_HIPHENS[] = "HIPHENS";
static const char __pyx_k_VERSION[] = "VERSION";
static const char __pyx_k_version[] = "__version__";
static const char __pyx_k_CHOONPUS[] = "CHOONPUS";
static const char __pyx_k_KANA_TEN[] = "KANA_TEN";
static const char __pyx_k_neologdn[] = "neologdn";
static const char __pyx_k_KANA_MARU[] = "KANA_MARU";
static const char __pyx_k_itertools[] = "itertools";
static const char __pyx_k_normalize[] = "normalize";
static const char __pyx_k_char_codes[] = "char_codes";
static const char __pyx_k_initializing[] = "_initializing";
static const char __pyx_k_is_coroutine[] = "_is_coroutine";
static const char __pyx_k_neologdn_pyx[] = "neologdn.pyx";
static const char __pyx_k_remove_space[] = "remove_space";
static const char __pyx_k_version_info[] = "version_info";
static const char __pyx_k_shorten_repeat[] = "shorten_repeat";
static const char __pyx_k_normalize_zenkaku[] = "normalize_zenkaku";
static const char __pyx_k_repeat_threshould[] = "repeat_threshould";
static const char __pyx_k_asyncio_coroutines[] = "asyncio.coroutines";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_max_repeat_substr_length[] = "max_repeat_substr_length";
/* #### Code section: decls ### */
static PyObject *__pyx_pf_8neologdn_shorten_repeat(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text, int __pyx_v_repeat_threshould, int __pyx_v_max_repeat_substr_length); /* proto */
static PyObject *__pyx_pf_8neologdn_2normalize(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text, int __pyx_v_repeat, int __pyx_v_remove_space, int __pyx_v_max_repeat_substr_length, PyObject *__pyx_v_tilde); /* proto */
/* #### Code section: late_includes ### */
/* #### Code section: module_state ### */
typedef struct {
  PyObject *__pyx_d;
  PyObject *__pyx_b;
  PyObject *__pyx_cython_runtime;
  PyObject *__pyx_empty_tuple;
  PyObject *__pyx_empty_bytes;
  PyObject *__pyx_empty_unicode;
  #ifdef __Pyx_CyFunction_USED
  PyTypeObject *__pyx_CyFunctionType;
  #endif
  #ifdef __Pyx_FusedFunction_USED
  PyTypeObject *__pyx_FusedFunctionType;
  #endif
  #ifdef __Pyx_Generator_USED
  PyTypeObject *__pyx_GeneratorType;
  #endif
  #ifdef __Pyx_IterableCoroutine_USED
  PyTypeObject *__pyx_IterableCoroutineType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineAwaitType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineType;
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyObject *__pyx_n_s_;
  PyObject *__pyx_kp_u_;
  PyObject *__pyx_kp_u_0;
  PyObject *__pyx_kp_u_0_5_3;
  PyObject *__pyx_kp_u_1;
  PyObject *__pyx_kp_u_2;
  PyObject *__pyx_kp_u_3;
  PyObject *__pyx_kp_u_4;
  PyObject *__pyx_kp_u_5;
  PyObject *__pyx_kp_u_6;
  PyObject *__pyx_kp_u_7;
  PyObject *__pyx_kp_u_8;
  PyObject *__pyx_kp_u_9;
  PyObject *__pyx_n_u_A;
  PyObject *__pyx_n_s_ASCII;
  PyObject *__pyx_n_u_B;
  PyObject *__pyx_n_u_C;
  PyObject *__pyx_n_s_CHOONPUS;
  PyObject *__pyx_n_u_D;
  PyObject *__pyx_n_s_DIGIT;
  PyObject *__pyx_n_u_E;
  PyObject *__pyx_n_u_F;
  PyObject *__pyx_n_u_G;
  PyObject *__pyx_n_u_H;
  PyObject *__pyx_n_s_HIPHENS;
  PyObject *__pyx_n_u_I;
  PyObject *__pyx_n_u_J;
  PyObject *__pyx_n_u_K;
  PyObject *__pyx_n_s_KANA;
  PyObject *__pyx_n_s_KANA_MARU;
  PyObject *__pyx_n_s_KANA_TEN;
  PyObject *__pyx_n_u_L;
  PyObject *__pyx_n_u_M;
  PyObject *__pyx_n_u_N;
  PyObject *__pyx_n_u_O;
  PyObject *__pyx_n_u_P;
  PyObject *__pyx_n_u_Q;
  PyObject *__pyx_n_u_R;
  PyObject *__pyx_n_u_S;
  PyObject *__pyx_n_s_SPACE;
  PyObject *__pyx_n_u_T;
  PyObject *__pyx_n_s_TILDES;
  PyObject *__pyx_n_u_U;
  PyObject *__pyx_n_u_V;
  PyObject *__pyx_n_s_VERSION;
  PyObject *__pyx_n_u_W;
  PyObject *__pyx_n_u_X;
  PyObject *__pyx_n_u_Y;
  PyObject *__pyx_n_u_Z;
  PyObject *__pyx_n_u__10;
  PyObject *__pyx_n_u__100;
  PyObject *__pyx_n_u__102;
  PyObject *__pyx_n_u__104;
  PyObject *__pyx_n_u__106;
  PyObject *__pyx_kp_u__108;
  PyObject *__pyx_kp_u__109;
  PyObject *__pyx_kp_u__111;
  PyObject *__pyx_kp_u__112;
  PyObject *__pyx_kp_u__114;
  PyObject *__pyx_kp_u__115;
  PyObject *__pyx_kp_u__117;
  PyObject *__pyx_kp_u__118;
  PyObject *__pyx_n_u__12;
  PyObject *__pyx_kp_u__120;
  PyObject *__pyx_kp_u__121;
  PyObject *__pyx_kp_u__123;
  PyObject *__pyx_kp_u__124;
  PyObject *__pyx_kp_u__126;
  PyObject *__pyx_kp_u__127;
  PyObject *__pyx_kp_u__129;
  PyObject *__pyx_kp_u__130;
  PyObject *__pyx_kp_u__132;
  PyObject *__pyx_kp_u__133;
  PyObject *__pyx_kp_u__135;
  PyObject *__pyx_kp_u__137;
  PyObject *__pyx_kp_u__138;
  PyObject *__pyx_n_u__14;
  PyObject *__pyx_kp_u__140;
  PyObject *__pyx_kp_u__141;
  PyObject *__pyx_kp_u__143;
  PyObject *__pyx_kp_u__144;
  PyObject *__pyx_kp_u__146;
  PyObject *__pyx_kp_u__148;
  PyObject *__pyx_kp_u__149;
  PyObject *__pyx_kp_u__151;
  PyObject *__pyx_kp_u__152;
  PyObject *__pyx_kp_u__154;
  PyObject *__pyx_kp_u__155;
  PyObject *__pyx_kp_u__157;
  PyObject *__pyx_kp_u__158;
  PyObject *__pyx_n_u__16;
  PyObject *__pyx_kp_u__160;
  PyObject *__pyx_kp_u__161;
  PyObject *__pyx_kp_u__163;
  PyObject *__pyx_kp_u__164;
  PyObject *__pyx_kp_u__166;
  PyObject *__pyx_n_s__167;
  PyObject *__pyx_kp_u__167;
  PyObject *__pyx_kp_u__169;
  PyObject *__pyx_kp_u__170;
  PyObject *__pyx_kp_u__172;
  PyObject *__pyx_kp_u__173;
  PyObject *__pyx_kp_u__175;
  PyObject *__pyx_kp_u__176;
  PyObject *__pyx_kp_u__178;
  PyObject *__pyx_kp_u__179;
  PyObject *__pyx_n_u__18;
  PyObject *__pyx_kp_u__181;
  PyObject *__pyx_kp_u__182;
  PyObject *__pyx_kp_u__184;
  PyObject *__pyx_n_u__185;
  PyObject *__pyx_kp_u__187;
  PyObject *__pyx_kp_u__188;
  PyObject *__pyx_kp_u__190;
  PyObject *__pyx_kp_u__191;
  PyObject *__pyx_kp_u__193;
  PyObject *__pyx_kp_u__194;
  PyObject *__pyx_kp_u__196;
  PyObject *__pyx_kp_u__197;
  PyObject *__pyx_kp_u__2;
  PyObject *__pyx_n_u__20;
  PyObject *__pyx_n_u__200;
  PyObject *__pyx_n_u__201;
  PyObject *__pyx_n_u__203;
  PyObject *__pyx_n_u__204;
  PyObject *__pyx_n_u__206;
  PyObject *__pyx_n_u__207;
  PyObject *__pyx_n_u__209;
  PyObject *__pyx_n_u__210;
  PyObject *__pyx_n_u__212;
  PyObject *__pyx_n_u__213;
  PyObject *__pyx_n_u__215;
  PyObject *__pyx_n_u__216;
  PyObject *__pyx_n_u__218;
  PyObject *__pyx_n_u__219;
  PyObject *__pyx_n_u__22;
  PyObject *__pyx_n_u__221;
  PyObject *__pyx_n_u__222;
  PyObject *__pyx_n_u__224;
  PyObject *__pyx_n_u__225;
  PyObject *__pyx_n_u__227;
  PyObject *__pyx_n_u__228;
  PyObject *__pyx_n_u__230;
  PyObject *__pyx_n_u__231;
  PyObject *__pyx_n_u__233;
  PyObject *__pyx_n_u__234;
  PyObject *__pyx_n_u__236;
  PyObject *__pyx_n_u__237;
  PyObject *__pyx_n_u__239;
  PyObject *__pyx_n_u__24;
  PyObject *__pyx_n_u__240;
  PyObject *__pyx_n_u__242;
  PyObject *__pyx_n_u__243;
  PyObject *__pyx_n_u__245;
  PyObject *__pyx_n_u__246;
  PyObject *__pyx_n_u__248;
  PyObject *__pyx_n_u__249;
  PyObject *__pyx_n_u__251;
  PyObject *__pyx_n_u__252;
  PyObject *__pyx_n_u__254;
  PyObject *__pyx_n_u__255;
  PyObject *__pyx_n_u__257;
  PyObject *__pyx_n_u__258;
  PyObject *__pyx_n_u__26;
  PyObject *__pyx_n_u__260;
  PyObject *__pyx_n_u__261;
  PyObject *__pyx_n_u__263;
  PyObject *__pyx_n_u__264;
  PyObject *__pyx_n_u__266;
  PyObject *__pyx_n_u__267;
  PyObject *__pyx_n_u__269;
  PyObject *__pyx_n_u__270;
  PyObject *__pyx_n_u__272;
  PyObject *__pyx_n_u__273;
  PyObject *__pyx_n_u__275;
  PyObject *__pyx_n_u__276;
  PyObject *__pyx_n_u__278;
  PyObject *__pyx_n_u__279;
  PyObject *__pyx_n_u__28;
  PyObject *__pyx_n_u__281;
  PyObject *__pyx_n_u__282;
  PyObject *__pyx_n_u__284;
  PyObject *__pyx_n_u__285;
  PyObject *__pyx_n_u__287;
  PyObject *__pyx_n_u__288;
  PyObject *__pyx_n_u__290;
  PyObject *__pyx_n_u__291;
  PyObject *__pyx_n_u__293;
  PyObject *__pyx_n_u__294;
  PyObject *__pyx_n_u__296;
  PyObject *__pyx_n_u__297;
  PyObject *__pyx_n_u__299;
  PyObject *__pyx_n_u__30;
  PyObject *__pyx_n_u__300;
  PyObject *__pyx_n_u__302;
  PyObject *__pyx_n_u__303;
  PyObject *__pyx_n_u__305;
  PyObject *__pyx_n_u__306;
  PyObject *__pyx_n_u__308;
  PyObject *__pyx_n_u__309;
  PyObject *__pyx_n_u__311;
  PyObject *__pyx_n_u__312;
  PyObject *__pyx_n_u__314;
  PyObject *__pyx_n_u__315;
  PyObject *__pyx_n_u__317;
  PyObject *__pyx_n_u__318;
  PyObject *__pyx_n_u__32;
  PyObject *__pyx_n_u__320;
  PyObject *__pyx_n_u__321;
  PyObject *__pyx_n_u__323;
  PyObject *__pyx_n_u__324;
  PyObject *__pyx_n_u__326;
  PyObject *__pyx_n_u__327;
  PyObject *__pyx_n_u__329;
  PyObject *__pyx_n_u__330;
  PyObject *__pyx_n_u__332;
  PyObject *__pyx_n_u__333;
  PyObject *__pyx_n_u__335;
  PyObject *__pyx_n_u__336;
  PyObject *__pyx_n_u__338;
  PyObject *__pyx_n_u__339;
  PyObject *__pyx_n_u__34;
  PyObject *__pyx_n_u__341;
  PyObject *__pyx_n_u__342;
  PyObject *__pyx_n_u__344;
  PyObject *__pyx_n_u__345;
  PyObject *__pyx_n_u__347;
  PyObject *__pyx_n_u__348;
  PyObject *__pyx_n_u__350;
  PyObject *__pyx_n_u__351;
  PyObject *__pyx_n_u__353;
  PyObject *__pyx_n_u__354;
  PyObject *__pyx_n_u__356;
  PyObject *__pyx_n_u__357;
  PyObject *__pyx_n_u__359;
  PyObject *__pyx_n_u__36;
  PyObject *__pyx_n_u__360;
  PyObject *__pyx_n_u__362;
  PyObject *__pyx_n_u__363;
  PyObject *__pyx_kp_u__365;
  PyObject *__pyx_kp_u__366;
  PyObject *__pyx_kp_u__368;
  PyObject *__pyx_kp_u__369;
  PyObject *__pyx_kp_u__371;
  PyObject *__pyx_kp_u__372;
  PyObject *__pyx_kp_u__374;
  PyObject *__pyx_n_u__375;
  PyObject *__pyx_kp_u__377;
  PyObject *__pyx_n_u__378;
  PyObject *__pyx_n_u__38;
  PyObject *__pyx_kp_u__380;
  PyObject *__pyx_kp_u__381;
  PyObject *__pyx_kp_u__383;
  PyObject *__pyx_kp_u__384;
  PyObject *__pyx_n_u__386;
  PyObject *__pyx_n_u__387;
  PyObject *__pyx_n_u__390;
  PyObject *__pyx_n_u__392;
  PyObject *__pyx_n_u__394;
  PyObject *__pyx_n_u__396;
  PyObject *__pyx_n_u__398;
  PyObject *__pyx_n_u__4;
  PyObject *__pyx_n_u__40;
  PyObject *__pyx_n_u__400;
  PyObject *__pyx_n_u__402;
  PyObject *__pyx_n_u__404;
  PyObject *__pyx_n_u__406;
  PyObject *__pyx_n_u__408;
  PyObject *__pyx_n_u__411;
  PyObject *__pyx_n_u__413;
  PyObject *__pyx_n_u__415;
  PyObject *__pyx_n_u__417;
  PyObject *__pyx_n_u__419;
  PyObject *__pyx_n_u__42;
  PyObject *__pyx_n_u__421;
  PyObject *__pyx_n_u__423;
  PyObject *__pyx_n_u__425;
  PyObject *__pyx_n_u__427;
  PyObject *__pyx_n_u__429;
  PyObject *__pyx_n_u__431;
  PyObject *__pyx_n_u__433;
  PyObject *__pyx_n_u__435;
  PyObject *__pyx_n_u__437;
  PyObject *__pyx_n_u__439;
  PyObject *__pyx_n_u__44;
  PyObject *__pyx_n_u__441;
  PyObject *__pyx_n_u__443;
  PyObject *__pyx_n_u__445;
  PyObject *__pyx_n_u__447;
  PyObject *__pyx_n_u__449;
  PyObject *__pyx_n_u__451;
  PyObject *__pyx_n_u__453;
  PyObject *__pyx_n_u__454;
  PyObject *__pyx_n_u__457;
  PyObject *__pyx_n_u__459;
  PyObject *__pyx_n_u__46;
  PyObject *__pyx_n_u__461;
  PyObject *__pyx_n_u__463;
  PyObject *__pyx_n_u__465;
  PyObject *__pyx_n_u__467;
  PyObject *__pyx_n_u__468;
  PyObject *__pyx_n_u__470;
  PyObject *__pyx_n_u__471;
  PyObject *__pyx_n_u__473;
  PyObject *__pyx_n_u__474;
  PyObject *__pyx_n_u__476;
  PyObject *__pyx_n_u__477;
  PyObject *__pyx_n_u__479;
  PyObject *__pyx_n_u__48;
  PyObject *__pyx_n_u__480;
  PyObject *__pyx_kp_u__483;
  PyObject *__pyx_kp_u__484;
  PyObject *__pyx_kp_u__485;
  PyObject *__pyx_kp_u__486;
  PyObject *__pyx_kp_u__487;
  PyObject *__pyx_kp_u__488;
  PyObject *__pyx_kp_u__489;
  PyObject *__pyx_kp_u__490;
  PyObject *__pyx_kp_u__491;
  PyObject *__pyx_kp_u__493;
  PyObject *__pyx_kp_u__494;
  PyObject *__pyx_kp_u__495;
  PyObject *__pyx_kp_u__496;
  PyObject *__pyx_kp_u__497;
  PyObject *__pyx_kp_u__498;
  PyObject *__pyx_n_u__50;
  PyObject *__pyx_kp_u__500;
  PyObject *__pyx_kp_u__501;
  PyObject *__pyx_kp_u__502;
  PyObject *__pyx_kp_u__503;
  PyObject *__pyx_kp_u__504;
  PyObject *__pyx_kp_u__505;
  PyObject *__pyx_kp_u__507;
  PyObject *__pyx_kp_u__508;
  PyObject *__pyx_n_u__52;
  PyObject *__pyx_n_u__54;
  PyObject *__pyx_n_u__56;
  PyObject *__pyx_n_u__58;
  PyObject *__pyx_n_u__6;
  PyObject *__pyx_n_u__60;
  PyObject *__pyx_n_u__62;
  PyObject *__pyx_n_u__64;
  PyObject *__pyx_n_u__66;
  PyObject *__pyx_n_u__68;
  PyObject *__pyx_n_u__70;
  PyObject *__pyx_n_u__72;
  PyObject *__pyx_n_u__74;
  PyObject *__pyx_n_u__76;
  PyObject *__pyx_n_u__78;
  PyObject *__pyx_n_u__8;
  PyObject *__pyx_n_u__80;
  PyObject *__pyx_n_u__82;
  PyObject *__pyx_n_u__84;
  PyObject *__pyx_n_u__86;
  PyObject *__pyx_n_u__88;
  PyObject *__pyx_n_u__90;
  PyObject *__pyx_n_u__92;
  PyObject *__pyx_n_u__94;
  PyObject *__pyx_n_u__96;
  PyObject *__pyx_n_u__98;
  PyObject *__pyx_n_u_a;
  PyObject *__pyx_n_s_after;
  PyObject *__pyx_n_s_asyncio_coroutines;
  PyObject *__pyx_n_u_b;
  PyObject *__pyx_n_s_before;
  PyObject *__pyx_n_s_c;
  PyObject *__pyx_n_u_c;
  PyObject *__pyx_n_s_chain;
  PyObject *__pyx_n_s_char_codes;
  PyObject *__pyx_n_s_chr;
  PyObject *__pyx_n_s_cline_in_traceback;
  PyObject *__pyx_n_u_d;
  PyObject *__pyx_n_u_e;
  PyObject *__pyx_n_u_f;
  PyObject *__pyx_n_u_g;
  PyObject *__pyx_n_u_h;
  PyObject *__pyx_n_u_i;
  PyObject *__pyx_n_u_ignore;
  PyObject *__pyx_n_s_import;
  PyObject *__pyx_n_s_initializing;
  PyObject *__pyx_n_s_is_coroutine;
  PyObject *__pyx_n_s_itertools;
  PyObject *__pyx_n_u_j;
  PyObject *__pyx_n_u_k;
  PyObject *__pyx_n_u_l;
  PyObject *__pyx_n_u_m;
  PyObject *__pyx_n_s_main;
  PyObject *__pyx_n_s_map;
  PyObject *__pyx_n_s_max_repeat_substr_length;
  PyObject *__pyx_n_u_n;
  PyObject *__pyx_n_s_name;
  PyObject *__pyx_n_s_neologdn;
  PyObject *__pyx_kp_s_neologdn_pyx;
  PyObject *__pyx_n_s_normalize;
  PyObject *__pyx_n_u_normalize;
  PyObject *__pyx_n_u_normalize_zenkaku;
  PyObject *__pyx_n_u_o;
  PyObject *__pyx_n_u_p;
  PyObject *__pyx_n_u_q;
  PyObject *__pyx_n_u_r;
  PyObject *__pyx_n_s_range;
  PyObject *__pyx_n_u_remove;
  PyObject *__pyx_n_s_remove_space;
  PyObject *__pyx_n_s_repeat;
  PyObject *__pyx_n_s_repeat_threshould;
  PyObject *__pyx_n_u_s;
  PyObject *__pyx_n_s_shorten_repeat;
  PyObject *__pyx_n_s_spec;
  PyObject *__pyx_n_s_sys;
  PyObject *__pyx_n_u_t;
  PyObject *__pyx_n_s_test;
  PyObject *__pyx_n_s_text;
  PyObject *__pyx_n_s_tilde;
  PyObject *__pyx_n_u_u;
  PyObject *__pyx_n_u_v;
  PyObject *__pyx_n_s_version;
  PyObject *__pyx_n_s_version_info;
  PyObject *__pyx_n_u_w;
  PyObject *__pyx_n_u_x;
  PyObject *__pyx_n_u_y;
  PyObject *__pyx_n_u_z;
  PyObject *__pyx_int_0;
  PyObject *__pyx_int_3;
  PyObject *__pyx_int_5;
  PyObject *__pyx_int_8;
  PyObject *__pyx_int_128;
  PyObject *__pyx_int_12289;
  PyObject *__pyx_int_12352;
  PyObject *__pyx_int_12448;
  PyObject *__pyx_int_12544;
  PyObject *__pyx_int_19968;
  PyObject *__pyx_int_40960;
  PyObject *__pyx_int_65280;
  PyObject *__pyx_int_65520;
  PyObject *__pyx_tuple__3;
  PyObject *__pyx_tuple__5;
  PyObject *__pyx_tuple__7;
  PyObject *__pyx_tuple__9;
  PyObject *__pyx_tuple__11;
  PyObject *__pyx_tuple__13;
  PyObject *__pyx_tuple__15;
  PyObject *__pyx_tuple__17;
  PyObject *__pyx_tuple__19;
  PyObject *__pyx_tuple__21;
  PyObject *__pyx_tuple__23;
  PyObject *__pyx_tuple__25;
  PyObject *__pyx_tuple__27;
  PyObject *__pyx_tuple__29;
  PyObject *__pyx_tuple__31;
  PyObject *__pyx_tuple__33;
  PyObject *__pyx_tuple__35;
  PyObject *__pyx_tuple__37;
  PyObject *__pyx_tuple__39;
  PyObject *__pyx_tuple__41;
  PyObject *__pyx_tuple__43;
  PyObject *__pyx_tuple__45;
  PyObject *__pyx_tuple__47;
  PyObject *__pyx_tuple__49;
  PyObject *__pyx_tuple__51;
  PyObject *__pyx_tuple__53;
  PyObject *__pyx_tuple__55;
  PyObject *__pyx_tuple__57;
  PyObject *__pyx_tuple__59;
  PyObject *__pyx_tuple__61;
  PyObject *__pyx_tuple__63;
  PyObject *__pyx_tuple__65;
  PyObject *__pyx_tuple__67;
  PyObject *__pyx_tuple__69;
  PyObject *__pyx_tuple__71;
  PyObject *__pyx_tuple__73;
  PyObject *__pyx_tuple__75;
  PyObject *__pyx_tuple__77;
  PyObject *__pyx_tuple__79;
  PyObject *__pyx_tuple__81;
  PyObject *__pyx_tuple__83;
  PyObject *__pyx_tuple__85;
  PyObject *__pyx_tuple__87;
  PyObject *__pyx_tuple__89;
  PyObject *__pyx_tuple__91;
  PyObject *__pyx_tuple__93;
  PyObject *__pyx_tuple__95;
  PyObject *__pyx_tuple__97;
  PyObject *__pyx_tuple__99;
  PyObject *__pyx_tuple__101;
  PyObject *__pyx_tuple__103;
  PyObject *__pyx_tuple__105;
  PyObject *__pyx_tuple__107;
  PyObject *__pyx_tuple__110;
  PyObject *__pyx_tuple__113;
  PyObject *__pyx_tuple__116;
  PyObject *__pyx_tuple__119;
  PyObject *__pyx_tuple__122;
  PyObject *__pyx_tuple__125;
  PyObject *__pyx_tuple__128;
  PyObject *__pyx_tuple__131;
  PyObject *__pyx_tuple__134;
  PyObject *__pyx_tuple__136;
  PyObject *__pyx_tuple__139;
  PyObject *__pyx_tuple__142;
  PyObject *__pyx_tuple__145;
  PyObject *__pyx_tuple__147;
  PyObject *__pyx_tuple__150;
  PyObject *__pyx_tuple__153;
  PyObject *__pyx_tuple__156;
  PyObject *__pyx_tuple__159;
  PyObject *__pyx_tuple__162;
  PyObject *__pyx_tuple__165;
  PyObject *__pyx_tuple__168;
  PyObject *__pyx_tuple__171;
  PyObject *__pyx_tuple__174;
  PyObject *__pyx_tuple__177;
  PyObject *__pyx_tuple__180;
  PyObject *__pyx_tuple__183;
  PyObject *__pyx_tuple__186;
  PyObject *__pyx_tuple__189;
  PyObject *__pyx_tuple__192;
  PyObject *__pyx_tuple__195;
  PyObject *__pyx_tuple__198;
  PyObject *__pyx_tuple__199;
  PyObject *__pyx_tuple__202;
  PyObject *__pyx_tuple__205;
  PyObject *__pyx_tuple__208;
  PyObject *__pyx_tuple__211;
  PyObject *__pyx_tuple__214;
  PyObject *__pyx_tuple__217;
  PyObject *__pyx_tuple__220;
  PyObject *__pyx_tuple__223;
  PyObject *__pyx_tuple__226;
  PyObject *__pyx_tuple__229;
  PyObject *__pyx_tuple__232;
  PyObject *__pyx_tuple__235;
  PyObject *__pyx_tuple__238;
  PyObject *__pyx_tuple__241;
  PyObject *__pyx_tuple__244;
  PyObject *__pyx_tuple__247;
  PyObject *__pyx_tuple__250;
  PyObject *__pyx_tuple__253;
  PyObject *__pyx_tuple__256;
  PyObject *__pyx_tuple__259;
  PyObject *__pyx_tuple__262;
  PyObject *__pyx_tuple__265;
  PyObject *__pyx_tuple__268;
  PyObject *__pyx_tuple__271;
  PyObject *__pyx_tuple__274;
  PyObject *__pyx_tuple__277;
  PyObject *__pyx_tuple__280;
  PyObject *__pyx_tuple__283;
  PyObject *__pyx_tuple__286;
  PyObject *__pyx_tuple__289;
  PyObject *__pyx_tuple__292;
  PyObject *__pyx_tuple__295;
  PyObject *__pyx_tuple__298;
  PyObject *__pyx_tuple__301;
  PyObject *__pyx_tuple__304;
  PyObject *__pyx_tuple__307;
  PyObject *__pyx_tuple__310;
  PyObject *__pyx_tuple__313;
  PyObject *__pyx_tuple__316;
  PyObject *__pyx_tuple__319;
  PyObject *__pyx_tuple__322;
  PyObject *__pyx_tuple__325;
  PyObject *__pyx_tuple__328;
  PyObject *__pyx_tuple__331;
  PyObject *__pyx_tuple__334;
  PyObject *__pyx_tuple__337;
  PyObject *__pyx_tuple__340;
  PyObject *__pyx_tuple__343;
  PyObject *__pyx_tuple__346;
  PyObject *__pyx_tuple__349;
  PyObject *__pyx_tuple__352;
  PyObject *__pyx_tuple__355;
  PyObject *__pyx_tuple__358;
  PyObject *__pyx_tuple__361;
  PyObject *__pyx_tuple__364;
  PyObject *__pyx_tuple__367;
  PyObject *__pyx_tuple__370;
  PyObject *__pyx_tuple__373;
  PyObject *__pyx_tuple__376;
  PyObject *__pyx_tuple__379;
  PyObject *__pyx_tuple__382;
  PyObject *__pyx_tuple__385;
  PyObject *__pyx_tuple__388;
  PyObject *__pyx_tuple__389;
  PyObject *__pyx_tuple__391;
  PyObject *__pyx_tuple__393;
  PyObject *__pyx_tuple__395;
  PyObject *__pyx_tuple__397;
  PyObject *__pyx_tuple__399;
  PyObject *__pyx_tuple__401;
  PyObject *__pyx_tuple__403;
  PyObject *__pyx_tuple__405;
  PyObject *__pyx_tuple__407;
  PyObject *__pyx_tuple__409;
  PyObject *__pyx_tuple__410;
  PyObject *__pyx_tuple__412;
  PyObject *__pyx_tuple__414;
  PyObject *__pyx_tuple__416;
  PyObject *__pyx_tuple__418;
  PyObject *__pyx_tuple__420;
  PyObject *__pyx_tuple__422;
  PyObject *__pyx_tuple__424;
  PyObject *__pyx_tuple__426;
  PyObject *__pyx_tuple__428;
  PyObject *__pyx_tuple__430;
  PyObject *__pyx_tuple__432;
  PyObject *__pyx_tuple__434;
  PyObject *__pyx_tuple__436;
  PyObject *__pyx_tuple__438;
  PyObject *__pyx_tuple__440;
  PyObject *__pyx_tuple__442;
  PyObject *__pyx_tuple__444;
  PyObject *__pyx_tuple__446;
  PyObject *__pyx_tuple__448;
  PyObject *__pyx_tuple__450;
  PyObject *__pyx_tuple__452;
  PyObject *__pyx_tuple__455;
  PyObject *__pyx_tuple__456;
  PyObject *__pyx_tuple__458;
  PyObject *__pyx_tuple__460;
  PyObject *__pyx_tuple__462;
  PyObject *__pyx_tuple__464;
  PyObject *__pyx_tuple__466;
  PyObject *__pyx_tuple__469;
  PyObject *__pyx_tuple__472;
  PyObject *__pyx_tuple__475;
  PyObject *__pyx_tuple__478;
  PyObject *__pyx_tuple__481;
  PyObject *__pyx_tuple__482;
  PyObject *__pyx_tuple__492;
  PyObject *__pyx_tuple__499;
  PyObject *__pyx_tuple__506;
  PyObject *__pyx_tuple__509;
  PyObject *__pyx_tuple__510;
  PyObject *__pyx_tuple__511;
  PyObject *__pyx_tuple__512;
  PyObject *__pyx_tuple__513;
  PyObject *__pyx_tuple__514;
  PyObject *__pyx_tuple__515;
  PyObject *__pyx_tuple__516;
  PyObject *__pyx_tuple__518;
  PyObject *__pyx_tuple__519;
  PyObject *__pyx_tuple__521;
  PyObject *__pyx_codeobj__517;
  PyObject *__pyx_codeobj__520;
} __pyx_mstate;

#if CYTHON_USE_MODULE_STATE
#ifdef __cplusplus
namespace {
  extern struct PyModuleDef __pyx_moduledef;
} /* anonymous namespace */
#else
static struct PyModuleDef __pyx_moduledef;
#endif

#define __pyx_mstate(o) ((__pyx_mstate *)__Pyx_PyModule_GetState(o))

#define __pyx_mstate_global (__pyx_mstate(PyState_FindModule(&__pyx_moduledef)))

#define __pyx_m (PyState_FindModule(&__pyx_moduledef))
#else
static __pyx_mstate __pyx_mstate_global_static =
#ifdef __cplusplus
    {};
#else
    {0};
#endif
static __pyx_mstate *__pyx_mstate_global = &__pyx_mstate_global_static;
#endif
/* #### Code section: module_state_clear ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_clear(PyObject *m) {
  __pyx_mstate *clear_module_state = __pyx_mstate(m);
  if (!clear_module_state) return 0;
  Py_CLEAR(clear_module_state->__pyx_d);
  Py_CLEAR(clear_module_state->__pyx_b);
  Py_CLEAR(clear_module_state->__pyx_cython_runtime);
  Py_CLEAR(clear_module_state->__pyx_empty_tuple);
  Py_CLEAR(clear_module_state->__pyx_empty_bytes);
  Py_CLEAR(clear_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_CLEAR(clear_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_CLEAR(clear_module_state->__pyx_FusedFunctionType);
  #endif
  Py_CLEAR(clear_module_state->__pyx_n_s_);
  Py_CLEAR(clear_module_state->__pyx_kp_u_);
  Py_CLEAR(clear_module_state->__pyx_kp_u_0);
  Py_CLEAR(clear_module_state->__pyx_kp_u_0_5_3);
  Py_CLEAR(clear_module_state->__pyx_kp_u_1);
  Py_CLEAR(clear_module_state->__pyx_kp_u_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_3);
  Py_CLEAR(clear_module_state->__pyx_kp_u_4);
  Py_CLEAR(clear_module_state->__pyx_kp_u_5);
  Py_CLEAR(clear_module_state->__pyx_kp_u_6);
  Py_CLEAR(clear_module_state->__pyx_kp_u_7);
  Py_CLEAR(clear_module_state->__pyx_kp_u_8);
  Py_CLEAR(clear_module_state->__pyx_kp_u_9);
  Py_CLEAR(clear_module_state->__pyx_n_u_A);
  Py_CLEAR(clear_module_state->__pyx_n_s_ASCII);
  Py_CLEAR(clear_module_state->__pyx_n_u_B);
  Py_CLEAR(clear_module_state->__pyx_n_u_C);
  Py_CLEAR(clear_module_state->__pyx_n_s_CHOONPUS);
  Py_CLEAR(clear_module_state->__pyx_n_u_D);
  Py_CLEAR(clear_module_state->__pyx_n_s_DIGIT);
  Py_CLEAR(clear_module_state->__pyx_n_u_E);
  Py_CLEAR(clear_module_state->__pyx_n_u_F);
  Py_CLEAR(clear_module_state->__pyx_n_u_G);
  Py_CLEAR(clear_module_state->__pyx_n_u_H);
  Py_CLEAR(clear_module_state->__pyx_n_s_HIPHENS);
  Py_CLEAR(clear_module_state->__pyx_n_u_I);
  Py_CLEAR(clear_module_state->__pyx_n_u_J);
  Py_CLEAR(clear_module_state->__pyx_n_u_K);
  Py_CLEAR(clear_module_state->__pyx_n_s_KANA);
  Py_CLEAR(clear_module_state->__pyx_n_s_KANA_MARU);
  Py_CLEAR(clear_module_state->__pyx_n_s_KANA_TEN);
  Py_CLEAR(clear_module_state->__pyx_n_u_L);
  Py_CLEAR(clear_module_state->__pyx_n_u_M);
  Py_CLEAR(clear_module_state->__pyx_n_u_N);
  Py_CLEAR(clear_module_state->__pyx_n_u_O);
  Py_CLEAR(clear_module_state->__pyx_n_u_P);
  Py_CLEAR(clear_module_state->__pyx_n_u_Q);
  Py_CLEAR(clear_module_state->__pyx_n_u_R);
  Py_CLEAR(clear_module_state->__pyx_n_u_S);
  Py_CLEAR(clear_module_state->__pyx_n_s_SPACE);
  Py_CLEAR(clear_module_state->__pyx_n_u_T);
  Py_CLEAR(clear_module_state->__pyx_n_s_TILDES);
  Py_CLEAR(clear_module_state->__pyx_n_u_U);
  Py_CLEAR(clear_module_state->__pyx_n_u_V);
  Py_CLEAR(clear_module_state->__pyx_n_s_VERSION);
  Py_CLEAR(clear_module_state->__pyx_n_u_W);
  Py_CLEAR(clear_module_state->__pyx_n_u_X);
  Py_CLEAR(clear_module_state->__pyx_n_u_Y);
  Py_CLEAR(clear_module_state->__pyx_n_u_Z);
  Py_CLEAR(clear_module_state->__pyx_n_u__10);
  Py_CLEAR(clear_module_state->__pyx_n_u__100);
  Py_CLEAR(clear_module_state->__pyx_n_u__102);
  Py_CLEAR(clear_module_state->__pyx_n_u__104);
  Py_CLEAR(clear_module_state->__pyx_n_u__106);
  Py_CLEAR(clear_module_state->__pyx_kp_u__108);
  Py_CLEAR(clear_module_state->__pyx_kp_u__109);
  Py_CLEAR(clear_module_state->__pyx_kp_u__111);
  Py_CLEAR(clear_module_state->__pyx_kp_u__112);
  Py_CLEAR(clear_module_state->__pyx_kp_u__114);
  Py_CLEAR(clear_module_state->__pyx_kp_u__115);
  Py_CLEAR(clear_module_state->__pyx_kp_u__117);
  Py_CLEAR(clear_module_state->__pyx_kp_u__118);
  Py_CLEAR(clear_module_state->__pyx_n_u__12);
  Py_CLEAR(clear_module_state->__pyx_kp_u__120);
  Py_CLEAR(clear_module_state->__pyx_kp_u__121);
  Py_CLEAR(clear_module_state->__pyx_kp_u__123);
  Py_CLEAR(clear_module_state->__pyx_kp_u__124);
  Py_CLEAR(clear_module_state->__pyx_kp_u__126);
  Py_CLEAR(clear_module_state->__pyx_kp_u__127);
  Py_CLEAR(clear_module_state->__pyx_kp_u__129);
  Py_CLEAR(clear_module_state->__pyx_kp_u__130);
  Py_CLEAR(clear_module_state->__pyx_kp_u__132);
  Py_CLEAR(clear_module_state->__pyx_kp_u__133);
  Py_CLEAR(clear_module_state->__pyx_kp_u__135);
  Py_CLEAR(clear_module_state->__pyx_kp_u__137);
  Py_CLEAR(clear_module_state->__pyx_kp_u__138);
  Py_CLEAR(clear_module_state->__pyx_n_u__14);
  Py_CLEAR(clear_module_state->__pyx_kp_u__140);
  Py_CLEAR(clear_module_state->__pyx_kp_u__141);
  Py_CLEAR(clear_module_state->__pyx_kp_u__143);
  Py_CLEAR(clear_module_state->__pyx_kp_u__144);
  Py_CLEAR(clear_module_state->__pyx_kp_u__146);
  Py_CLEAR(clear_module_state->__pyx_kp_u__148);
  Py_CLEAR(clear_module_state->__pyx_kp_u__149);
  Py_CLEAR(clear_module_state->__pyx_kp_u__151);
  Py_CLEAR(clear_module_state->__pyx_kp_u__152);
  Py_CLEAR(clear_module_state->__pyx_kp_u__154);
  Py_CLEAR(clear_module_state->__pyx_kp_u__155);
  Py_CLEAR(clear_module_state->__pyx_kp_u__157);
  Py_CLEAR(clear_module_state->__pyx_kp_u__158);
  Py_CLEAR(clear_module_state->__pyx_n_u__16);
  Py_CLEAR(clear_module_state->__pyx_kp_u__160);
  Py_CLEAR(clear_module_state->__pyx_kp_u__161);
  Py_CLEAR(clear_module_state->__pyx_kp_u__163);
  Py_CLEAR(clear_module_state->__pyx_kp_u__164);
  Py_CLEAR(clear_module_state->__pyx_kp_u__166);
  Py_CLEAR(clear_module_state->__pyx_n_s__167);
  Py_CLEAR(clear_module_state->__pyx_kp_u__167);
  Py_CLEAR(clear_module_state->__pyx_kp_u__169);
  Py_CLEAR(clear_module_state->__pyx_kp_u__170);
  Py_CLEAR(clear_module_state->__pyx_kp_u__172);
  Py_CLEAR(clear_module_state->__pyx_kp_u__173);
  Py_CLEAR(clear_module_state->__pyx_kp_u__175);
  Py_CLEAR(clear_module_state->__pyx_kp_u__176);
  Py_CLEAR(clear_module_state->__pyx_kp_u__178);
  Py_CLEAR(clear_module_state->__pyx_kp_u__179);
  Py_CLEAR(clear_module_state->__pyx_n_u__18);
  Py_CLEAR(clear_module_state->__pyx_kp_u__181);
  Py_CLEAR(clear_module_state->__pyx_kp_u__182);
  Py_CLEAR(clear_module_state->__pyx_kp_u__184);
  Py_CLEAR(clear_module_state->__pyx_n_u__185);
  Py_CLEAR(clear_module_state->__pyx_kp_u__187);
  Py_CLEAR(clear_module_state->__pyx_kp_u__188);
  Py_CLEAR(clear_module_state->__pyx_kp_u__190);
  Py_CLEAR(clear_module_state->__pyx_kp_u__191);
  Py_CLEAR(clear_module_state->__pyx_kp_u__193);
  Py_CLEAR(clear_module_state->__pyx_kp_u__194);
  Py_CLEAR(clear_module_state->__pyx_kp_u__196);
  Py_CLEAR(clear_module_state->__pyx_kp_u__197);
  Py_CLEAR(clear_module_state->__pyx_kp_u__2);
  Py_CLEAR(clear_module_state->__pyx_n_u__20);
  Py_CLEAR(clear_module_state->__pyx_n_u__200);
  Py_CLEAR(clear_module_state->__pyx_n_u__201);
  Py_CLEAR(clear_module_state->__pyx_n_u__203);
  Py_CLEAR(clear_module_state->__pyx_n_u__204);
  Py_CLEAR(clear_module_state->__pyx_n_u__206);
  Py_CLEAR(clear_module_state->__pyx_n_u__207);
  Py_CLEAR(clear_module_state->__pyx_n_u__209);
  Py_CLEAR(clear_module_state->__pyx_n_u__210);
  Py_CLEAR(clear_module_state->__pyx_n_u__212);
  Py_CLEAR(clear_module_state->__pyx_n_u__213);
  Py_CLEAR(clear_module_state->__pyx_n_u__215);
  Py_CLEAR(clear_module_state->__pyx_n_u__216);
  Py_CLEAR(clear_module_state->__pyx_n_u__218);
  Py_CLEAR(clear_module_state->__pyx_n_u__219);
  Py_CLEAR(clear_module_state->__pyx_n_u__22);
  Py_CLEAR(clear_module_state->__pyx_n_u__221);
  Py_CLEAR(clear_module_state->__pyx_n_u__222);
  Py_CLEAR(clear_module_state->__pyx_n_u__224);
  Py_CLEAR(clear_module_state->__pyx_n_u__225);
  Py_CLEAR(clear_module_state->__pyx_n_u__227);
  Py_CLEAR(clear_module_state->__pyx_n_u__228);
  Py_CLEAR(clear_module_state->__pyx_n_u__230);
  Py_CLEAR(clear_module_state->__pyx_n_u__231);
  Py_CLEAR(clear_module_state->__pyx_n_u__233);
  Py_CLEAR(clear_module_state->__pyx_n_u__234);
  Py_CLEAR(clear_module_state->__pyx_n_u__236);
  Py_CLEAR(clear_module_state->__pyx_n_u__237);
  Py_CLEAR(clear_module_state->__pyx_n_u__239);
  Py_CLEAR(clear_module_state->__pyx_n_u__24);
  Py_CLEAR(clear_module_state->__pyx_n_u__240);
  Py_CLEAR(clear_module_state->__pyx_n_u__242);
  Py_CLEAR(clear_module_state->__pyx_n_u__243);
  Py_CLEAR(clear_module_state->__pyx_n_u__245);
  Py_CLEAR(clear_module_state->__pyx_n_u__246);
  Py_CLEAR(clear_module_state->__pyx_n_u__248);
  Py_CLEAR(clear_module_state->__pyx_n_u__249);
  Py_CLEAR(clear_module_state->__pyx_n_u__251);
  Py_CLEAR(clear_module_state->__pyx_n_u__252);
  Py_CLEAR(clear_module_state->__pyx_n_u__254);
  Py_CLEAR(clear_module_state->__pyx_n_u__255);
  Py_CLEAR(clear_module_state->__pyx_n_u__257);
  Py_CLEAR(clear_module_state->__pyx_n_u__258);
  Py_CLEAR(clear_module_state->__pyx_n_u__26);
  Py_CLEAR(clear_module_state->__pyx_n_u__260);
  Py_CLEAR(clear_module_state->__pyx_n_u__261);
  Py_CLEAR(clear_module_state->__pyx_n_u__263);
  Py_CLEAR(clear_module_state->__pyx_n_u__264);
  Py_CLEAR(clear_module_state->__pyx_n_u__266);
  Py_CLEAR(clear_module_state->__pyx_n_u__267);
  Py_CLEAR(clear_module_state->__pyx_n_u__269);
  Py_CLEAR(clear_module_state->__pyx_n_u__270);
  Py_CLEAR(clear_module_state->__pyx_n_u__272);
  Py_CLEAR(clear_module_state->__pyx_n_u__273);
  Py_CLEAR(clear_module_state->__pyx_n_u__275);
  Py_CLEAR(clear_module_state->__pyx_n_u__276);
  Py_CLEAR(clear_module_state->__pyx_n_u__278);
  Py_CLEAR(clear_module_state->__pyx_n_u__279);
  Py_CLEAR(clear_module_state->__pyx_n_u__28);
  Py_CLEAR(clear_module_state->__pyx_n_u__281);
  Py_CLEAR(clear_module_state->__pyx_n_u__282);
  Py_CLEAR(clear_module_state->__pyx_n_u__284);
  Py_CLEAR(clear_module_state->__pyx_n_u__285);
  Py_CLEAR(clear_module_state->__pyx_n_u__287);
  Py_CLEAR(clear_module_state->__pyx_n_u__288);
  Py_CLEAR(clear_module_state->__pyx_n_u__290);
  Py_CLEAR(clear_module_state->__pyx_n_u__291);
  Py_CLEAR(clear_module_state->__pyx_n_u__293);
  Py_CLEAR(clear_module_state->__pyx_n_u__294);
  Py_CLEAR(clear_module_state->__pyx_n_u__296);
  Py_CLEAR(clear_module_state->__pyx_n_u__297);
  Py_CLEAR(clear_module_state->__pyx_n_u__299);
  Py_CLEAR(clear_module_state->__pyx_n_u__30);
  Py_CLEAR(clear_module_state->__pyx_n_u__300);
  Py_CLEAR(clear_module_state->__pyx_n_u__302);
  Py_CLEAR(clear_module_state->__pyx_n_u__303);
  Py_CLEAR(clear_module_state->__pyx_n_u__305);
  Py_CLEAR(clear_module_state->__pyx_n_u__306);
  Py_CLEAR(clear_module_state->__pyx_n_u__308);
  Py_CLEAR(clear_module_state->__pyx_n_u__309);
  Py_CLEAR(clear_module_state->__pyx_n_u__311);
  Py_CLEAR(clear_module_state->__pyx_n_u__312);
  Py_CLEAR(clear_module_state->__pyx_n_u__314);
  Py_CLEAR(clear_module_state->__pyx_n_u__315);
  Py_CLEAR(clear_module_state->__pyx_n_u__317);
  Py_CLEAR(clear_module_state->__pyx_n_u__318);
  Py_CLEAR(clear_module_state->__pyx_n_u__32);
  Py_CLEAR(clear_module_state->__pyx_n_u__320);
  Py_CLEAR(clear_module_state->__pyx_n_u__321);
  Py_CLEAR(clear_module_state->__pyx_n_u__323);
  Py_CLEAR(clear_module_state->__pyx_n_u__324);
  Py_CLEAR(clear_module_state->__pyx_n_u__326);
  Py_CLEAR(clear_module_state->__pyx_n_u__327);
  Py_CLEAR(clear_module_state->__pyx_n_u__329);
  Py_CLEAR(clear_module_state->__pyx_n_u__330);
  Py_CLEAR(clear_module_state->__pyx_n_u__332);
  Py_CLEAR(clear_module_state->__pyx_n_u__333);
  Py_CLEAR(clear_module_state->__pyx_n_u__335);
  Py_CLEAR(clear_module_state->__pyx_n_u__336);
  Py_CLEAR(clear_module_state->__pyx_n_u__338);
  Py_CLEAR(clear_module_state->__pyx_n_u__339);
  Py_CLEAR(clear_module_state->__pyx_n_u__34);
  Py_CLEAR(clear_module_state->__pyx_n_u__341);
  Py_CLEAR(clear_module_state->__pyx_n_u__342);
  Py_CLEAR(clear_module_state->__pyx_n_u__344);
  Py_CLEAR(clear_module_state->__pyx_n_u__345);
  Py_CLEAR(clear_module_state->__pyx_n_u__347);
  Py_CLEAR(clear_module_state->__pyx_n_u__348);
  Py_CLEAR(clear_module_state->__pyx_n_u__350);
  Py_CLEAR(clear_module_state->__pyx_n_u__351);
  Py_CLEAR(clear_module_state->__pyx_n_u__353);
  Py_CLEAR(clear_module_state->__pyx_n_u__354);
  Py_CLEAR(clear_module_state->__pyx_n_u__356);
  Py_CLEAR(clear_module_state->__pyx_n_u__357);
  Py_CLEAR(clear_module_state->__pyx_n_u__359);
  Py_CLEAR(clear_module_state->__pyx_n_u__36);
  Py_CLEAR(clear_module_state->__pyx_n_u__360);
  Py_CLEAR(clear_module_state->__pyx_n_u__362);
  Py_CLEAR(clear_module_state->__pyx_n_u__363);
  Py_CLEAR(clear_module_state->__pyx_kp_u__365);
  Py_CLEAR(clear_module_state->__pyx_kp_u__366);
  Py_CLEAR(clear_module_state->__pyx_kp_u__368);
  Py_CLEAR(clear_module_state->__pyx_kp_u__369);
  Py_CLEAR(clear_module_state->__pyx_kp_u__371);
  Py_CLEAR(clear_module_state->__pyx_kp_u__372);
  Py_CLEAR(clear_module_state->__pyx_kp_u__374);
  Py_CLEAR(clear_module_state->__pyx_n_u__375);
  Py_CLEAR(clear_module_state->__pyx_kp_u__377);
  Py_CLEAR(clear_module_state->__pyx_n_u__378);
  Py_CLEAR(clear_module_state->__pyx_n_u__38);
  Py_CLEAR(clear_module_state->__pyx_kp_u__380);
  Py_CLEAR(clear_module_state->__pyx_kp_u__381);
  Py_CLEAR(clear_module_state->__pyx_kp_u__383);
  Py_CLEAR(clear_module_state->__pyx_kp_u__384);
  Py_CLEAR(clear_module_state->__pyx_n_u__386);
  Py_CLEAR(clear_module_state->__pyx_n_u__387);
  Py_CLEAR(clear_module_state->__pyx_n_u__390);
  Py_CLEAR(clear_module_state->__pyx_n_u__392);
  Py_CLEAR(clear_module_state->__pyx_n_u__394);
  Py_CLEAR(clear_module_state->__pyx_n_u__396);
  Py_CLEAR(clear_module_state->__pyx_n_u__398);
  Py_CLEAR(clear_module_state->__pyx_n_u__4);
  Py_CLEAR(clear_module_state->__pyx_n_u__40);
  Py_CLEAR(clear_module_state->__pyx_n_u__400);
  Py_CLEAR(clear_module_state->__pyx_n_u__402);
  Py_CLEAR(clear_module_state->__pyx_n_u__404);
  Py_CLEAR(clear_module_state->__pyx_n_u__406);
  Py_CLEAR(clear_module_state->__pyx_n_u__408);
  Py_CLEAR(clear_module_state->__pyx_n_u__411);
  Py_CLEAR(clear_module_state->__pyx_n_u__413);
  Py_CLEAR(clear_module_state->__pyx_n_u__415);
  Py_CLEAR(clear_module_state->__pyx_n_u__417);
  Py_CLEAR(clear_module_state->__pyx_n_u__419);
  Py_CLEAR(clear_module_state->__pyx_n_u__42);
  Py_CLEAR(clear_module_state->__pyx_n_u__421);
  Py_CLEAR(clear_module_state->__pyx_n_u__423);
  Py_CLEAR(clear_module_state->__pyx_n_u__425);
  Py_CLEAR(clear_module_state->__pyx_n_u__427);
  Py_CLEAR(clear_module_state->__pyx_n_u__429);
  Py_CLEAR(clear_module_state->__pyx_n_u__431);
  Py_CLEAR(clear_module_state->__pyx_n_u__433);
  Py_CLEAR(clear_module_state->__pyx_n_u__435);
  Py_CLEAR(clear_module_state->__pyx_n_u__437);
  Py_CLEAR(clear_module_state->__pyx_n_u__439);
  Py_CLEAR(clear_module_state->__pyx_n_u__44);
  Py_CLEAR(clear_module_state->__pyx_n_u__441);
  Py_CLEAR(clear_module_state->__pyx_n_u__443);
  Py_CLEAR(clear_module_state->__pyx_n_u__445);
  Py_CLEAR(clear_module_state->__pyx_n_u__447);
  Py_CLEAR(clear_module_state->__pyx_n_u__449);
  Py_CLEAR(clear_module_state->__pyx_n_u__451);
  Py_CLEAR(clear_module_state->__pyx_n_u__453);
  Py_CLEAR(clear_module_state->__pyx_n_u__454);
  Py_CLEAR(clear_module_state->__pyx_n_u__457);
  Py_CLEAR(clear_module_state->__pyx_n_u__459);
  Py_CLEAR(clear_module_state->__pyx_n_u__46);
  Py_CLEAR(clear_module_state->__pyx_n_u__461);
  Py_CLEAR(clear_module_state->__pyx_n_u__463);
  Py_CLEAR(clear_module_state->__pyx_n_u__465);
  Py_CLEAR(clear_module_state->__pyx_n_u__467);
  Py_CLEAR(clear_module_state->__pyx_n_u__468);
  Py_CLEAR(clear_module_state->__pyx_n_u__470);
  Py_CLEAR(clear_module_state->__pyx_n_u__471);
  Py_CLEAR(clear_module_state->__pyx_n_u__473);
  Py_CLEAR(clear_module_state->__pyx_n_u__474);
  Py_CLEAR(clear_module_state->__pyx_n_u__476);
  Py_CLEAR(clear_module_state->__pyx_n_u__477);
  Py_CLEAR(clear_module_state->__pyx_n_u__479);
  Py_CLEAR(clear_module_state->__pyx_n_u__48);
  Py_CLEAR(clear_module_state->__pyx_n_u__480);
  Py_CLEAR(clear_module_state->__pyx_kp_u__483);
  Py_CLEAR(clear_module_state->__pyx_kp_u__484);
  Py_CLEAR(clear_module_state->__pyx_kp_u__485);
  Py_CLEAR(clear_module_state->__pyx_kp_u__486);
  Py_CLEAR(clear_module_state->__pyx_kp_u__487);
  Py_CLEAR(clear_module_state->__pyx_kp_u__488);
  Py_CLEAR(clear_module_state->__pyx_kp_u__489);
  Py_CLEAR(clear_module_state->__pyx_kp_u__490);
  Py_CLEAR(clear_module_state->__pyx_kp_u__491);
  Py_CLEAR(clear_module_state->__pyx_kp_u__493);
  Py_CLEAR(clear_module_state->__pyx_kp_u__494);
  Py_CLEAR(clear_module_state->__pyx_kp_u__495);
  Py_CLEAR(clear_module_state->__pyx_kp_u__496);
  Py_CLEAR(clear_module_state->__pyx_kp_u__497);
  Py_CLEAR(clear_module_state->__pyx_kp_u__498);
  Py_CLEAR(clear_module_state->__pyx_n_u__50);
  Py_CLEAR(clear_module_state->__pyx_kp_u__500);
  Py_CLEAR(clear_module_state->__pyx_kp_u__501);
  Py_CLEAR(clear_module_state->__pyx_kp_u__502);
  Py_CLEAR(clear_module_state->__pyx_kp_u__503);
  Py_CLEAR(clear_module_state->__pyx_kp_u__504);
  Py_CLEAR(clear_module_state->__pyx_kp_u__505);
  Py_CLEAR(clear_module_state->__pyx_kp_u__507);
  Py_CLEAR(clear_module_state->__pyx_kp_u__508);
  Py_CLEAR(clear_module_state->__pyx_n_u__52);
  Py_CLEAR(clear_module_state->__pyx_n_u__54);
  Py_CLEAR(clear_module_state->__pyx_n_u__56);
  Py_CLEAR(clear_module_state->__pyx_n_u__58);
  Py_CLEAR(clear_module_state->__pyx_n_u__6);
  Py_CLEAR(clear_module_state->__pyx_n_u__60);
  Py_CLEAR(clear_module_state->__pyx_n_u__62);
  Py_CLEAR(clear_module_state->__pyx_n_u__64);
  Py_CLEAR(clear_module_state->__pyx_n_u__66);
  Py_CLEAR(clear_module_state->__pyx_n_u__68);
  Py_CLEAR(clear_module_state->__pyx_n_u__70);
  Py_CLEAR(clear_module_state->__pyx_n_u__72);
  Py_CLEAR(clear_module_state->__pyx_n_u__74);
  Py_CLEAR(clear_module_state->__pyx_n_u__76);
  Py_CLEAR(clear_module_state->__pyx_n_u__78);
  Py_CLEAR(clear_module_state->__pyx_n_u__8);
  Py_CLEAR(clear_module_state->__pyx_n_u__80);
  Py_CLEAR(clear_module_state->__pyx_n_u__82);
  Py_CLEAR(clear_module_state->__pyx_n_u__84);
  Py_CLEAR(clear_module_state->__pyx_n_u__86);
  Py_CLEAR(clear_module_state->__pyx_n_u__88);
  Py_CLEAR(clear_module_state->__pyx_n_u__90);
  Py_CLEAR(clear_module_state->__pyx_n_u__92);
  Py_CLEAR(clear_module_state->__pyx_n_u__94);
  Py_CLEAR(clear_module_state->__pyx_n_u__96);
  Py_CLEAR(clear_module_state->__pyx_n_u__98);
  Py_CLEAR(clear_module_state->__pyx_n_u_a);
  Py_CLEAR(clear_module_state->__pyx_n_s_after);
  Py_CLEAR(clear_module_state->__pyx_n_s_asyncio_coroutines);
  Py_CLEAR(clear_module_state->__pyx_n_u_b);
  Py_CLEAR(clear_module_state->__pyx_n_s_before);
  Py_CLEAR(clear_module_state->__pyx_n_s_c);
  Py_CLEAR(clear_module_state->__pyx_n_u_c);
  Py_CLEAR(clear_module_state->__pyx_n_s_chain);
  Py_CLEAR(clear_module_state->__pyx_n_s_char_codes);
  Py_CLEAR(clear_module_state->__pyx_n_s_chr);
  Py_CLEAR(clear_module_state->__pyx_n_s_cline_in_traceback);
  Py_CLEAR(clear_module_state->__pyx_n_u_d);
  Py_CLEAR(clear_module_state->__pyx_n_u_e);
  Py_CLEAR(clear_module_state->__pyx_n_u_f);
  Py_CLEAR(clear_module_state->__pyx_n_u_g);
  Py_CLEAR(clear_module_state->__pyx_n_u_h);
  Py_CLEAR(clear_module_state->__pyx_n_u_i);
  Py_CLEAR(clear_module_state->__pyx_n_u_ignore);
  Py_CLEAR(clear_module_state->__pyx_n_s_import);
  Py_CLEAR(clear_module_state->__pyx_n_s_initializing);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_coroutine);
  Py_CLEAR(clear_module_state->__pyx_n_s_itertools);
  Py_CLEAR(clear_module_state->__pyx_n_u_j);
  Py_CLEAR(clear_module_state->__pyx_n_u_k);
  Py_CLEAR(clear_module_state->__pyx_n_u_l);
  Py_CLEAR(clear_module_state->__pyx_n_u_m);
  Py_CLEAR(clear_module_state->__pyx_n_s_main);
  Py_CLEAR(clear_module_state->__pyx_n_s_map);
  Py_CLEAR(clear_module_state->__pyx_n_s_max_repeat_substr_length);
  Py_CLEAR(clear_module_state->__pyx_n_u_n);
  Py_CLEAR(clear_module_state->__pyx_n_s_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_neologdn);
  Py_CLEAR(clear_module_state->__pyx_kp_s_neologdn_pyx);
  Py_CLEAR(clear_module_state->__pyx_n_s_normalize);
  Py_CLEAR(clear_module_state->__pyx_n_u_normalize);
  Py_CLEAR(clear_module_state->__pyx_n_u_normalize_zenkaku);
  Py_CLEAR(clear_module_state->__pyx_n_u_o);
  Py_CLEAR(clear_module_state->__pyx_n_u_p);
  Py_CLEAR(clear_module_state->__pyx_n_u_q);
  Py_CLEAR(clear_module_state->__pyx_n_u_r);
  Py_CLEAR(clear_module_state->__pyx_n_s_range);
  Py_CLEAR(clear_module_state->__pyx_n_u_remove);
  Py_CLEAR(clear_module_state->__pyx_n_s_remove_space);
  Py_CLEAR(clear_module_state->__pyx_n_s_repeat);
  Py_CLEAR(clear_module_state->__pyx_n_s_repeat_threshould);
  Py_CLEAR(clear_module_state->__pyx_n_u_s);
  Py_CLEAR(clear_module_state->__pyx_n_s_shorten_repeat);
  Py_CLEAR(clear_module_state->__pyx_n_s_spec);
  Py_CLEAR(clear_module_state->__pyx_n_s_sys);
  Py_CLEAR(clear_module_state->__pyx_n_u_t);
  Py_CLEAR(clear_module_state->__pyx_n_s_test);
  Py_CLEAR(clear_module_state->__pyx_n_s_text);
  Py_CLEAR(clear_module_state->__pyx_n_s_tilde);
  Py_CLEAR(clear_module_state->__pyx_n_u_u);
  Py_CLEAR(clear_module_state->__pyx_n_u_v);
  Py_CLEAR(clear_module_state->__pyx_n_s_version);
  Py_CLEAR(clear_module_state->__pyx_n_s_version_info);
  Py_CLEAR(clear_module_state->__pyx_n_u_w);
  Py_CLEAR(clear_module_state->__pyx_n_u_x);
  Py_CLEAR(clear_module_state->__pyx_n_u_y);
  Py_CLEAR(clear_module_state->__pyx_n_u_z);
  Py_CLEAR(clear_module_state->__pyx_int_0);
  Py_CLEAR(clear_module_state->__pyx_int_3);
  Py_CLEAR(clear_module_state->__pyx_int_5);
  Py_CLEAR(clear_module_state->__pyx_int_8);
  Py_CLEAR(clear_module_state->__pyx_int_128);
  Py_CLEAR(clear_module_state->__pyx_int_12289);
  Py_CLEAR(clear_module_state->__pyx_int_12352);
  Py_CLEAR(clear_module_state->__pyx_int_12448);
  Py_CLEAR(clear_module_state->__pyx_int_12544);
  Py_CLEAR(clear_module_state->__pyx_int_19968);
  Py_CLEAR(clear_module_state->__pyx_int_40960);
  Py_CLEAR(clear_module_state->__pyx_int_65280);
  Py_CLEAR(clear_module_state->__pyx_int_65520);
  Py_CLEAR(clear_module_state->__pyx_tuple__3);
  Py_CLEAR(clear_module_state->__pyx_tuple__5);
  Py_CLEAR(clear_module_state->__pyx_tuple__7);
  Py_CLEAR(clear_module_state->__pyx_tuple__9);
  Py_CLEAR(clear_module_state->__pyx_tuple__11);
  Py_CLEAR(clear_module_state->__pyx_tuple__13);
  Py_CLEAR(clear_module_state->__pyx_tuple__15);
  Py_CLEAR(clear_module_state->__pyx_tuple__17);
  Py_CLEAR(clear_module_state->__pyx_tuple__19);
  Py_CLEAR(clear_module_state->__pyx_tuple__21);
  Py_CLEAR(clear_module_state->__pyx_tuple__23);
  Py_CLEAR(clear_module_state->__pyx_tuple__25);
  Py_CLEAR(clear_module_state->__pyx_tuple__27);
  Py_CLEAR(clear_module_state->__pyx_tuple__29);
  Py_CLEAR(clear_module_state->__pyx_tuple__31);
  Py_CLEAR(clear_module_state->__pyx_tuple__33);
  Py_CLEAR(clear_module_state->__pyx_tuple__35);
  Py_CLEAR(clear_module_state->__pyx_tuple__37);
  Py_CLEAR(clear_module_state->__pyx_tuple__39);
  Py_CLEAR(clear_module_state->__pyx_tuple__41);
  Py_CLEAR(clear_module_state->__pyx_tuple__43);
  Py_CLEAR(clear_module_state->__pyx_tuple__45);
  Py_CLEAR(clear_module_state->__pyx_tuple__47);
  Py_CLEAR(clear_module_state->__pyx_tuple__49);
  Py_CLEAR(clear_module_state->__pyx_tuple__51);
  Py_CLEAR(clear_module_state->__pyx_tuple__53);
  Py_CLEAR(clear_module_state->__pyx_tuple__55);
  Py_CLEAR(clear_module_state->__pyx_tuple__57);
  Py_CLEAR(clear_module_state->__pyx_tuple__59);
  Py_CLEAR(clear_module_state->__pyx_tuple__61);
  Py_CLEAR(clear_module_state->__pyx_tuple__63);
  Py_CLEAR(clear_module_state->__pyx_tuple__65);
  Py_CLEAR(clear_module_state->__pyx_tuple__67);
  Py_CLEAR(clear_module_state->__pyx_tuple__69);
  Py_CLEAR(clear_module_state->__pyx_tuple__71);
  Py_CLEAR(clear_module_state->__pyx_tuple__73);
  Py_CLEAR(clear_module_state->__pyx_tuple__75);
  Py_CLEAR(clear_module_state->__pyx_tuple__77);
  Py_CLEAR(clear_module_state->__pyx_tuple__79);
  Py_CLEAR(clear_module_state->__pyx_tuple__81);
  Py_CLEAR(clear_module_state->__pyx_tuple__83);
  Py_CLEAR(clear_module_state->__pyx_tuple__85);
  Py_CLEAR(clear_module_state->__pyx_tuple__87);
  Py_CLEAR(clear_module_state->__pyx_tuple__89);
  Py_CLEAR(clear_module_state->__pyx_tuple__91);
  Py_CLEAR(clear_module_state->__pyx_tuple__93);
  Py_CLEAR(clear_module_state->__pyx_tuple__95);
  Py_CLEAR(clear_module_state->__pyx_tuple__97);
  Py_CLEAR(clear_module_state->__pyx_tuple__99);
  Py_CLEAR(clear_module_state->__pyx_tuple__101);
  Py_CLEAR(clear_module_state->__pyx_tuple__103);
  Py_CLEAR(clear_module_state->__pyx_tuple__105);
  Py_CLEAR(clear_module_state->__pyx_tuple__107);
  Py_CLEAR(clear_module_state->__pyx_tuple__110);
  Py_CLEAR(clear_module_state->__pyx_tuple__113);
  Py_CLEAR(clear_module_state->__pyx_tuple__116);
  Py_CLEAR(clear_module_state->__pyx_tuple__119);
  Py_CLEAR(clear_module_state->__pyx_tuple__122);
  Py_CLEAR(clear_module_state->__pyx_tuple__125);
  Py_CLEAR(clear_module_state->__pyx_tuple__128);
  Py_CLEAR(clear_module_state->__pyx_tuple__131);
  Py_CLEAR(clear_module_state->__pyx_tuple__134);
  Py_CLEAR(clear_module_state->__pyx_tuple__136);
  Py_CLEAR(clear_module_state->__pyx_tuple__139);
  Py_CLEAR(clear_module_state->__pyx_tuple__142);
  Py_CLEAR(clear_module_state->__pyx_tuple__145);
  Py_CLEAR(clear_module_state->__pyx_tuple__147);
  Py_CLEAR(clear_module_state->__pyx_tuple__150);
  Py_CLEAR(clear_module_state->__pyx_tuple__153);
  Py_CLEAR(clear_module_state->__pyx_tuple__156);
  Py_CLEAR(clear_module_state->__pyx_tuple__159);
  Py_CLEAR(clear_module_state->__pyx_tuple__162);
  Py_CLEAR(clear_module_state->__pyx_tuple__165);
  Py_CLEAR(clear_module_state->__pyx_tuple__168);
  Py_CLEAR(clear_module_state->__pyx_tuple__171);
  Py_CLEAR(clear_module_state->__pyx_tuple__174);
  Py_CLEAR(clear_module_state->__pyx_tuple__177);
  Py_CLEAR(clear_module_state->__pyx_tuple__180);
  Py_CLEAR(clear_module_state->__pyx_tuple__183);
  Py_CLEAR(clear_module_state->__pyx_tuple__186);
  Py_CLEAR(clear_module_state->__pyx_tuple__189);
  Py_CLEAR(clear_module_state->__pyx_tuple__192);
  Py_CLEAR(clear_module_state->__pyx_tuple__195);
  Py_CLEAR(clear_module_state->__pyx_tuple__198);
  Py_CLEAR(clear_module_state->__pyx_tuple__199);
  Py_CLEAR(clear_module_state->__pyx_tuple__202);
  Py_CLEAR(clear_module_state->__pyx_tuple__205);
  Py_CLEAR(clear_module_state->__pyx_tuple__208);
  Py_CLEAR(clear_module_state->__pyx_tuple__211);
  Py_CLEAR(clear_module_state->__pyx_tuple__214);
  Py_CLEAR(clear_module_state->__pyx_tuple__217);
  Py_CLEAR(clear_module_state->__pyx_tuple__220);
  Py_CLEAR(clear_module_state->__pyx_tuple__223);
  Py_CLEAR(clear_module_state->__pyx_tuple__226);
  Py_CLEAR(clear_module_state->__pyx_tuple__229);
  Py_CLEAR(clear_module_state->__pyx_tuple__232);
  Py_CLEAR(clear_module_state->__pyx_tuple__235);
  Py_CLEAR(clear_module_state->__pyx_tuple__238);
  Py_CLEAR(clear_module_state->__pyx_tuple__241);
  Py_CLEAR(clear_module_state->__pyx_tuple__244);
  Py_CLEAR(clear_module_state->__pyx_tuple__247);
  Py_CLEAR(clear_module_state->__pyx_tuple__250);
  Py_CLEAR(clear_module_state->__pyx_tuple__253);
  Py_CLEAR(clear_module_state->__pyx_tuple__256);
  Py_CLEAR(clear_module_state->__pyx_tuple__259);
  Py_CLEAR(clear_module_state->__pyx_tuple__262);
  Py_CLEAR(clear_module_state->__pyx_tuple__265);
  Py_CLEAR(clear_module_state->__pyx_tuple__268);
  Py_CLEAR(clear_module_state->__pyx_tuple__271);
  Py_CLEAR(clear_module_state->__pyx_tuple__274);
  Py_CLEAR(clear_module_state->__pyx_tuple__277);
  Py_CLEAR(clear_module_state->__pyx_tuple__280);
  Py_CLEAR(clear_module_state->__pyx_tuple__283);
  Py_CLEAR(clear_module_state->__pyx_tuple__286);
  Py_CLEAR(clear_module_state->__pyx_tuple__289);
  Py_CLEAR(clear_module_state->__pyx_tuple__292);
  Py_CLEAR(clear_module_state->__pyx_tuple__295);
  Py_CLEAR(clear_module_state->__pyx_tuple__298);
  Py_CLEAR(clear_module_state->__pyx_tuple__301);
  Py_CLEAR(clear_module_state->__pyx_tuple__304);
  Py_CLEAR(clear_module_state->__pyx_tuple__307);
  Py_CLEAR(clear_module_state->__pyx_tuple__310);
  Py_CLEAR(clear_module_state->__pyx_tuple__313);
  Py_CLEAR(clear_module_state->__pyx_tuple__316);
  Py_CLEAR(clear_module_state->__pyx_tuple__319);
  Py_CLEAR(clear_module_state->__pyx_tuple__322);
  Py_CLEAR(clear_module_state->__pyx_tuple__325);
  Py_CLEAR(clear_module_state->__pyx_tuple__328);
  Py_CLEAR(clear_module_state->__pyx_tuple__331);
  Py_CLEAR(clear_module_state->__pyx_tuple__334);
  Py_CLEAR(clear_module_state->__pyx_tuple__337);
  Py_CLEAR(clear_module_state->__pyx_tuple__340);
  Py_CLEAR(clear_module_state->__pyx_tuple__343);
  Py_CLEAR(clear_module_state->__pyx_tuple__346);
  Py_CLEAR(clear_module_state->__pyx_tuple__349);
  Py_CLEAR(clear_module_state->__pyx_tuple__352);
  Py_CLEAR(clear_module_state->__pyx_tuple__355);
  Py_CLEAR(clear_module_state->__pyx_tuple__358);
  Py_CLEAR(clear_module_state->__pyx_tuple__361);
  Py_CLEAR(clear_module_state->__pyx_tuple__364);
  Py_CLEAR(clear_module_state->__pyx_tuple__367);
  Py_CLEAR(clear_module_state->__pyx_tuple__370);
  Py_CLEAR(clear_module_state->__pyx_tuple__373);
  Py_CLEAR(clear_module_state->__pyx_tuple__376);
  Py_CLEAR(clear_module_state->__pyx_tuple__379);
  Py_CLEAR(clear_module_state->__pyx_tuple__382);
  Py_CLEAR(clear_module_state->__pyx_tuple__385);
  Py_CLEAR(clear_module_state->__pyx_tuple__388);
  Py_CLEAR(clear_module_state->__pyx_tuple__389);
  Py_CLEAR(clear_module_state->__pyx_tuple__391);
  Py_CLEAR(clear_module_state->__pyx_tuple__393);
  Py_CLEAR(clear_module_state->__pyx_tuple__395);
  Py_CLEAR(clear_module_state->__pyx_tuple__397);
  Py_CLEAR(clear_module_state->__pyx_tuple__399);
  Py_CLEAR(clear_module_state->__pyx_tuple__401);
  Py_CLEAR(clear_module_state->__pyx_tuple__403);
  Py_CLEAR(clear_module_state->__pyx_tuple__405);
  Py_CLEAR(clear_module_state->__pyx_tuple__407);
  Py_CLEAR(clear_module_state->__pyx_tuple__409);
  Py_CLEAR(clear_module_state->__pyx_tuple__410);
  Py_CLEAR(clear_module_state->__pyx_tuple__412);
  Py_CLEAR(clear_module_state->__pyx_tuple__414);
  Py_CLEAR(clear_module_state->__pyx_tuple__416);
  Py_CLEAR(clear_module_state->__pyx_tuple__418);
  Py_CLEAR(clear_module_state->__pyx_tuple__420);
  Py_CLEAR(clear_module_state->__pyx_tuple__422);
  Py_CLEAR(clear_module_state->__pyx_tuple__424);
  Py_CLEAR(clear_module_state->__pyx_tuple__426);
  Py_CLEAR(clear_module_state->__pyx_tuple__428);
  Py_CLEAR(clear_module_state->__pyx_tuple__430);
  Py_CLEAR(clear_module_state->__pyx_tuple__432);
  Py_CLEAR(clear_module_state->__pyx_tuple__434);
  Py_CLEAR(clear_module_state->__pyx_tuple__436);
  Py_CLEAR(clear_module_state->__pyx_tuple__438);
  Py_CLEAR(clear_module_state->__pyx_tuple__440);
  Py_CLEAR(clear_module_state->__pyx_tuple__442);
  Py_CLEAR(clear_module_state->__pyx_tuple__444);
  Py_CLEAR(clear_module_state->__pyx_tuple__446);
  Py_CLEAR(clear_module_state->__pyx_tuple__448);
  Py_CLEAR(clear_module_state->__pyx_tuple__450);
  Py_CLEAR(clear_module_state->__pyx_tuple__452);
  Py_CLEAR(clear_module_state->__pyx_tuple__455);
  Py_CLEAR(clear_module_state->__pyx_tuple__456);
  Py_CLEAR(clear_module_state->__pyx_tuple__458);
  Py_CLEAR(clear_module_state->__pyx_tuple__460);
  Py_CLEAR(clear_module_state->__pyx_tuple__462);
  Py_CLEAR(clear_module_state->__pyx_tuple__464);
  Py_CLEAR(clear_module_state->__pyx_tuple__466);
  Py_CLEAR(clear_module_state->__pyx_tuple__469);
  Py_CLEAR(clear_module_state->__pyx_tuple__472);
  Py_CLEAR(clear_module_state->__pyx_tuple__475);
  Py_CLEAR(clear_module_state->__pyx_tuple__478);
  Py_CLEAR(clear_module_state->__pyx_tuple__481);
  Py_CLEAR(clear_module_state->__pyx_tuple__482);
  Py_CLEAR(clear_module_state->__pyx_tuple__492);
  Py_CLEAR(clear_module_state->__pyx_tuple__499);
  Py_CLEAR(clear_module_state->__pyx_tuple__506);
  Py_CLEAR(clear_module_state->__pyx_tuple__509);
  Py_CLEAR(clear_module_state->__pyx_tuple__510);
  Py_CLEAR(clear_module_state->__pyx_tuple__511);
  Py_CLEAR(clear_module_state->__pyx_tuple__512);
  Py_CLEAR(clear_module_state->__pyx_tuple__513);
  Py_CLEAR(clear_module_state->__pyx_tuple__514);
  Py_CLEAR(clear_module_state->__pyx_tuple__515);
  Py_CLEAR(clear_module_state->__pyx_tuple__516);
  Py_CLEAR(clear_module_state->__pyx_tuple__518);
  Py_CLEAR(clear_module_state->__pyx_tuple__519);
  Py_CLEAR(clear_module_state->__pyx_tuple__521);
  Py_CLEAR(clear_module_state->__pyx_codeobj__517);
  Py_CLEAR(clear_module_state->__pyx_codeobj__520);
  return 0;
}
#endif
/* #### Code section: module_state_traverse ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_traverse(PyObject *m, visitproc visit, void *arg) {
  __pyx_mstate *traverse_module_state = __pyx_mstate(m);
  if (!traverse_module_state) return 0;
  Py_VISIT(traverse_module_state->__pyx_d);
  Py_VISIT(traverse_module_state->__pyx_b);
  Py_VISIT(traverse_module_state->__pyx_cython_runtime);
  Py_VISIT(traverse_module_state->__pyx_empty_tuple);
  Py_VISIT(traverse_module_state->__pyx_empty_bytes);
  Py_VISIT(traverse_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_VISIT(traverse_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_VISIT(traverse_module_state->__pyx_FusedFunctionType);
  #endif
  Py_VISIT(traverse_module_state->__pyx_n_s_);
  Py_VISIT(traverse_module_state->__pyx_kp_u_);
  Py_VISIT(traverse_module_state->__pyx_kp_u_0);
  Py_VISIT(traverse_module_state->__pyx_kp_u_0_5_3);
  Py_VISIT(traverse_module_state->__pyx_kp_u_1);
  Py_VISIT(traverse_module_state->__pyx_kp_u_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_3);
  Py_VISIT(traverse_module_state->__pyx_kp_u_4);
  Py_VISIT(traverse_module_state->__pyx_kp_u_5);
  Py_VISIT(traverse_module_state->__pyx_kp_u_6);
  Py_VISIT(traverse_module_state->__pyx_kp_u_7);
  Py_VISIT(traverse_module_state->__pyx_kp_u_8);
  Py_VISIT(traverse_module_state->__pyx_kp_u_9);
  Py_VISIT(traverse_module_state->__pyx_n_u_A);
  Py_VISIT(traverse_module_state->__pyx_n_s_ASCII);
  Py_VISIT(traverse_module_state->__pyx_n_u_B);
  Py_VISIT(traverse_module_state->__pyx_n_u_C);
  Py_VISIT(traverse_module_state->__pyx_n_s_CHOONPUS);
  Py_VISIT(traverse_module_state->__pyx_n_u_D);
  Py_VISIT(traverse_module_state->__pyx_n_s_DIGIT);
  Py_VISIT(traverse_module_state->__pyx_n_u_E);
  Py_VISIT(traverse_module_state->__pyx_n_u_F);
  Py_VISIT(traverse_module_state->__pyx_n_u_G);
  Py_VISIT(traverse_module_state->__pyx_n_u_H);
  Py_VISIT(traverse_module_state->__pyx_n_s_HIPHENS);
  Py_VISIT(traverse_module_state->__pyx_n_u_I);
  Py_VISIT(traverse_module_state->__pyx_n_u_J);
  Py_VISIT(traverse_module_state->__pyx_n_u_K);
  Py_VISIT(traverse_module_state->__pyx_n_s_KANA);
  Py_VISIT(traverse_module_state->__pyx_n_s_KANA_MARU);
  Py_VISIT(traverse_module_state->__pyx_n_s_KANA_TEN);
  Py_VISIT(traverse_module_state->__pyx_n_u_L);
  Py_VISIT(traverse_module_state->__pyx_n_u_M);
  Py_VISIT(traverse_module_state->__pyx_n_u_N);
  Py_VISIT(traverse_module_state->__pyx_n_u_O);
  Py_VISIT(traverse_module_state->__pyx_n_u_P);
  Py_VISIT(traverse_module_state->__pyx_n_u_Q);
  Py_VISIT(traverse_module_state->__pyx_n_u_R);
  Py_VISIT(traverse_module_state->__pyx_n_u_S);
  Py_VISIT(traverse_module_state->__pyx_n_s_SPACE);
  Py_VISIT(traverse_module_state->__pyx_n_u_T);
  Py_VISIT(traverse_module_state->__pyx_n_s_TILDES);
  Py_VISIT(traverse_module_state->__pyx_n_u_U);
  Py_VISIT(traverse_module_state->__pyx_n_u_V);
  Py_VISIT(traverse_module_state->__pyx_n_s_VERSION);
  Py_VISIT(traverse_module_state->__pyx_n_u_W);
  Py_VISIT(traverse_module_state->__pyx_n_u_X);
  Py_VISIT(traverse_module_state->__pyx_n_u_Y);
  Py_VISIT(traverse_module_state->__pyx_n_u_Z);
  Py_VISIT(traverse_module_state->__pyx_n_u__10);
  Py_VISIT(traverse_module_state->__pyx_n_u__100);
  Py_VISIT(traverse_module_state->__pyx_n_u__102);
  Py_VISIT(traverse_module_state->__pyx_n_u__104);
  Py_VISIT(traverse_module_state->__pyx_n_u__106);
  Py_VISIT(traverse_module_state->__pyx_kp_u__108);
  Py_VISIT(traverse_module_state->__pyx_kp_u__109);
  Py_VISIT(traverse_module_state->__pyx_kp_u__111);
  Py_VISIT(traverse_module_state->__pyx_kp_u__112);
  Py_VISIT(traverse_module_state->__pyx_kp_u__114);
  Py_VISIT(traverse_module_state->__pyx_kp_u__115);
  Py_VISIT(traverse_module_state->__pyx_kp_u__117);
  Py_VISIT(traverse_module_state->__pyx_kp_u__118);
  Py_VISIT(traverse_module_state->__pyx_n_u__12);
  Py_VISIT(traverse_module_state->__pyx_kp_u__120);
  Py_VISIT(traverse_module_state->__pyx_kp_u__121);
  Py_VISIT(traverse_module_state->__pyx_kp_u__123);
  Py_VISIT(traverse_module_state->__pyx_kp_u__124);
  Py_VISIT(traverse_module_state->__pyx_kp_u__126);
  Py_VISIT(traverse_module_state->__pyx_kp_u__127);
  Py_VISIT(traverse_module_state->__pyx_kp_u__129);
  Py_VISIT(traverse_module_state->__pyx_kp_u__130);
  Py_VISIT(traverse_module_state->__pyx_kp_u__132);
  Py_VISIT(traverse_module_state->__pyx_kp_u__133);
  Py_VISIT(traverse_module_state->__pyx_kp_u__135);
  Py_VISIT(traverse_module_state->__pyx_kp_u__137);
  Py_VISIT(traverse_module_state->__pyx_kp_u__138);
  Py_VISIT(traverse_module_state->__pyx_n_u__14);
  Py_VISIT(traverse_module_state->__pyx_kp_u__140);
  Py_VISIT(traverse_module_state->__pyx_kp_u__141);
  Py_VISIT(traverse_module_state->__pyx_kp_u__143);
  Py_VISIT(traverse_module_state->__pyx_kp_u__144);
  Py_VISIT(traverse_module_state->__pyx_kp_u__146);
  Py_VISIT(traverse_module_state->__pyx_kp_u__148);
  Py_VISIT(traverse_module_state->__pyx_kp_u__149);
  Py_VISIT(traverse_module_state->__pyx_kp_u__151);
  Py_VISIT(traverse_module_state->__pyx_kp_u__152);
  Py_VISIT(traverse_module_state->__pyx_kp_u__154);
  Py_VISIT(traverse_module_state->__pyx_kp_u__155);
  Py_VISIT(traverse_module_state->__pyx_kp_u__157);
  Py_VISIT(traverse_module_state->__pyx_kp_u__158);
  Py_VISIT(traverse_module_state->__pyx_n_u__16);
  Py_VISIT(traverse_module_state->__pyx_kp_u__160);
  Py_VISIT(traverse_module_state->__pyx_kp_u__161);
  Py_VISIT(traverse_module_state->__pyx_kp_u__163);
  Py_VISIT(traverse_module_state->__pyx_kp_u__164);
  Py_VISIT(traverse_module_state->__pyx_kp_u__166);
  Py_VISIT(traverse_module_state->__pyx_n_s__167);
  Py_VISIT(traverse_module_state->__pyx_kp_u__167);
  Py_VISIT(traverse_module_state->__pyx_kp_u__169);
  Py_VISIT(traverse_module_state->__pyx_kp_u__170);
  Py_VISIT(traverse_module_state->__pyx_kp_u__172);
  Py_VISIT(traverse_module_state->__pyx_kp_u__173);
  Py_VISIT(traverse_module_state->__pyx_kp_u__175);
  Py_VISIT(traverse_module_state->__pyx_kp_u__176);
  Py_VISIT(traverse_module_state->__pyx_kp_u__178);
  Py_VISIT(traverse_module_state->__pyx_kp_u__179);
  Py_VISIT(traverse_module_state->__pyx_n_u__18);
  Py_VISIT(traverse_module_state->__pyx_kp_u__181);
  Py_VISIT(traverse_module_state->__pyx_kp_u__182);
  Py_VISIT(traverse_module_state->__pyx_kp_u__184);
  Py_VISIT(traverse_module_state->__pyx_n_u__185);
  Py_VISIT(traverse_module_state->__pyx_kp_u__187);
  Py_VISIT(traverse_module_state->__pyx_kp_u__188);
  Py_VISIT(traverse_module_state->__pyx_kp_u__190);
  Py_VISIT(traverse_module_state->__pyx_kp_u__191);
  Py_VISIT(traverse_module_state->__pyx_kp_u__193);
  Py_VISIT(traverse_module_state->__pyx_kp_u__194);
  Py_VISIT(traverse_module_state->__pyx_kp_u__196);
  Py_VISIT(traverse_module_state->__pyx_kp_u__197);
  Py_VISIT(traverse_module_state->__pyx_kp_u__2);
  Py_VISIT(traverse_module_state->__pyx_n_u__20);
  Py_VISIT(traverse_module_state->__pyx_n_u__200);
  Py_VISIT(traverse_module_state->__pyx_n_u__201);
  Py_VISIT(traverse_module_state->__pyx_n_u__203);
  Py_VISIT(traverse_module_state->__pyx_n_u__204);
  Py_VISIT(traverse_module_state->__pyx_n_u__206);
  Py_VISIT(traverse_module_state->__pyx_n_u__207);
  Py_VISIT(traverse_module_state->__pyx_n_u__209);
  Py_VISIT(traverse_module_state->__pyx_n_u__210);
  Py_VISIT(traverse_module_state->__pyx_n_u__212);
  Py_VISIT(traverse_module_state->__pyx_n_u__213);
  Py_VISIT(traverse_module_state->__pyx_n_u__215);
  Py_VISIT(traverse_module_state->__pyx_n_u__216);
  Py_VISIT(traverse_module_state->__pyx_n_u__218);
  Py_VISIT(traverse_module_state->__pyx_n_u__219);
  Py_VISIT(traverse_module_state->__pyx_n_u__22);
  Py_VISIT(traverse_module_state->__pyx_n_u__221);
  Py_VISIT(traverse_module_state->__pyx_n_u__222);
  Py_VISIT(traverse_module_state->__pyx_n_u__224);
  Py_VISIT(traverse_module_state->__pyx_n_u__225);
  Py_VISIT(traverse_module_state->__pyx_n_u__227);
  Py_VISIT(traverse_module_state->__pyx_n_u__228);
  Py_VISIT(traverse_module_state->__pyx_n_u__230);
  Py_VISIT(traverse_module_state->__pyx_n_u__231);
  Py_VISIT(traverse_module_state->__pyx_n_u__233);
  Py_VISIT(traverse_module_state->__pyx_n_u__234);
  Py_VISIT(traverse_module_state->__pyx_n_u__236);
  Py_VISIT(traverse_module_state->__pyx_n_u__237);
  Py_VISIT(traverse_module_state->__pyx_n_u__239);
  Py_VISIT(traverse_module_state->__pyx_n_u__24);
  Py_VISIT(traverse_module_state->__pyx_n_u__240);
  Py_VISIT(traverse_module_state->__pyx_n_u__242);
  Py_VISIT(traverse_module_state->__pyx_n_u__243);
  Py_VISIT(traverse_module_state->__pyx_n_u__245);
  Py_VISIT(traverse_module_state->__pyx_n_u__246);
  Py_VISIT(traverse_module_state->__pyx_n_u__248);
  Py_VISIT(traverse_module_state->__pyx_n_u__249);
  Py_VISIT(traverse_module_state->__pyx_n_u__251);
  Py_VISIT(traverse_module_state->__pyx_n_u__252);
  Py_VISIT(traverse_module_state->__pyx_n_u__254);
  Py_VISIT(traverse_module_state->__pyx_n_u__255);
  Py_VISIT(traverse_module_state->__pyx_n_u__257);
  Py_VISIT(traverse_module_state->__pyx_n_u__258);
  Py_VISIT(traverse_module_state->__pyx_n_u__26);
  Py_VISIT(traverse_module_state->__pyx_n_u__260);
  Py_VISIT(traverse_module_state->__pyx_n_u__261);
  Py_VISIT(traverse_module_state->__pyx_n_u__263);
  Py_VISIT(traverse_module_state->__pyx_n_u__264);
  Py_VISIT(traverse_module_state->__pyx_n_u__266);
  Py_VISIT(traverse_module_state->__pyx_n_u__267);
  Py_VISIT(traverse_module_state->__pyx_n_u__269);
  Py_VISIT(traverse_module_state->__pyx_n_u__270);
  Py_VISIT(traverse_module_state->__pyx_n_u__272);
  Py_VISIT(traverse_module_state->__pyx_n_u__273);
  Py_VISIT(traverse_module_state->__pyx_n_u__275);
  Py_VISIT(traverse_module_state->__pyx_n_u__276);
  Py_VISIT(traverse_module_state->__pyx_n_u__278);
  Py_VISIT(traverse_module_state->__pyx_n_u__279);
  Py_VISIT(traverse_module_state->__pyx_n_u__28);
  Py_VISIT(traverse_module_state->__pyx_n_u__281);
  Py_VISIT(traverse_module_state->__pyx_n_u__282);
  Py_VISIT(traverse_module_state->__pyx_n_u__284);
  Py_VISIT(traverse_module_state->__pyx_n_u__285);
  Py_VISIT(traverse_module_state->__pyx_n_u__287);
  Py_VISIT(traverse_module_state->__pyx_n_u__288);
  Py_VISIT(traverse_module_state->__pyx_n_u__290);
  Py_VISIT(traverse_module_state->__pyx_n_u__291);
  Py_VISIT(traverse_module_state->__pyx_n_u__293);
  Py_VISIT(traverse_module_state->__pyx_n_u__294);
  Py_VISIT(traverse_module_state->__pyx_n_u__296);
  Py_VISIT(traverse_module_state->__pyx_n_u__297);
  Py_VISIT(traverse_module_state->__pyx_n_u__299);
  Py_VISIT(traverse_module_state->__pyx_n_u__30);
  Py_VISIT(traverse_module_state->__pyx_n_u__300);
  Py_VISIT(traverse_module_state->__pyx_n_u__302);
  Py_VISIT(traverse_module_state->__pyx_n_u__303);
  Py_VISIT(traverse_module_state->__pyx_n_u__305);
  Py_VISIT(traverse_module_state->__pyx_n_u__306);
  Py_VISIT(traverse_module_state->__pyx_n_u__308);
  Py_VISIT(traverse_module_state->__pyx_n_u__309);
  Py_VISIT(traverse_module_state->__pyx_n_u__311);
  Py_VISIT(traverse_module_state->__pyx_n_u__312);
  Py_VISIT(traverse_module_state->__pyx_n_u__314);
  Py_VISIT(traverse_module_state->__pyx_n_u__315);
  Py_VISIT(traverse_module_state->__pyx_n_u__317);
  Py_VISIT(traverse_module_state->__pyx_n_u__318);
  Py_VISIT(traverse_module_state->__pyx_n_u__32);
  Py_VISIT(traverse_module_state->__pyx_n_u__320);
  Py_VISIT(traverse_module_state->__pyx_n_u__321);
  Py_VISIT(traverse_module_state->__pyx_n_u__323);
  Py_VISIT(traverse_module_state->__pyx_n_u__324);
  Py_VISIT(traverse_module_state->__pyx_n_u__326);
  Py_VISIT(traverse_module_state->__pyx_n_u__327);
  Py_VISIT(traverse_module_state->__pyx_n_u__329);
  Py_VISIT(traverse_module_state->__pyx_n_u__330);
  Py_VISIT(traverse_module_state->__pyx_n_u__332);
  Py_VISIT(traverse_module_state->__pyx_n_u__333);
  Py_VISIT(traverse_module_state->__pyx_n_u__335);
  Py_VISIT(traverse_module_state->__pyx_n_u__336);
  Py_VISIT(traverse_module_state->__pyx_n_u__338);
  Py_VISIT(traverse_module_state->__pyx_n_u__339);
  Py_VISIT(traverse_module_state->__pyx_n_u__34);
  Py_VISIT(traverse_module_state->__pyx_n_u__341);
  Py_VISIT(traverse_module_state->__pyx_n_u__342);
  Py_VISIT(traverse_module_state->__pyx_n_u__344);
  Py_VISIT(traverse_module_state->__pyx_n_u__345);
  Py_VISIT(traverse_module_state->__pyx_n_u__347);
  Py_VISIT(traverse_module_state->__pyx_n_u__348);
  Py_VISIT(traverse_module_state->__pyx_n_u__350);
  Py_VISIT(traverse_module_state->__pyx_n_u__351);
  Py_VISIT(traverse_module_state->__pyx_n_u__353);
  Py_VISIT(traverse_module_state->__pyx_n_u__354);
  Py_VISIT(traverse_module_state->__pyx_n_u__356);
  Py_VISIT(traverse_module_state->__pyx_n_u__357);
  Py_VISIT(traverse_module_state->__pyx_n_u__359);
  Py_VISIT(traverse_module_state->__pyx_n_u__36);
  Py_VISIT(traverse_module_state->__pyx_n_u__360);
  Py_VISIT(traverse_module_state->__pyx_n_u__362);
  Py_VISIT(traverse_module_state->__pyx_n_u__363);
  Py_VISIT(traverse_module_state->__pyx_kp_u__365);
  Py_VISIT(traverse_module_state->__pyx_kp_u__366);
  Py_VISIT(traverse_module_state->__pyx_kp_u__368);
  Py_VISIT(traverse_module_state->__pyx_kp_u__369);
  Py_VISIT(traverse_module_state->__pyx_kp_u__371);
  Py_VISIT(traverse_module_state->__pyx_kp_u__372);
  Py_VISIT(traverse_module_state->__pyx_kp_u__374);
  Py_VISIT(traverse_module_state->__pyx_n_u__375);
  Py_VISIT(traverse_module_state->__pyx_kp_u__377);
  Py_VISIT(traverse_module_state->__pyx_n_u__378);
  Py_VISIT(traverse_module_state->__pyx_n_u__38);
  Py_VISIT(traverse_module_state->__pyx_kp_u__380);
  Py_VISIT(traverse_module_state->__pyx_kp_u__381);
  Py_VISIT(traverse_module_state->__pyx_kp_u__383);
  Py_VISIT(traverse_module_state->__pyx_kp_u__384);
  Py_VISIT(traverse_module_state->__pyx_n_u__386);
  Py_VISIT(traverse_module_state->__pyx_n_u__387);
  Py_VISIT(traverse_module_state->__pyx_n_u__390);
  Py_VISIT(traverse_module_state->__pyx_n_u__392);
  Py_VISIT(traverse_module_state->__pyx_n_u__394);
  Py_VISIT(traverse_module_state->__pyx_n_u__396);
  Py_VISIT(traverse_module_state->__pyx_n_u__398);
  Py_VISIT(traverse_module_state->__pyx_n_u__4);
  Py_VISIT(traverse_module_state->__pyx_n_u__40);
  Py_VISIT(traverse_module_state->__pyx_n_u__400);
  Py_VISIT(traverse_module_state->__pyx_n_u__402);
  Py_VISIT(traverse_module_state->__pyx_n_u__404);
  Py_VISIT(traverse_module_state->__pyx_n_u__406);
  Py_VISIT(traverse_module_state->__pyx_n_u__408);
  Py_VISIT(traverse_module_state->__pyx_n_u__411);
  Py_VISIT(traverse_module_state->__pyx_n_u__413);
  Py_VISIT(traverse_module_state->__pyx_n_u__415);
  Py_VISIT(traverse_module_state->__pyx_n_u__417);
  Py_VISIT(traverse_module_state->__pyx_n_u__419);
  Py_VISIT(traverse_module_state->__pyx_n_u__42);
  Py_VISIT(traverse_module_state->__pyx_n_u__421);
  Py_VISIT(traverse_module_state->__pyx_n_u__423);
  Py_VISIT(traverse_module_state->__pyx_n_u__425);
  Py_VISIT(traverse_module_state->__pyx_n_u__427);
  Py_VISIT(traverse_module_state->__pyx_n_u__429);
  Py_VISIT(traverse_module_state->__pyx_n_u__431);
  Py_VISIT(traverse_module_state->__pyx_n_u__433);
  Py_VISIT(traverse_module_state->__pyx_n_u__435);
  Py_VISIT(traverse_module_state->__pyx_n_u__437);
  Py_VISIT(traverse_module_state->__pyx_n_u__439);
  Py_VISIT(traverse_module_state->__pyx_n_u__44);
  Py_VISIT(traverse_module_state->__pyx_n_u__441);
  Py_VISIT(traverse_module_state->__pyx_n_u__443);
  Py_VISIT(traverse_module_state->__pyx_n_u__445);
  Py_VISIT(traverse_module_state->__pyx_n_u__447);
  Py_VISIT(traverse_module_state->__pyx_n_u__449);
  Py_VISIT(traverse_module_state->__pyx_n_u__451);
  Py_VISIT(traverse_module_state->__pyx_n_u__453);
  Py_VISIT(traverse_module_state->__pyx_n_u__454);
  Py_VISIT(traverse_module_state->__pyx_n_u__457);
  Py_VISIT(traverse_module_state->__pyx_n_u__459);
  Py_VISIT(traverse_module_state->__pyx_n_u__46);
  Py_VISIT(traverse_module_state->__pyx_n_u__461);
  Py_VISIT(traverse_module_state->__pyx_n_u__463);
  Py_VISIT(traverse_module_state->__pyx_n_u__465);
  Py_VISIT(traverse_module_state->__pyx_n_u__467);
  Py_VISIT(traverse_module_state->__pyx_n_u__468);
  Py_VISIT(traverse_module_state->__pyx_n_u__470);
  Py_VISIT(traverse_module_state->__pyx_n_u__471);
  Py_VISIT(traverse_module_state->__pyx_n_u__473);
  Py_VISIT(traverse_module_state->__pyx_n_u__474);
  Py_VISIT(traverse_module_state->__pyx_n_u__476);
  Py_VISIT(traverse_module_state->__pyx_n_u__477);
  Py_VISIT(traverse_module_state->__pyx_n_u__479);
  Py_VISIT(traverse_module_state->__pyx_n_u__48);
  Py_VISIT(traverse_module_state->__pyx_n_u__480);
  Py_VISIT(traverse_module_state->__pyx_kp_u__483);
  Py_VISIT(traverse_module_state->__pyx_kp_u__484);
  Py_VISIT(traverse_module_state->__pyx_kp_u__485);
  Py_VISIT(traverse_module_state->__pyx_kp_u__486);
  Py_VISIT(traverse_module_state->__pyx_kp_u__487);
  Py_VISIT(traverse_module_state->__pyx_kp_u__488);
  Py_VISIT(traverse_module_state->__pyx_kp_u__489);
  Py_VISIT(traverse_module_state->__pyx_kp_u__490);
  Py_VISIT(traverse_module_state->__pyx_kp_u__491);
  Py_VISIT(traverse_module_state->__pyx_kp_u__493);
  Py_VISIT(traverse_module_state->__pyx_kp_u__494);
  Py_VISIT(traverse_module_state->__pyx_kp_u__495);
  Py_VISIT(traverse_module_state->__pyx_kp_u__496);
  Py_VISIT(traverse_module_state->__pyx_kp_u__497);
  Py_VISIT(traverse_module_state->__pyx_kp_u__498);
  Py_VISIT(traverse_module_state->__pyx_n_u__50);
  Py_VISIT(traverse_module_state->__pyx_kp_u__500);
  Py_VISIT(traverse_module_state->__pyx_kp_u__501);
  Py_VISIT(traverse_module_state->__pyx_kp_u__502);
  Py_VISIT(traverse_module_state->__pyx_kp_u__503);
  Py_VISIT(traverse_module_state->__pyx_kp_u__504);
  Py_VISIT(traverse_module_state->__pyx_kp_u__505);
  Py_VISIT(traverse_module_state->__pyx_kp_u__507);
  Py_VISIT(traverse_module_state->__pyx_kp_u__508);
  Py_VISIT(traverse_module_state->__pyx_n_u__52);
  Py_VISIT(traverse_module_state->__pyx_n_u__54);
  Py_VISIT(traverse_module_state->__pyx_n_u__56);
  Py_VISIT(traverse_module_state->__pyx_n_u__58);
  Py_VISIT(traverse_module_state->__pyx_n_u__6);
  Py_VISIT(traverse_module_state->__pyx_n_u__60);
  Py_VISIT(traverse_module_state->__pyx_n_u__62);
  Py_VISIT(traverse_module_state->__pyx_n_u__64);
  Py_VISIT(traverse_module_state->__pyx_n_u__66);
  Py_VISIT(traverse_module_state->__pyx_n_u__68);
  Py_VISIT(traverse_module_state->__pyx_n_u__70);
  Py_VISIT(traverse_module_state->__pyx_n_u__72);
  Py_VISIT(traverse_module_state->__pyx_n_u__74);
  Py_VISIT(traverse_module_state->__pyx_n_u__76);
  Py_VISIT(traverse_module_state->__pyx_n_u__78);
  Py_VISIT(traverse_module_state->__pyx_n_u__8);
  Py_VISIT(traverse_module_state->__pyx_n_u__80);
  Py_VISIT(traverse_module_state->__pyx_n_u__82);
  Py_VISIT(traverse_module_state->__pyx_n_u__84);
  Py_VISIT(traverse_module_state->__pyx_n_u__86);
  Py_VISIT(traverse_module_state->__pyx_n_u__88);
  Py_VISIT(traverse_module_state->__pyx_n_u__90);
  Py_VISIT(traverse_module_state->__pyx_n_u__92);
  Py_VISIT(traverse_module_state->__pyx_n_u__94);
  Py_VISIT(traverse_module_state->__pyx_n_u__96);
  Py_VISIT(traverse_module_state->__pyx_n_u__98);
  Py_VISIT(traverse_module_state->__pyx_n_u_a);
  Py_VISIT(traverse_module_state->__pyx_n_s_after);
  Py_VISIT(traverse_module_state->__pyx_n_s_asyncio_coroutines);
  Py_VISIT(traverse_module_state->__pyx_n_u_b);
  Py_VISIT(traverse_module_state->__pyx_n_s_before);
  Py_VISIT(traverse_module_state->__pyx_n_s_c);
  Py_VISIT(traverse_module_state->__pyx_n_u_c);
  Py_VISIT(traverse_module_state->__pyx_n_s_chain);
  Py_VISIT(traverse_module_state->__pyx_n_s_char_codes);
  Py_VISIT(traverse_module_state->__pyx_n_s_chr);
  Py_VISIT(traverse_module_state->__pyx_n_s_cline_in_traceback);
  Py_VISIT(traverse_module_state->__pyx_n_u_d);
  Py_VISIT(traverse_module_state->__pyx_n_u_e);
  Py_VISIT(traverse_module_state->__pyx_n_u_f);
  Py_VISIT(traverse_module_state->__pyx_n_u_g);
  Py_VISIT(traverse_module_state->__pyx_n_u_h);
  Py_VISIT(traverse_module_state->__pyx_n_u_i);
  Py_VISIT(traverse_module_state->__pyx_n_u_ignore);
  Py_VISIT(traverse_module_state->__pyx_n_s_import);
  Py_VISIT(traverse_module_state->__pyx_n_s_initializing);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_coroutine);
  Py_VISIT(traverse_module_state->__pyx_n_s_itertools);
  Py_VISIT(traverse_module_state->__pyx_n_u_j);
  Py_VISIT(traverse_module_state->__pyx_n_u_k);
  Py_VISIT(traverse_module_state->__pyx_n_u_l);
  Py_VISIT(traverse_module_state->__pyx_n_u_m);
  Py_VISIT(traverse_module_state->__pyx_n_s_main);
  Py_VISIT(traverse_module_state->__pyx_n_s_map);
  Py_VISIT(traverse_module_state->__pyx_n_s_max_repeat_substr_length);
  Py_VISIT(traverse_module_state->__pyx_n_u_n);
  Py_VISIT(traverse_module_state->__pyx_n_s_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_neologdn);
  Py_VISIT(traverse_module_state->__pyx_kp_s_neologdn_pyx);
  Py_VISIT(traverse_module_state->__pyx_n_s_normalize);
  Py_VISIT(traverse_module_state->__pyx_n_u_normalize);
  Py_VISIT(traverse_module_state->__pyx_n_u_normalize_zenkaku);
  Py_VISIT(traverse_module_state->__pyx_n_u_o);
  Py_VISIT(traverse_module_state->__pyx_n_u_p);
  Py_VISIT(traverse_module_state->__pyx_n_u_q);
  Py_VISIT(traverse_module_state->__pyx_n_u_r);
  Py_VISIT(traverse_module_state->__pyx_n_s_range);
  Py_VISIT(traverse_module_state->__pyx_n_u_remove);
  Py_VISIT(traverse_module_state->__pyx_n_s_remove_space);
  Py_VISIT(traverse_module_state->__pyx_n_s_repeat);
  Py_VISIT(traverse_module_state->__pyx_n_s_repeat_threshould);
  Py_VISIT(traverse_module_state->__pyx_n_u_s);
  Py_VISIT(traverse_module_state->__pyx_n_s_shorten_repeat);
  Py_VISIT(traverse_module_state->__pyx_n_s_spec);
  Py_VISIT(traverse_module_state->__pyx_n_s_sys);
  Py_VISIT(traverse_module_state->__pyx_n_u_t);
  Py_VISIT(traverse_module_state->__pyx_n_s_test);
  Py_VISIT(traverse_module_state->__pyx_n_s_text);
  Py_VISIT(traverse_module_state->__pyx_n_s_tilde);
  Py_VISIT(traverse_module_state->__pyx_n_u_u);
  Py_VISIT(traverse_module_state->__pyx_n_u_v);
  Py_VISIT(traverse_module_state->__pyx_n_s_version);
  Py_VISIT(traverse_module_state->__pyx_n_s_version_info);
  Py_VISIT(traverse_module_state->__pyx_n_u_w);
  Py_VISIT(traverse_module_state->__pyx_n_u_x);
  Py_VISIT(traverse_module_state->__pyx_n_u_y);
  Py_VISIT(traverse_module_state->__pyx_n_u_z);
  Py_VISIT(traverse_module_state->__pyx_int_0);
  Py_VISIT(traverse_module_state->__pyx_int_3);
  Py_VISIT(traverse_module_state->__pyx_int_5);
  Py_VISIT(traverse_module_state->__pyx_int_8);
  Py_VISIT(traverse_module_state->__pyx_int_128);
  Py_VISIT(traverse_module_state->__pyx_int_12289);
  Py_VISIT(traverse_module_state->__pyx_int_12352);
  Py_VISIT(traverse_module_state->__pyx_int_12448);
  Py_VISIT(traverse_module_state->__pyx_int_12544);
  Py_VISIT(traverse_module_state->__pyx_int_19968);
  Py_VISIT(traverse_module_state->__pyx_int_40960);
  Py_VISIT(traverse_module_state->__pyx_int_65280);
  Py_VISIT(traverse_module_state->__pyx_int_65520);
  Py_VISIT(traverse_module_state->__pyx_tuple__3);
  Py_VISIT(traverse_module_state->__pyx_tuple__5);
  Py_VISIT(traverse_module_state->__pyx_tuple__7);
  Py_VISIT(traverse_module_state->__pyx_tuple__9);
  Py_VISIT(traverse_module_state->__pyx_tuple__11);
  Py_VISIT(traverse_module_state->__pyx_tuple__13);
  Py_VISIT(traverse_module_state->__pyx_tuple__15);
  Py_VISIT(traverse_module_state->__pyx_tuple__17);
  Py_VISIT(traverse_module_state->__pyx_tuple__19);
  Py_VISIT(traverse_module_state->__pyx_tuple__21);
  Py_VISIT(traverse_module_state->__pyx_tuple__23);
  Py_VISIT(traverse_module_state->__pyx_tuple__25);
  Py_VISIT(traverse_module_state->__pyx_tuple__27);
  Py_VISIT(traverse_module_state->__pyx_tuple__29);
  Py_VISIT(traverse_module_state->__pyx_tuple__31);
  Py_VISIT(traverse_module_state->__pyx_tuple__33);
  Py_VISIT(traverse_module_state->__pyx_tuple__35);
  Py_VISIT(traverse_module_state->__pyx_tuple__37);
  Py_VISIT(traverse_module_state->__pyx_tuple__39);
  Py_VISIT(traverse_module_state->__pyx_tuple__41);
  Py_VISIT(traverse_module_state->__pyx_tuple__43);
  Py_VISIT(traverse_module_state->__pyx_tuple__45);
  Py_VISIT(traverse_module_state->__pyx_tuple__47);
  Py_VISIT(traverse_module_state->__pyx_tuple__49);
  Py_VISIT(traverse_module_state->__pyx_tuple__51);
  Py_VISIT(traverse_module_state->__pyx_tuple__53);
  Py_VISIT(traverse_module_state->__pyx_tuple__55);
  Py_VISIT(traverse_module_state->__pyx_tuple__57);
  Py_VISIT(traverse_module_state->__pyx_tuple__59);
  Py_VISIT(traverse_module_state->__pyx_tuple__61);
  Py_VISIT(traverse_module_state->__pyx_tuple__63);
  Py_VISIT(traverse_module_state->__pyx_tuple__65);
  Py_VISIT(traverse_module_state->__pyx_tuple__67);
  Py_VISIT(traverse_module_state->__pyx_tuple__69);
  Py_VISIT(traverse_module_state->__pyx_tuple__71);
  Py_VISIT(traverse_module_state->__pyx_tuple__73);
  Py_VISIT(traverse_module_state->__pyx_tuple__75);
  Py_VISIT(traverse_module_state->__pyx_tuple__77);
  Py_VISIT(traverse_module_state->__pyx_tuple__79);
  Py_VISIT(traverse_module_state->__pyx_tuple__81);
  Py_VISIT(traverse_module_state->__pyx_tuple__83);
  Py_VISIT(traverse_module_state->__pyx_tuple__85);
  Py_VISIT(traverse_module_state->__pyx_tuple__87);
  Py_VISIT(traverse_module_state->__pyx_tuple__89);
  Py_VISIT(traverse_module_state->__pyx_tuple__91);
  Py_VISIT(traverse_module_state->__pyx_tuple__93);
  Py_VISIT(traverse_module_state->__pyx_tuple__95);
  Py_VISIT(traverse_module_state->__pyx_tuple__97);
  Py_VISIT(traverse_module_state->__pyx_tuple__99);
  Py_VISIT(traverse_module_state->__pyx_tuple__101);
  Py_VISIT(traverse_module_state->__pyx_tuple__103);
  Py_VISIT(traverse_module_state->__pyx_tuple__105);
  Py_VISIT(traverse_module_state->__pyx_tuple__107);
  Py_VISIT(traverse_module_state->__pyx_tuple__110);
  Py_VISIT(traverse_module_state->__pyx_tuple__113);
  Py_VISIT(traverse_module_state->__pyx_tuple__116);
  Py_VISIT(traverse_module_state->__pyx_tuple__119);
  Py_VISIT(traverse_module_state->__pyx_tuple__122);
  Py_VISIT(traverse_module_state->__pyx_tuple__125);
  Py_VISIT(traverse_module_state->__pyx_tuple__128);
  Py_VISIT(traverse_module_state->__pyx_tuple__131);
  Py_VISIT(traverse_module_state->__pyx_tuple__134);
  Py_VISIT(traverse_module_state->__pyx_tuple__136);
  Py_VISIT(traverse_module_state->__pyx_tuple__139);
  Py_VISIT(traverse_module_state->__pyx_tuple__142);
  Py_VISIT(traverse_module_state->__pyx_tuple__145);
  Py_VISIT(traverse_module_state->__pyx_tuple__147);
  Py_VISIT(traverse_module_state->__pyx_tuple__150);
  Py_VISIT(traverse_module_state->__pyx_tuple__153);
  Py_VISIT(traverse_module_state->__pyx_tuple__156);
  Py_VISIT(traverse_module_state->__pyx_tuple__159);
  Py_VISIT(traverse_module_state->__pyx_tuple__162);
  Py_VISIT(traverse_module_state->__pyx_tuple__165);
  Py_VISIT(traverse_module_state->__pyx_tuple__168);
  Py_VISIT(traverse_module_state->__pyx_tuple__171);
  Py_VISIT(traverse_module_state->__pyx_tuple__174);
  Py_VISIT(traverse_module_state->__pyx_tuple__177);
  Py_VISIT(traverse_module_state->__pyx_tuple__180);
  Py_VISIT(traverse_module_state->__pyx_tuple__183);
  Py_VISIT(traverse_module_state->__pyx_tuple__186);
  Py_VISIT(traverse_module_state->__pyx_tuple__189);
  Py_VISIT(traverse_module_state->__pyx_tuple__192);
  Py_VISIT(traverse_module_state->__pyx_tuple__195);
  Py_VISIT(traverse_module_state->__pyx_tuple__198);
  Py_VISIT(traverse_module_state->__pyx_tuple__199);
  Py_VISIT(traverse_module_state->__pyx_tuple__202);
  Py_VISIT(traverse_module_state->__pyx_tuple__205);
  Py_VISIT(traverse_module_state->__pyx_tuple__208);
  Py_VISIT(traverse_module_state->__pyx_tuple__211);
  Py_VISIT(traverse_module_state->__pyx_tuple__214);
  Py_VISIT(traverse_module_state->__pyx_tuple__217);
  Py_VISIT(traverse_module_state->__pyx_tuple__220);
  Py_VISIT(traverse_module_state->__pyx_tuple__223);
  Py_VISIT(traverse_module_state->__pyx_tuple__226);
  Py_VISIT(traverse_module_state->__pyx_tuple__229);
  Py_VISIT(traverse_module_state->__pyx_tuple__232);
  Py_VISIT(traverse_module_state->__pyx_tuple__235);
  Py_VISIT(traverse_module_state->__pyx_tuple__238);
  Py_VISIT(traverse_module_state->__pyx_tuple__241);
  Py_VISIT(traverse_module_state->__pyx_tuple__244);
  Py_VISIT(traverse_module_state->__pyx_tuple__247);
  Py_VISIT(traverse_module_state->__pyx_tuple__250);
  Py_VISIT(traverse_module_state->__pyx_tuple__253);
  Py_VISIT(traverse_module_state->__pyx_tuple__256);
  Py_VISIT(traverse_module_state->__pyx_tuple__259);
  Py_VISIT(traverse_module_state->__pyx_tuple__262);
  Py_VISIT(traverse_module_state->__pyx_tuple__265);
  Py_VISIT(traverse_module_state->__pyx_tuple__268);
  Py_VISIT(traverse_module_state->__pyx_tuple__271);
  Py_VISIT(traverse_module_state->__pyx_tuple__274);
  Py_VISIT(traverse_module_state->__pyx_tuple__277);
  Py_VISIT(traverse_module_state->__pyx_tuple__280);
  Py_VISIT(traverse_module_state->__pyx_tuple__283);
  Py_VISIT(traverse_module_state->__pyx_tuple__286);
  Py_VISIT(traverse_module_state->__pyx_tuple__289);
  Py_VISIT(traverse_module_state->__pyx_tuple__292);
  Py_VISIT(traverse_module_state->__pyx_tuple__295);
  Py_VISIT(traverse_module_state->__pyx_tuple__298);
  Py_VISIT(traverse_module_state->__pyx_tuple__301);
  Py_VISIT(traverse_module_state->__pyx_tuple__304);
  Py_VISIT(traverse_module_state->__pyx_tuple__307);
  Py_VISIT(traverse_module_state->__pyx_tuple__310);
  Py_VISIT(traverse_module_state->__pyx_tuple__313);
  Py_VISIT(traverse_module_state->__pyx_tuple__316);
  Py_VISIT(traverse_module_state->__pyx_tuple__319);
  Py_VISIT(traverse_module_state->__pyx_tuple__322);
  Py_VISIT(traverse_module_state->__pyx_tuple__325);
  Py_VISIT(traverse_module_state->__pyx_tuple__328);
  Py_VISIT(traverse_module_state->__pyx_tuple__331);
  Py_VISIT(traverse_module_state->__pyx_tuple__334);
  Py_VISIT(traverse_module_state->__pyx_tuple__337);
  Py_VISIT(traverse_module_state->__pyx_tuple__340);
  Py_VISIT(traverse_module_state->__pyx_tuple__343);
  Py_VISIT(traverse_module_state->__pyx_tuple__346);
  Py_VISIT(traverse_module_state->__pyx_tuple__349);
  Py_VISIT(traverse_module_state->__pyx_tuple__352);
  Py_VISIT(traverse_module_state->__pyx_tuple__355);
  Py_VISIT(traverse_module_state->__pyx_tuple__358);
  Py_VISIT(traverse_module_state->__pyx_tuple__361);
  Py_VISIT(traverse_module_state->__pyx_tuple__364);
  Py_VISIT(traverse_module_state->__pyx_tuple__367);
  Py_VISIT(traverse_module_state->__pyx_tuple__370);
  Py_VISIT(traverse_module_state->__pyx_tuple__373);
  Py_VISIT(traverse_module_state->__pyx_tuple__376);
  Py_VISIT(traverse_module_state->__pyx_tuple__379);
  Py_VISIT(traverse_module_state->__pyx_tuple__382);
  Py_VISIT(traverse_module_state->__pyx_tuple__385);
  Py_VISIT(traverse_module_state->__pyx_tuple__388);
  Py_VISIT(traverse_module_state->__pyx_tuple__389);
  Py_VISIT(traverse_module_state->__pyx_tuple__391);
  Py_VISIT(traverse_module_state->__pyx_tuple__393);
  Py_VISIT(traverse_module_state->__pyx_tuple__395);
  Py_VISIT(traverse_module_state->__pyx_tuple__397);
  Py_VISIT(traverse_module_state->__pyx_tuple__399);
  Py_VISIT(traverse_module_state->__pyx_tuple__401);
  Py_VISIT(traverse_module_state->__pyx_tuple__403);
  Py_VISIT(traverse_module_state->__pyx_tuple__405);
  Py_VISIT(traverse_module_state->__pyx_tuple__407);
  Py_VISIT(traverse_module_state->__pyx_tuple__409);
  Py_VISIT(traverse_module_state->__pyx_tuple__410);
  Py_VISIT(traverse_module_state->__pyx_tuple__412);
  Py_VISIT(traverse_module_state->__pyx_tuple__414);
  Py_VISIT(traverse_module_state->__pyx_tuple__416);
  Py_VISIT(traverse_module_state->__pyx_tuple__418);
  Py_VISIT(traverse_module_state->__pyx_tuple__420);
  Py_VISIT(traverse_module_state->__pyx_tuple__422);
  Py_VISIT(traverse_module_state->__pyx_tuple__424);
  Py_VISIT(traverse_module_state->__pyx_tuple__426);
  Py_VISIT(traverse_module_state->__pyx_tuple__428);
  Py_VISIT(traverse_module_state->__pyx_tuple__430);
  Py_VISIT(traverse_module_state->__pyx_tuple__432);
  Py_VISIT(traverse_module_state->__pyx_tuple__434);
  Py_VISIT(traverse_module_state->__pyx_tuple__436);
  Py_VISIT(traverse_module_state->__pyx_tuple__438);
  Py_VISIT(traverse_module_state->__pyx_tuple__440);
  Py_VISIT(traverse_module_state->__pyx_tuple__442);
  Py_VISIT(traverse_module_state->__pyx_tuple__444);
  Py_VISIT(traverse_module_state->__pyx_tuple__446);
  Py_VISIT(traverse_module_state->__pyx_tuple__448);
  Py_VISIT(traverse_module_state->__pyx_tuple__450);
  Py_VISIT(traverse_module_state->__pyx_tuple__452);
  Py_VISIT(traverse_module_state->__pyx_tuple__455);
  Py_VISIT(traverse_module_state->__pyx_tuple__456);
  Py_VISIT(traverse_module_state->__pyx_tuple__458);
  Py_VISIT(traverse_module_state->__pyx_tuple__460);
  Py_VISIT(traverse_module_state->__pyx_tuple__462);
  Py_VISIT(traverse_module_state->__pyx_tuple__464);
  Py_VISIT(traverse_module_state->__pyx_tuple__466);
  Py_VISIT(traverse_module_state->__pyx_tuple__469);
  Py_VISIT(traverse_module_state->__pyx_tuple__472);
  Py_VISIT(traverse_module_state->__pyx_tuple__475);
  Py_VISIT(traverse_module_state->__pyx_tuple__478);
  Py_VISIT(traverse_module_state->__pyx_tuple__481);
  Py_VISIT(traverse_module_state->__pyx_tuple__482);
  Py_VISIT(traverse_module_state->__pyx_tuple__492);
  Py_VISIT(traverse_module_state->__pyx_tuple__499);
  Py_VISIT(traverse_module_state->__pyx_tuple__506);
  Py_VISIT(traverse_module_state->__pyx_tuple__509);
  Py_VISIT(traverse_module_state->__pyx_tuple__510);
  Py_VISIT(traverse_module_state->__pyx_tuple__511);
  Py_VISIT(traverse_module_state->__pyx_tuple__512);
  Py_VISIT(traverse_module_state->__pyx_tuple__513);
  Py_VISIT(traverse_module_state->__pyx_tuple__514);
  Py_VISIT(traverse_module_state->__pyx_tuple__515);
  Py_VISIT(traverse_module_state->__pyx_tuple__516);
  Py_VISIT(traverse_module_state->__pyx_tuple__518);
  Py_VISIT(traverse_module_state->__pyx_tuple__519);
  Py_VISIT(traverse_module_state->__pyx_tuple__521);
  Py_VISIT(traverse_module_state->__pyx_codeobj__517);
  Py_VISIT(traverse_module_state->__pyx_codeobj__520);
  return 0;
}
#endif
/* #### Code section: module_state_defines ### */
#define __pyx_d __pyx_mstate_global->__pyx_d
#define __pyx_b __pyx_mstate_global->__pyx_b
#define __pyx_cython_runtime __pyx_mstate_global->__pyx_cython_runtime
#define __pyx_empty_tuple __pyx_mstate_global->__pyx_empty_tuple
#define __pyx_empty_bytes __pyx_mstate_global->__pyx_empty_bytes
#define __pyx_empty_unicode __pyx_mstate_global->__pyx_empty_unicode
#ifdef __Pyx_CyFunction_USED
#define __pyx_CyFunctionType __pyx_mstate_global->__pyx_CyFunctionType
#endif
#ifdef __Pyx_FusedFunction_USED
#define __pyx_FusedFunctionType __pyx_mstate_global->__pyx_FusedFunctionType
#endif
#ifdef __Pyx_Generator_USED
#define __pyx_GeneratorType __pyx_mstate_global->__pyx_GeneratorType
#endif
#ifdef __Pyx_IterableCoroutine_USED
#define __pyx_IterableCoroutineType __pyx_mstate_global->__pyx_IterableCoroutineType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineAwaitType __pyx_mstate_global->__pyx_CoroutineAwaitType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineType __pyx_mstate_global->__pyx_CoroutineType
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_n_s_ __pyx_mstate_global->__pyx_n_s_
#define __pyx_kp_u_ __pyx_mstate_global->__pyx_kp_u_
#define __pyx_kp_u_0 __pyx_mstate_global->__pyx_kp_u_0
#define __pyx_kp_u_0_5_3 __pyx_mstate_global->__pyx_kp_u_0_5_3
#define __pyx_kp_u_1 __pyx_mstate_global->__pyx_kp_u_1
#define __pyx_kp_u_2 __pyx_mstate_global->__pyx_kp_u_2
#define __pyx_kp_u_3 __pyx_mstate_global->__pyx_kp_u_3
#define __pyx_kp_u_4 __pyx_mstate_global->__pyx_kp_u_4
#define __pyx_kp_u_5 __pyx_mstate_global->__pyx_kp_u_5
#define __pyx_kp_u_6 __pyx_mstate_global->__pyx_kp_u_6
#define __pyx_kp_u_7 __pyx_mstate_global->__pyx_kp_u_7
#define __pyx_kp_u_8 __pyx_mstate_global->__pyx_kp_u_8
#define __pyx_kp_u_9 __pyx_mstate_global->__pyx_kp_u_9
#define __pyx_n_u_A __pyx_mstate_global->__pyx_n_u_A
#define __pyx_n_s_ASCII __pyx_mstate_global->__pyx_n_s_ASCII
#define __pyx_n_u_B __pyx_mstate_global->__pyx_n_u_B
#define __pyx_n_u_C __pyx_mstate_global->__pyx_n_u_C
#define __pyx_n_s_CHOONPUS __pyx_mstate_global->__pyx_n_s_CHOONPUS
#define __pyx_n_u_D __pyx_mstate_global->__pyx_n_u_D
#define __pyx_n_s_DIGIT __pyx_mstate_global->__pyx_n_s_DIGIT
#define __pyx_n_u_E __pyx_mstate_global->__pyx_n_u_E
#define __pyx_n_u_F __pyx_mstate_global->__pyx_n_u_F
#define __pyx_n_u_G __pyx_mstate_global->__pyx_n_u_G
#define __pyx_n_u_H __pyx_mstate_global->__pyx_n_u_H
#define __pyx_n_s_HIPHENS __pyx_mstate_global->__pyx_n_s_HIPHENS
#define __pyx_n_u_I __pyx_mstate_global->__pyx_n_u_I
#define __pyx_n_u_J __pyx_mstate_global->__pyx_n_u_J
#define __pyx_n_u_K __pyx_mstate_global->__pyx_n_u_K
#define __pyx_n_s_KANA __pyx_mstate_global->__pyx_n_s_KANA
#define __pyx_n_s_KANA_MARU __pyx_mstate_global->__pyx_n_s_KANA_MARU
#define __pyx_n_s_KANA_TEN __pyx_mstate_global->__pyx_n_s_KANA_TEN
#define __pyx_n_u_L __pyx_mstate_global->__pyx_n_u_L
#define __pyx_n_u_M __pyx_mstate_global->__pyx_n_u_M
#define __pyx_n_u_N __pyx_mstate_global->__pyx_n_u_N
#define __pyx_n_u_O __pyx_mstate_global->__pyx_n_u_O
#define __pyx_n_u_P __pyx_mstate_global->__pyx_n_u_P
#define __pyx_n_u_Q __pyx_mstate_global->__pyx_n_u_Q
#define __pyx_n_u_R __pyx_mstate_global->__pyx_n_u_R
#define __pyx_n_u_S __pyx_mstate_global->__pyx_n_u_S
#define __pyx_n_s_SPACE __pyx_mstate_global->__pyx_n_s_SPACE
#define __pyx_n_u_T __pyx_mstate_global->__pyx_n_u_T
#define __pyx_n_s_TILDES __pyx_mstate_global->__pyx_n_s_TILDES
#define __pyx_n_u_U __pyx_mstate_global->__pyx_n_u_U
#define __pyx_n_u_V __pyx_mstate_global->__pyx_n_u_V
#define __pyx_n_s_VERSION __pyx_mstate_global->__pyx_n_s_VERSION
#define __pyx_n_u_W __pyx_mstate_global->__pyx_n_u_W
#define __pyx_n_u_X __pyx_mstate_global->__pyx_n_u_X
#define __pyx_n_u_Y __pyx_mstate_global->__pyx_n_u_Y
#define __pyx_n_u_Z __pyx_mstate_global->__pyx_n_u_Z
#define __pyx_n_u__10 __pyx_mstate_global->__pyx_n_u__10
#define __pyx_n_u__100 __pyx_mstate_global->__pyx_n_u__100
#define __pyx_n_u__102 __pyx_mstate_global->__pyx_n_u__102
#define __pyx_n_u__104 __pyx_mstate_global->__pyx_n_u__104
#define __pyx_n_u__106 __pyx_mstate_global->__pyx_n_u__106
#define __pyx_kp_u__108 __pyx_mstate_global->__pyx_kp_u__108
#define __pyx_kp_u__109 __pyx_mstate_global->__pyx_kp_u__109
#define __pyx_kp_u__111 __pyx_mstate_global->__pyx_kp_u__111
#define __pyx_kp_u__112 __pyx_mstate_global->__pyx_kp_u__112
#define __pyx_kp_u__114 __pyx_mstate_global->__pyx_kp_u__114
#define __pyx_kp_u__115 __pyx_mstate_global->__pyx_kp_u__115
#define __pyx_kp_u__117 __pyx_mstate_global->__pyx_kp_u__117
#define __pyx_kp_u__118 __pyx_mstate_global->__pyx_kp_u__118
#define __pyx_n_u__12 __pyx_mstate_global->__pyx_n_u__12
#define __pyx_kp_u__120 __pyx_mstate_global->__pyx_kp_u__120
#define __pyx_kp_u__121 __pyx_mstate_global->__pyx_kp_u__121
#define __pyx_kp_u__123 __pyx_mstate_global->__pyx_kp_u__123
#define __pyx_kp_u__124 __pyx_mstate_global->__pyx_kp_u__124
#define __pyx_kp_u__126 __pyx_mstate_global->__pyx_kp_u__126
#define __pyx_kp_u__127 __pyx_mstate_global->__pyx_kp_u__127
#define __pyx_kp_u__129 __pyx_mstate_global->__pyx_kp_u__129
#define __pyx_kp_u__130 __pyx_mstate_global->__pyx_kp_u__130
#define __pyx_kp_u__132 __pyx_mstate_global->__pyx_kp_u__132
#define __pyx_kp_u__133 __pyx_mstate_global->__pyx_kp_u__133
#define __pyx_kp_u__135 __pyx_mstate_global->__pyx_kp_u__135
#define __pyx_kp_u__137 __pyx_mstate_global->__pyx_kp_u__137
#define __pyx_kp_u__138 __pyx_mstate_global->__pyx_kp_u__138
#define __pyx_n_u__14 __pyx_mstate_global->__pyx_n_u__14
#define __pyx_kp_u__140 __pyx_mstate_global->__pyx_kp_u__140
#define __pyx_kp_u__141 __pyx_mstate_global->__pyx_kp_u__141
#define __pyx_kp_u__143 __pyx_mstate_global->__pyx_kp_u__143
#define __pyx_kp_u__144 __pyx_mstate_global->__pyx_kp_u__144
#define __pyx_kp_u__146 __pyx_mstate_global->__pyx_kp_u__146
#define __pyx_kp_u__148 __pyx_mstate_global->__pyx_kp_u__148
#define __pyx_kp_u__149 __pyx_mstate_global->__pyx_kp_u__149
#define __pyx_kp_u__151 __pyx_mstate_global->__pyx_kp_u__151
#define __pyx_kp_u__152 __pyx_mstate_global->__pyx_kp_u__152
#define __pyx_kp_u__154 __pyx_mstate_global->__pyx_kp_u__154
#define __pyx_kp_u__155 __pyx_mstate_global->__pyx_kp_u__155
#define __pyx_kp_u__157 __pyx_mstate_global->__pyx_kp_u__157
#define __pyx_kp_u__158 __pyx_mstate_global->__pyx_kp_u__158
#define __pyx_n_u__16 __pyx_mstate_global->__pyx_n_u__16
#define __pyx_kp_u__160 __pyx_mstate_global->__pyx_kp_u__160
#define __pyx_kp_u__161 __pyx_mstate_global->__pyx_kp_u__161
#define __pyx_kp_u__163 __pyx_mstate_global->__pyx_kp_u__163
#define __pyx_kp_u__164 __pyx_mstate_global->__pyx_kp_u__164
#define __pyx_kp_u__166 __pyx_mstate_global->__pyx_kp_u__166
#define __pyx_n_s__167 __pyx_mstate_global->__pyx_n_s__167
#define __pyx_kp_u__167 __pyx_mstate_global->__pyx_kp_u__167
#define __pyx_kp_u__169 __pyx_mstate_global->__pyx_kp_u__169
#define __pyx_kp_u__170 __pyx_mstate_global->__pyx_kp_u__170
#define __pyx_kp_u__172 __pyx_mstate_global->__pyx_kp_u__172
#define __pyx_kp_u__173 __pyx_mstate_global->__pyx_kp_u__173
#define __pyx_kp_u__175 __pyx_mstate_global->__pyx_kp_u__175
#define __pyx_kp_u__176 __pyx_mstate_global->__pyx_kp_u__176
#define __pyx_kp_u__178 __pyx_mstate_global->__pyx_kp_u__178
#define __pyx_kp_u__179 __pyx_mstate_global->__pyx_kp_u__179
#define __pyx_n_u__18 __pyx_mstate_global->__pyx_n_u__18
#define __pyx_kp_u__181 __pyx_mstate_global->__pyx_kp_u__181
#define __pyx_kp_u__182 __pyx_mstate_global->__pyx_kp_u__182
#define __pyx_kp_u__184 __pyx_mstate_global->__pyx_kp_u__184
#define __pyx_n_u__185 __pyx_mstate_global->__pyx_n_u__185
#define __pyx_kp_u__187 __pyx_mstate_global->__pyx_kp_u__187
#define __pyx_kp_u__188 __pyx_mstate_global->__pyx_kp_u__188
#define __pyx_kp_u__190 __pyx_mstate_global->__pyx_kp_u__190
#define __pyx_kp_u__191 __pyx_mstate_global->__pyx_kp_u__191
#define __pyx_kp_u__193 __pyx_mstate_global->__pyx_kp_u__193
#define __pyx_kp_u__194 __pyx_mstate_global->__pyx_kp_u__194
#define __pyx_kp_u__196 __pyx_mstate_global->__pyx_kp_u__196
#define __pyx_kp_u__197 __pyx_mstate_global->__pyx_kp_u__197
#define __pyx_kp_u__2 __pyx_mstate_global->__pyx_kp_u__2
#define __pyx_n_u__20 __pyx_mstate_global->__pyx_n_u__20
#define __pyx_n_u__200 __pyx_mstate_global->__pyx_n_u__200
#define __pyx_n_u__201 __pyx_mstate_global->__pyx_n_u__201
#define __pyx_n_u__203 __pyx_mstate_global->__pyx_n_u__203
#define __pyx_n_u__204 __pyx_mstate_global->__pyx_n_u__204
#define __pyx_n_u__206 __pyx_mstate_global->__pyx_n_u__206
#define __pyx_n_u__207 __pyx_mstate_global->__pyx_n_u__207
#define __pyx_n_u__209 __pyx_mstate_global->__pyx_n_u__209
#define __pyx_n_u__210 __pyx_mstate_global->__pyx_n_u__210
#define __pyx_n_u__212 __pyx_mstate_global->__pyx_n_u__212
#define __pyx_n_u__213 __pyx_mstate_global->__pyx_n_u__213
#define __pyx_n_u__215 __pyx_mstate_global->__pyx_n_u__215
#define __pyx_n_u__216 __pyx_mstate_global->__pyx_n_u__216
#define __pyx_n_u__218 __pyx_mstate_global->__pyx_n_u__218
#define __pyx_n_u__219 __pyx_mstate_global->__pyx_n_u__219
#define __pyx_n_u__22 __pyx_mstate_global->__pyx_n_u__22
#define __pyx_n_u__221 __pyx_mstate_global->__pyx_n_u__221
#define __pyx_n_u__222 __pyx_mstate_global->__pyx_n_u__222
#define __pyx_n_u__224 __pyx_mstate_global->__pyx_n_u__224
#define __pyx_n_u__225 __pyx_mstate_global->__pyx_n_u__225
#define __pyx_n_u__227 __pyx_mstate_global->__pyx_n_u__227
#define __pyx_n_u__228 __pyx_mstate_global->__pyx_n_u__228
#define __pyx_n_u__230 __pyx_mstate_global->__pyx_n_u__230
#define __pyx_n_u__231 __pyx_mstate_global->__pyx_n_u__231
#define __pyx_n_u__233 __pyx_mstate_global->__pyx_n_u__233
#define __pyx_n_u__234 __pyx_mstate_global->__pyx_n_u__234
#define __pyx_n_u__236 __pyx_mstate_global->__pyx_n_u__236
#define __pyx_n_u__237 __pyx_mstate_global->__pyx_n_u__237
#define __pyx_n_u__239 __pyx_mstate_global->__pyx_n_u__239
#define __pyx_n_u__24 __pyx_mstate_global->__pyx_n_u__24
#define __pyx_n_u__240 __pyx_mstate_global->__pyx_n_u__240
#define __pyx_n_u__242 __pyx_mstate_global->__pyx_n_u__242
#define __pyx_n_u__243 __pyx_mstate_global->__pyx_n_u__243
#define __pyx_n_u__245 __pyx_mstate_global->__pyx_n_u__245
#define __pyx_n_u__246 __pyx_mstate_global->__pyx_n_u__246
#define __pyx_n_u__248 __pyx_mstate_global->__pyx_n_u__248
#define __pyx_n_u__249 __pyx_mstate_global->__pyx_n_u__249
#define __pyx_n_u__251 __pyx_mstate_global->__pyx_n_u__251
#define __pyx_n_u__252 __pyx_mstate_global->__pyx_n_u__252
#define __pyx_n_u__254 __pyx_mstate_global->__pyx_n_u__254
#define __pyx_n_u__255 __pyx_mstate_global->__pyx_n_u__255
#define __pyx_n_u__257 __pyx_mstate_global->__pyx_n_u__257
#define __pyx_n_u__258 __pyx_mstate_global->__pyx_n_u__258
#define __pyx_n_u__26 __pyx_mstate_global->__pyx_n_u__26
#define __pyx_n_u__260 __pyx_mstate_global->__pyx_n_u__260
#define __pyx_n_u__261 __pyx_mstate_global->__pyx_n_u__261
#define __pyx_n_u__263 __pyx_mstate_global->__pyx_n_u__263
#define __pyx_n_u__264 __pyx_mstate_global->__pyx_n_u__264
#define __pyx_n_u__266 __pyx_mstate_global->__pyx_n_u__266
#define __pyx_n_u__267 __pyx_mstate_global->__pyx_n_u__267
#define __pyx_n_u__269 __pyx_mstate_global->__pyx_n_u__269
#define __pyx_n_u__270 __pyx_mstate_global->__pyx_n_u__270
#define __pyx_n_u__272 __pyx_mstate_global->__pyx_n_u__272
#define __pyx_n_u__273 __pyx_mstate_global->__pyx_n_u__273
#define __pyx_n_u__275 __pyx_mstate_global->__pyx_n_u__275
#define __pyx_n_u__276 __pyx_mstate_global->__pyx_n_u__276
#define __pyx_n_u__278 __pyx_mstate_global->__pyx_n_u__278
#define __pyx_n_u__279 __pyx_mstate_global->__pyx_n_u__279
#define __pyx_n_u__28 __pyx_mstate_global->__pyx_n_u__28
#define __pyx_n_u__281 __pyx_mstate_global->__pyx_n_u__281
#define __pyx_n_u__282 __pyx_mstate_global->__pyx_n_u__282
#define __pyx_n_u__284 __pyx_mstate_global->__pyx_n_u__284
#define __pyx_n_u__285 __pyx_mstate_global->__pyx_n_u__285
#define __pyx_n_u__287 __pyx_mstate_global->__pyx_n_u__287
#define __pyx_n_u__288 __pyx_mstate_global->__pyx_n_u__288
#define __pyx_n_u__290 __pyx_mstate_global->__pyx_n_u__290
#define __pyx_n_u__291 __pyx_mstate_global->__pyx_n_u__291
#define __pyx_n_u__293 __pyx_mstate_global->__pyx_n_u__293
#define __pyx_n_u__294 __pyx_mstate_global->__pyx_n_u__294
#define __pyx_n_u__296 __pyx_mstate_global->__pyx_n_u__296
#define __pyx_n_u__297 __pyx_mstate_global->__pyx_n_u__297
#define __pyx_n_u__299 __pyx_mstate_global->__pyx_n_u__299
#define __pyx_n_u__30 __pyx_mstate_global->__pyx_n_u__30
#define __pyx_n_u__300 __pyx_mstate_global->__pyx_n_u__300
#define __pyx_n_u__302 __pyx_mstate_global->__pyx_n_u__302
#define __pyx_n_u__303 __pyx_mstate_global->__pyx_n_u__303
#define __pyx_n_u__305 __pyx_mstate_global->__pyx_n_u__305
#define __pyx_n_u__306 __pyx_mstate_global->__pyx_n_u__306
#define __pyx_n_u__308 __pyx_mstate_global->__pyx_n_u__308
#define __pyx_n_u__309 __pyx_mstate_global->__pyx_n_u__309
#define __pyx_n_u__311 __pyx_mstate_global->__pyx_n_u__311
#define __pyx_n_u__312 __pyx_mstate_global->__pyx_n_u__312
#define __pyx_n_u__314 __pyx_mstate_global->__pyx_n_u__314
#define __pyx_n_u__315 __pyx_mstate_global->__pyx_n_u__315
#define __pyx_n_u__317 __pyx_mstate_global->__pyx_n_u__317
#define __pyx_n_u__318 __pyx_mstate_global->__pyx_n_u__318
#define __pyx_n_u__32 __pyx_mstate_global->__pyx_n_u__32
#define __pyx_n_u__320 __pyx_mstate_global->__pyx_n_u__320
#define __pyx_n_u__321 __pyx_mstate_global->__pyx_n_u__321
#define __pyx_n_u__323 __pyx_mstate_global->__pyx_n_u__323
#define __pyx_n_u__324 __pyx_mstate_global->__pyx_n_u__324
#define __pyx_n_u__326 __pyx_mstate_global->__pyx_n_u__326
#define __pyx_n_u__327 __pyx_mstate_global->__pyx_n_u__327
#define __pyx_n_u__329 __pyx_mstate_global->__pyx_n_u__329
#define __pyx_n_u__330 __pyx_mstate_global->__pyx_n_u__330
#define __pyx_n_u__332 __pyx_mstate_global->__pyx_n_u__332
#define __pyx_n_u__333 __pyx_mstate_global->__pyx_n_u__333
#define __pyx_n_u__335 __pyx_mstate_global->__pyx_n_u__335
#define __pyx_n_u__336 __pyx_mstate_global->__pyx_n_u__336
#define __pyx_n_u__338 __pyx_mstate_global->__pyx_n_u__338
#define __pyx_n_u__339 __pyx_mstate_global->__pyx_n_u__339
#define __pyx_n_u__34 __pyx_mstate_global->__pyx_n_u__34
#define __pyx_n_u__341 __pyx_mstate_global->__pyx_n_u__341
#define __pyx_n_u__342 __pyx_mstate_global->__pyx_n_u__342
#define __pyx_n_u__344 __pyx_mstate_global->__pyx_n_u__344
#define __pyx_n_u__345 __pyx_mstate_global->__pyx_n_u__345
#define __pyx_n_u__347 __pyx_mstate_global->__pyx_n_u__347
#define __pyx_n_u__348 __pyx_mstate_global->__pyx_n_u__348
#define __pyx_n_u__350 __pyx_mstate_global->__pyx_n_u__350
#define __pyx_n_u__351 __pyx_mstate_global->__pyx_n_u__351
#define __pyx_n_u__353 __pyx_mstate_global->__pyx_n_u__353
#define __pyx_n_u__354 __pyx_mstate_global->__pyx_n_u__354
#define __pyx_n_u__356 __pyx_mstate_global->__pyx_n_u__356
#define __pyx_n_u__357 __pyx_mstate_global->__pyx_n_u__357
#define __pyx_n_u__359 __pyx_mstate_global->__pyx_n_u__359
#define __pyx_n_u__36 __pyx_mstate_global->__pyx_n_u__36
#define __pyx_n_u__360 __pyx_mstate_global->__pyx_n_u__360
#define __pyx_n_u__362 __pyx_mstate_global->__pyx_n_u__362
#define __pyx_n_u__363 __pyx_mstate_global->__pyx_n_u__363
#define __pyx_kp_u__365 __pyx_mstate_global->__pyx_kp_u__365
#define __pyx_kp_u__366 __pyx_mstate_global->__pyx_kp_u__366
#define __pyx_kp_u__368 __pyx_mstate_global->__pyx_kp_u__368
#define __pyx_kp_u__369 __pyx_mstate_global->__pyx_kp_u__369
#define __pyx_kp_u__371 __pyx_mstate_global->__pyx_kp_u__371
#define __pyx_kp_u__372 __pyx_mstate_global->__pyx_kp_u__372
#define __pyx_kp_u__374 __pyx_mstate_global->__pyx_kp_u__374
#define __pyx_n_u__375 __pyx_mstate_global->__pyx_n_u__375
#define __pyx_kp_u__377 __pyx_mstate_global->__pyx_kp_u__377
#define __pyx_n_u__378 __pyx_mstate_global->__pyx_n_u__378
#define __pyx_n_u__38 __pyx_mstate_global->__pyx_n_u__38
#define __pyx_kp_u__380 __pyx_mstate_global->__pyx_kp_u__380
#define __pyx_kp_u__381 __pyx_mstate_global->__pyx_kp_u__381
#define __pyx_kp_u__383 __pyx_mstate_global->__pyx_kp_u__383
#define __pyx_kp_u__384 __pyx_mstate_global->__pyx_kp_u__384
#define __pyx_n_u__386 __pyx_mstate_global->__pyx_n_u__386
#define __pyx_n_u__387 __pyx_mstate_global->__pyx_n_u__387
#define __pyx_n_u__390 __pyx_mstate_global->__pyx_n_u__390
#define __pyx_n_u__392 __pyx_mstate_global->__pyx_n_u__392
#define __pyx_n_u__394 __pyx_mstate_global->__pyx_n_u__394
#define __pyx_n_u__396 __pyx_mstate_global->__pyx_n_u__396
#define __pyx_n_u__398 __pyx_mstate_global->__pyx_n_u__398
#define __pyx_n_u__4 __pyx_mstate_global->__pyx_n_u__4
#define __pyx_n_u__40 __pyx_mstate_global->__pyx_n_u__40
#define __pyx_n_u__400 __pyx_mstate_global->__pyx_n_u__400
#define __pyx_n_u__402 __pyx_mstate_global->__pyx_n_u__402
#define __pyx_n_u__404 __pyx_mstate_global->__pyx_n_u__404
#define __pyx_n_u__406 __pyx_mstate_global->__pyx_n_u__406
#define __pyx_n_u__408 __pyx_mstate_global->__pyx_n_u__408
#define __pyx_n_u__411 __pyx_mstate_global->__pyx_n_u__411
#define __pyx_n_u__413 __pyx_mstate_global->__pyx_n_u__413
#define __pyx_n_u__415 __pyx_mstate_global->__pyx_n_u__415
#define __pyx_n_u__417 __pyx_mstate_global->__pyx_n_u__417
#define __pyx_n_u__419 __pyx_mstate_global->__pyx_n_u__419
#define __pyx_n_u__42 __pyx_mstate_global->__pyx_n_u__42
#define __pyx_n_u__421 __pyx_mstate_global->__pyx_n_u__421
#define __pyx_n_u__423 __pyx_mstate_global->__pyx_n_u__423
#define __pyx_n_u__425 __pyx_mstate_global->__pyx_n_u__425
#define __pyx_n_u__427 __pyx_mstate_global->__pyx_n_u__427
#define __pyx_n_u__429 __pyx_mstate_global->__pyx_n_u__429
#define __pyx_n_u__431 __pyx_mstate_global->__pyx_n_u__431
#define __pyx_n_u__433 __pyx_mstate_global->__pyx_n_u__433
#define __pyx_n_u__435 __pyx_mstate_global->__pyx_n_u__435
#define __pyx_n_u__437 __pyx_mstate_global->__pyx_n_u__437
#define __pyx_n_u__439 __pyx_mstate_global->__pyx_n_u__439
#define __pyx_n_u__44 __pyx_mstate_global->__pyx_n_u__44
#define __pyx_n_u__441 __pyx_mstate_global->__pyx_n_u__441
#define __pyx_n_u__443 __pyx_mstate_global->__pyx_n_u__443
#define __pyx_n_u__445 __pyx_mstate_global->__pyx_n_u__445
#define __pyx_n_u__447 __pyx_mstate_global->__pyx_n_u__447
#define __pyx_n_u__449 __pyx_mstate_global->__pyx_n_u__449
#define __pyx_n_u__451 __pyx_mstate_global->__pyx_n_u__451
#define __pyx_n_u__453 __pyx_mstate_global->__pyx_n_u__453
#define __pyx_n_u__454 __pyx_mstate_global->__pyx_n_u__454
#define __pyx_n_u__457 __pyx_mstate_global->__pyx_n_u__457
#define __pyx_n_u__459 __pyx_mstate_global->__pyx_n_u__459
#define __pyx_n_u__46 __pyx_mstate_global->__pyx_n_u__46
#define __pyx_n_u__461 __pyx_mstate_global->__pyx_n_u__461
#define __pyx_n_u__463 __pyx_mstate_global->__pyx_n_u__463
#define __pyx_n_u__465 __pyx_mstate_global->__pyx_n_u__465
#define __pyx_n_u__467 __pyx_mstate_global->__pyx_n_u__467
#define __pyx_n_u__468 __pyx_mstate_global->__pyx_n_u__468
#define __pyx_n_u__470 __pyx_mstate_global->__pyx_n_u__470
#define __pyx_n_u__471 __pyx_mstate_global->__pyx_n_u__471
#define __pyx_n_u__473 __pyx_mstate_global->__pyx_n_u__473
#define __pyx_n_u__474 __pyx_mstate_global->__pyx_n_u__474
#define __pyx_n_u__476 __pyx_mstate_global->__pyx_n_u__476
#define __pyx_n_u__477 __pyx_mstate_global->__pyx_n_u__477
#define __pyx_n_u__479 __pyx_mstate_global->__pyx_n_u__479
#define __pyx_n_u__48 __pyx_mstate_global->__pyx_n_u__48
#define __pyx_n_u__480 __pyx_mstate_global->__pyx_n_u__480
#define __pyx_kp_u__483 __pyx_mstate_global->__pyx_kp_u__483
#define __pyx_kp_u__484 __pyx_mstate_global->__pyx_kp_u__484
#define __pyx_kp_u__485 __pyx_mstate_global->__pyx_kp_u__485
#define __pyx_kp_u__486 __pyx_mstate_global->__pyx_kp_u__486
#define __pyx_kp_u__487 __pyx_mstate_global->__pyx_kp_u__487
#define __pyx_kp_u__488 __pyx_mstate_global->__pyx_kp_u__488
#define __pyx_kp_u__489 __pyx_mstate_global->__pyx_kp_u__489
#define __pyx_kp_u__490 __pyx_mstate_global->__pyx_kp_u__490
#define __pyx_kp_u__491 __pyx_mstate_global->__pyx_kp_u__491
#define __pyx_kp_u__493 __pyx_mstate_global->__pyx_kp_u__493
#define __pyx_kp_u__494 __pyx_mstate_global->__pyx_kp_u__494
#define __pyx_kp_u__495 __pyx_mstate_global->__pyx_kp_u__495
#define __pyx_kp_u__496 __pyx_mstate_global->__pyx_kp_u__496
#define __pyx_kp_u__497 __pyx_mstate_global->__pyx_kp_u__497
#define __pyx_kp_u__498 __pyx_mstate_global->__pyx_kp_u__498
#define __pyx_n_u__50 __pyx_mstate_global->__pyx_n_u__50
#define __pyx_kp_u__500 __pyx_mstate_global->__pyx_kp_u__500
#define __pyx_kp_u__501 __pyx_mstate_global->__pyx_kp_u__501
#define __pyx_kp_u__502 __pyx_mstate_global->__pyx_kp_u__502
#define __pyx_kp_u__503 __pyx_mstate_global->__pyx_kp_u__503
#define __pyx_kp_u__504 __pyx_mstate_global->__pyx_kp_u__504
#define __pyx_kp_u__505 __pyx_mstate_global->__pyx_kp_u__505
#define __pyx_kp_u__507 __pyx_mstate_global->__pyx_kp_u__507
#define __pyx_kp_u__508 __pyx_mstate_global->__pyx_kp_u__508
#define __pyx_n_u__52 __pyx_mstate_global->__pyx_n_u__52
#define __pyx_n_u__54 __pyx_mstate_global->__pyx_n_u__54
#define __pyx_n_u__56 __pyx_mstate_global->__pyx_n_u__56
#define __pyx_n_u__58 __pyx_mstate_global->__pyx_n_u__58
#define __pyx_n_u__6 __pyx_mstate_global->__pyx_n_u__6
#define __pyx_n_u__60 __pyx_mstate_global->__pyx_n_u__60
#define __pyx_n_u__62 __pyx_mstate_global->__pyx_n_u__62
#define __pyx_n_u__64 __pyx_mstate_global->__pyx_n_u__64
#define __pyx_n_u__66 __pyx_mstate_global->__pyx_n_u__66
#define __pyx_n_u__68 __pyx_mstate_global->__pyx_n_u__68
#define __pyx_n_u__70 __pyx_mstate_global->__pyx_n_u__70
#define __pyx_n_u__72 __pyx_mstate_global->__pyx_n_u__72
#define __pyx_n_u__74 __pyx_mstate_global->__pyx_n_u__74
#define __pyx_n_u__76 __pyx_mstate_global->__pyx_n_u__76
#define __pyx_n_u__78 __pyx_mstate_global->__pyx_n_u__78
#define __pyx_n_u__8 __pyx_mstate_global->__pyx_n_u__8
#define __pyx_n_u__80 __pyx_mstate_global->__pyx_n_u__80
#define __pyx_n_u__82 __pyx_mstate_global->__pyx_n_u__82
#define __pyx_n_u__84 __pyx_mstate_global->__pyx_n_u__84
#define __pyx_n_u__86 __pyx_mstate_global->__pyx_n_u__86
#define __pyx_n_u__88 __pyx_mstate_global->__pyx_n_u__88
#define __pyx_n_u__90 __pyx_mstate_global->__pyx_n_u__90
#define __pyx_n_u__92 __pyx_mstate_global->__pyx_n_u__92
#define __pyx_n_u__94 __pyx_mstate_global->__pyx_n_u__94
#define __pyx_n_u__96 __pyx_mstate_global->__pyx_n_u__96
#define __pyx_n_u__98 __pyx_mstate_global->__pyx_n_u__98
#define __pyx_n_u_a __pyx_mstate_global->__pyx_n_u_a
#define __pyx_n_s_after __pyx_mstate_global->__pyx_n_s_after
#define __pyx_n_s_asyncio_coroutines __pyx_mstate_global->__pyx_n_s_asyncio_coroutines
#define __pyx_n_u_b __pyx_mstate_global->__pyx_n_u_b
#define __pyx_n_s_before __pyx_mstate_global->__pyx_n_s_before
#define __pyx_n_s_c __pyx_mstate_global->__pyx_n_s_c
#define __pyx_n_u_c __pyx_mstate_global->__pyx_n_u_c
#define __pyx_n_s_chain __pyx_mstate_global->__pyx_n_s_chain
#define __pyx_n_s_char_codes __pyx_mstate_global->__pyx_n_s_char_codes
#define __pyx_n_s_chr __pyx_mstate_global->__pyx_n_s_chr
#define __pyx_n_s_cline_in_traceback __pyx_mstate_global->__pyx_n_s_cline_in_traceback
#define __pyx_n_u_d __pyx_mstate_global->__pyx_n_u_d
#define __pyx_n_u_e __pyx_mstate_global->__pyx_n_u_e
#define __pyx_n_u_f __pyx_mstate_global->__pyx_n_u_f
#define __pyx_n_u_g __pyx_mstate_global->__pyx_n_u_g
#define __pyx_n_u_h __pyx_mstate_global->__pyx_n_u_h
#define __pyx_n_u_i __pyx_mstate_global->__pyx_n_u_i
#define __pyx_n_u_ignore __pyx_mstate_global->__pyx_n_u_ignore
#define __pyx_n_s_import __pyx_mstate_global->__pyx_n_s_import
#define __pyx_n_s_initializing __pyx_mstate_global->__pyx_n_s_initializing
#define __pyx_n_s_is_coroutine __pyx_mstate_global->__pyx_n_s_is_coroutine
#define __pyx_n_s_itertools __pyx_mstate_global->__pyx_n_s_itertools
#define __pyx_n_u_j __pyx_mstate_global->__pyx_n_u_j
#define __pyx_n_u_k __pyx_mstate_global->__pyx_n_u_k
#define __pyx_n_u_l __pyx_mstate_global->__pyx_n_u_l
#define __pyx_n_u_m __pyx_mstate_global->__pyx_n_u_m
#define __pyx_n_s_main __pyx_mstate_global->__pyx_n_s_main
#define __pyx_n_s_map __pyx_mstate_global->__pyx_n_s_map
#define __pyx_n_s_max_repeat_substr_length __pyx_mstate_global->__pyx_n_s_max_repeat_substr_length
#define __pyx_n_u_n __pyx_mstate_global->__pyx_n_u_n
#define __pyx_n_s_name __pyx_mstate_global->__pyx_n_s_name
#define __pyx_n_s_neologdn __pyx_mstate_global->__pyx_n_s_neologdn
#define __pyx_kp_s_neologdn_pyx __pyx_mstate_global->__pyx_kp_s_neologdn_pyx
#define __pyx_n_s_normalize __pyx_mstate_global->__pyx_n_s_normalize
#define __pyx_n_u_normalize __pyx_mstate_global->__pyx_n_u_normalize
#define __pyx_n_u_normalize_zenkaku __pyx_mstate_global->__pyx_n_u_normalize_zenkaku
#define __pyx_n_u_o __pyx_mstate_global->__pyx_n_u_o
#define __pyx_n_u_p __pyx_mstate_global->__pyx_n_u_p
#define __pyx_n_u_q __pyx_mstate_global->__pyx_n_u_q
#define __pyx_n_u_r __pyx_mstate_global->__pyx_n_u_r
#define __pyx_n_s_range __pyx_mstate_global->__pyx_n_s_range
#define __pyx_n_u_remove __pyx_mstate_global->__pyx_n_u_remove
#define __pyx_n_s_remove_space __pyx_mstate_global->__pyx_n_s_remove_space
#define __pyx_n_s_repeat __pyx_mstate_global->__pyx_n_s_repeat
#define __pyx_n_s_repeat_threshould __pyx_mstate_global->__pyx_n_s_repeat_threshould
#define __pyx_n_u_s __pyx_mstate_global->__pyx_n_u_s
#define __pyx_n_s_shorten_repeat __pyx_mstate_global->__pyx_n_s_shorten_repeat
#define __pyx_n_s_spec __pyx_mstate_global->__pyx_n_s_spec
#define __pyx_n_s_sys __pyx_mstate_global->__pyx_n_s_sys
#define __pyx_n_u_t __pyx_mstate_global->__pyx_n_u_t
#define __pyx_n_s_test __pyx_mstate_global->__pyx_n_s_test
#define __pyx_n_s_text __pyx_mstate_global->__pyx_n_s_text
#define __pyx_n_s_tilde __pyx_mstate_global->__pyx_n_s_tilde
#define __pyx_n_u_u __pyx_mstate_global->__pyx_n_u_u
#define __pyx_n_u_v __pyx_mstate_global->__pyx_n_u_v
#define __pyx_n_s_version __pyx_mstate_global->__pyx_n_s_version
#define __pyx_n_s_version_info __pyx_mstate_global->__pyx_n_s_version_info
#define __pyx_n_u_w __pyx_mstate_global->__pyx_n_u_w
#define __pyx_n_u_x __pyx_mstate_global->__pyx_n_u_x
#define __pyx_n_u_y __pyx_mstate_global->__pyx_n_u_y
#define __pyx_n_u_z __pyx_mstate_global->__pyx_n_u_z
#define __pyx_int_0 __pyx_mstate_global->__pyx_int_0
#define __pyx_int_3 __pyx_mstate_global->__pyx_int_3
#define __pyx_int_5 __pyx_mstate_global->__pyx_int_5
#define __pyx_int_8 __pyx_mstate_global->__pyx_int_8
#define __pyx_int_128 __pyx_mstate_global->__pyx_int_128
#define __pyx_int_12289 __pyx_mstate_global->__pyx_int_12289
#define __pyx_int_12352 __pyx_mstate_global->__pyx_int_12352
#define __pyx_int_12448 __pyx_mstate_global->__pyx_int_12448
#define __pyx_int_12544 __pyx_mstate_global->__pyx_int_12544
#define __pyx_int_19968 __pyx_mstate_global->__pyx_int_19968
#define __pyx_int_40960 __pyx_mstate_global->__pyx_int_40960
#define __pyx_int_65280 __pyx_mstate_global->__pyx_int_65280
#define __pyx_int_65520 __pyx_mstate_global->__pyx_int_65520
#define __pyx_tuple__3 __pyx_mstate_global->__pyx_tuple__3
#define __pyx_tuple__5 __pyx_mstate_global->__pyx_tuple__5
#define __pyx_tuple__7 __pyx_mstate_global->__pyx_tuple__7
#define __pyx_tuple__9 __pyx_mstate_global->__pyx_tuple__9
#define __pyx_tuple__11 __pyx_mstate_global->__pyx_tuple__11
#define __pyx_tuple__13 __pyx_mstate_global->__pyx_tuple__13
#define __pyx_tuple__15 __pyx_mstate_global->__pyx_tuple__15
#define __pyx_tuple__17 __pyx_mstate_global->__pyx_tuple__17
#define __pyx_tuple__19 __pyx_mstate_global->__pyx_tuple__19
#define __pyx_tuple__21 __pyx_mstate_global->__pyx_tuple__21
#define __pyx_tuple__23 __pyx_mstate_global->__pyx_tuple__23
#define __pyx_tuple__25 __pyx_mstate_global->__pyx_tuple__25
#define __pyx_tuple__27 __pyx_mstate_global->__pyx_tuple__27
#define __pyx_tuple__29 __pyx_mstate_global->__pyx_tuple__29
#define __pyx_tuple__31 __pyx_mstate_global->__pyx_tuple__31
#define __pyx_tuple__33 __pyx_mstate_global->__pyx_tuple__33
#define __pyx_tuple__35 __pyx_mstate_global->__pyx_tuple__35
#define __pyx_tuple__37 __pyx_mstate_global->__pyx_tuple__37
#define __pyx_tuple__39 __pyx_mstate_global->__pyx_tuple__39
#define __pyx_tuple__41 __pyx_mstate_global->__pyx_tuple__41
#define __pyx_tuple__43 __pyx_mstate_global->__pyx_tuple__43
#define __pyx_tuple__45 __pyx_mstate_global->__pyx_tuple__45
#define __pyx_tuple__47 __pyx_mstate_global->__pyx_tuple__47
#define __pyx_tuple__49 __pyx_mstate_global->__pyx_tuple__49
#define __pyx_tuple__51 __pyx_mstate_global->__pyx_tuple__51
#define __pyx_tuple__53 __pyx_mstate_global->__pyx_tuple__53
#define __pyx_tuple__55 __pyx_mstate_global->__pyx_tuple__55
#define __pyx_tuple__57 __pyx_mstate_global->__pyx_tuple__57
#define __pyx_tuple__59 __pyx_mstate_global->__pyx_tuple__59
#define __pyx_tuple__61 __pyx_mstate_global->__pyx_tuple__61
#define __pyx_tuple__63 __pyx_mstate_global->__pyx_tuple__63
#define __pyx_tuple__65 __pyx_mstate_global->__pyx_tuple__65
#define __pyx_tuple__67 __pyx_mstate_global->__pyx_tuple__67
#define __pyx_tuple__69 __pyx_mstate_global->__pyx_tuple__69
#define __pyx_tuple__71 __pyx_mstate_global->__pyx_tuple__71
#define __pyx_tuple__73 __pyx_mstate_global->__pyx_tuple__73
#define __pyx_tuple__75 __pyx_mstate_global->__pyx_tuple__75
#define __pyx_tuple__77 __pyx_mstate_global->__pyx_tuple__77
#define __pyx_tuple__79 __pyx_mstate_global->__pyx_tuple__79
#define __pyx_tuple__81 __pyx_mstate_global->__pyx_tuple__81
#define __pyx_tuple__83 __pyx_mstate_global->__pyx_tuple__83
#define __pyx_tuple__85 __pyx_mstate_global->__pyx_tuple__85
#define __pyx_tuple__87 __pyx_mstate_global->__pyx_tuple__87
#define __pyx_tuple__89 __pyx_mstate_global->__pyx_tuple__89
#define __pyx_tuple__91 __pyx_mstate_global->__pyx_tuple__91
#define __pyx_tuple__93 __pyx_mstate_global->__pyx_tuple__93
#define __pyx_tuple__95 __pyx_mstate_global->__pyx_tuple__95
#define __pyx_tuple__97 __pyx_mstate_global->__pyx_tuple__97
#define __pyx_tuple__99 __pyx_mstate_global->__pyx_tuple__99
#define __pyx_tuple__101 __pyx_mstate_global->__pyx_tuple__101
#define __pyx_tuple__103 __pyx_mstate_global->__pyx_tuple__103
#define __pyx_tuple__105 __pyx_mstate_global->__pyx_tuple__105
#define __pyx_tuple__107 __pyx_mstate_global->__pyx_tuple__107
#define __pyx_tuple__110 __pyx_mstate_global->__pyx_tuple__110
#define __pyx_tuple__113 __pyx_mstate_global->__pyx_tuple__113
#define __pyx_tuple__116 __pyx_mstate_global->__pyx_tuple__116
#define __pyx_tuple__119 __pyx_mstate_global->__pyx_tuple__119
#define __pyx_tuple__122 __pyx_mstate_global->__pyx_tuple__122
#define __pyx_tuple__125 __pyx_mstate_global->__pyx_tuple__125
#define __pyx_tuple__128 __pyx_mstate_global->__pyx_tuple__128
#define __pyx_tuple__131 __pyx_mstate_global->__pyx_tuple__131
#define __pyx_tuple__134 __pyx_mstate_global->__pyx_tuple__134
#define __pyx_tuple__136 __pyx_mstate_global->__pyx_tuple__136
#define __pyx_tuple__139 __pyx_mstate_global->__pyx_tuple__139
#define __pyx_tuple__142 __pyx_mstate_global->__pyx_tuple__142
#define __pyx_tuple__145 __pyx_mstate_global->__pyx_tuple__145
#define __pyx_tuple__147 __pyx_mstate_global->__pyx_tuple__147
#define __pyx_tuple__150 __pyx_mstate_global->__pyx_tuple__150
#define __pyx_tuple__153 __pyx_mstate_global->__pyx_tuple__153
#define __pyx_tuple__156 __pyx_mstate_global->__pyx_tuple__156
#define __pyx_tuple__159 __pyx_mstate_global->__pyx_tuple__159
#define __pyx_tuple__162 __pyx_mstate_global->__pyx_tuple__162
#define __pyx_tuple__165 __pyx_mstate_global->__pyx_tuple__165
#define __pyx_tuple__168 __pyx_mstate_global->__pyx_tuple__168
#define __pyx_tuple__171 __pyx_mstate_global->__pyx_tuple__171
#define __pyx_tuple__174 __pyx_mstate_global->__pyx_tuple__174
#define __pyx_tuple__177 __pyx_mstate_global->__pyx_tuple__177
#define __pyx_tuple__180 __pyx_mstate_global->__pyx_tuple__180
#define __pyx_tuple__183 __pyx_mstate_global->__pyx_tuple__183
#define __pyx_tuple__186 __pyx_mstate_global->__pyx_tuple__186
#define __pyx_tuple__189 __pyx_mstate_global->__pyx_tuple__189
#define __pyx_tuple__192 __pyx_mstate_global->__pyx_tuple__192
#define __pyx_tuple__195 __pyx_mstate_global->__pyx_tuple__195
#define __pyx_tuple__198 __pyx_mstate_global->__pyx_tuple__198
#define __pyx_tuple__199 __pyx_mstate_global->__pyx_tuple__199
#define __pyx_tuple__202 __pyx_mstate_global->__pyx_tuple__202
#define __pyx_tuple__205 __pyx_mstate_global->__pyx_tuple__205
#define __pyx_tuple__208 __pyx_mstate_global->__pyx_tuple__208
#define __pyx_tuple__211 __pyx_mstate_global->__pyx_tuple__211
#define __pyx_tuple__214 __pyx_mstate_global->__pyx_tuple__214
#define __pyx_tuple__217 __pyx_mstate_global->__pyx_tuple__217
#define __pyx_tuple__220 __pyx_mstate_global->__pyx_tuple__220
#define __pyx_tuple__223 __pyx_mstate_global->__pyx_tuple__223
#define __pyx_tuple__226 __pyx_mstate_global->__pyx_tuple__226
#define __pyx_tuple__229 __pyx_mstate_global->__pyx_tuple__229
#define __pyx_tuple__232 __pyx_mstate_global->__pyx_tuple__232
#define __pyx_tuple__235 __pyx_mstate_global->__pyx_tuple__235
#define __pyx_tuple__238 __pyx_mstate_global->__pyx_tuple__238
#define __pyx_tuple__241 __pyx_mstate_global->__pyx_tuple__241
#define __pyx_tuple__244 __pyx_mstate_global->__pyx_tuple__244
#define __pyx_tuple__247 __pyx_mstate_global->__pyx_tuple__247
#define __pyx_tuple__250 __pyx_mstate_global->__pyx_tuple__250
#define __pyx_tuple__253 __pyx_mstate_global->__pyx_tuple__253
#define __pyx_tuple__256 __pyx_mstate_global->__pyx_tuple__256
#define __pyx_tuple__259 __pyx_mstate_global->__pyx_tuple__259
#define __pyx_tuple__262 __pyx_mstate_global->__pyx_tuple__262
#define __pyx_tuple__265 __pyx_mstate_global->__pyx_tuple__265
#define __pyx_tuple__268 __pyx_mstate_global->__pyx_tuple__268
#define __pyx_tuple__271 __pyx_mstate_global->__pyx_tuple__271
#define __pyx_tuple__274 __pyx_mstate_global->__pyx_tuple__274
#define __pyx_tuple__277 __pyx_mstate_global->__pyx_tuple__277
#define __pyx_tuple__280 __pyx_mstate_global->__pyx_tuple__280
#define __pyx_tuple__283 __pyx_mstate_global->__pyx_tuple__283
#define __pyx_tuple__286 __pyx_mstate_global->__pyx_tuple__286
#define __pyx_tuple__289 __pyx_mstate_global->__pyx_tuple__289
#define __pyx_tuple__292 __pyx_mstate_global->__pyx_tuple__292
#define __pyx_tuple__295 __pyx_mstate_global->__pyx_tuple__295
#define __pyx_tuple__298 __pyx_mstate_global->__pyx_tuple__298
#define __pyx_tuple__301 __pyx_mstate_global->__pyx_tuple__301
#define __pyx_tuple__304 __pyx_mstate_global->__pyx_tuple__304
#define __pyx_tuple__307 __pyx_mstate_global->__pyx_tuple__307
#define __pyx_tuple__310 __pyx_mstate_global->__pyx_tuple__310
#define __pyx_tuple__313 __pyx_mstate_global->__pyx_tuple__313
#define __pyx_tuple__316 __pyx_mstate_global->__pyx_tuple__316
#define __pyx_tuple__319 __pyx_mstate_global->__pyx_tuple__319
#define __pyx_tuple__322 __pyx_mstate_global->__pyx_tuple__322
#define __pyx_tuple__325 __pyx_mstate_global->__pyx_tuple__325
#define __pyx_tuple__328 __pyx_mstate_global->__pyx_tuple__328
#define __pyx_tuple__331 __pyx_mstate_global->__pyx_tuple__331
#define __pyx_tuple__334 __pyx_mstate_global->__pyx_tuple__334
#define __pyx_tuple__337 __pyx_mstate_global->__pyx_tuple__337
#define __pyx_tuple__340 __pyx_mstate_global->__pyx_tuple__340
#define __pyx_tuple__343 __pyx_mstate_global->__pyx_tuple__343
#define __pyx_tuple__346 __pyx_mstate_global->__pyx_tuple__346
#define __pyx_tuple__349 __pyx_mstate_global->__pyx_tuple__349
#define __pyx_tuple__352 __pyx_mstate_global->__pyx_tuple__352
#define __pyx_tuple__355 __pyx_mstate_global->__pyx_tuple__355
#define __pyx_tuple__358 __pyx_mstate_global->__pyx_tuple__358
#define __pyx_tuple__361 __pyx_mstate_global->__pyx_tuple__361
#define __pyx_tuple__364 __pyx_mstate_global->__pyx_tuple__364
#define __pyx_tuple__367 __pyx_mstate_global->__pyx_tuple__367
#define __pyx_tuple__370 __pyx_mstate_global->__pyx_tuple__370
#define __pyx_tuple__373 __pyx_mstate_global->__pyx_tuple__373
#define __pyx_tuple__376 __pyx_mstate_global->__pyx_tuple__376
#define __pyx_tuple__379 __pyx_mstate_global->__pyx_tuple__379
#define __pyx_tuple__382 __pyx_mstate_global->__pyx_tuple__382
#define __pyx_tuple__385 __pyx_mstate_global->__pyx_tuple__385
#define __pyx_tuple__388 __pyx_mstate_global->__pyx_tuple__388
#define __pyx_tuple__389 __pyx_mstate_global->__pyx_tuple__389
#define __pyx_tuple__391 __pyx_mstate_global->__pyx_tuple__391
#define __pyx_tuple__393 __pyx_mstate_global->__pyx_tuple__393
#define __pyx_tuple__395 __pyx_mstate_global->__pyx_tuple__395
#define __pyx_tuple__397 __pyx_mstate_global->__pyx_tuple__397
#define __pyx_tuple__399 __pyx_mstate_global->__pyx_tuple__399
#define __pyx_tuple__401 __pyx_mstate_global->__pyx_tuple__401
#define __pyx_tuple__403 __pyx_mstate_global->__pyx_tuple__403
#define __pyx_tuple__405 __pyx_mstate_global->__pyx_tuple__405
#define __pyx_tuple__407 __pyx_mstate_global->__pyx_tuple__407
#define __pyx_tuple__409 __pyx_mstate_global->__pyx_tuple__409
#define __pyx_tuple__410 __pyx_mstate_global->__pyx_tuple__410
#define __pyx_tuple__412 __pyx_mstate_global->__pyx_tuple__412
#define __pyx_tuple__414 __pyx_mstate_global->__pyx_tuple__414
#define __pyx_tuple__416 __pyx_mstate_global->__pyx_tuple__416
#define __pyx_tuple__418 __pyx_mstate_global->__pyx_tuple__418
#define __pyx_tuple__420 __pyx_mstate_global->__pyx_tuple__420
#define __pyx_tuple__422 __pyx_mstate_global->__pyx_tuple__422
#define __pyx_tuple__424 __pyx_mstate_global->__pyx_tuple__424
#define __pyx_tuple__426 __pyx_mstate_global->__pyx_tuple__426
#define __pyx_tuple__428 __pyx_mstate_global->__pyx_tuple__428
#define __pyx_tuple__430 __pyx_mstate_global->__pyx_tuple__430
#define __pyx_tuple__432 __pyx_mstate_global->__pyx_tuple__432
#define __pyx_tuple__434 __pyx_mstate_global->__pyx_tuple__434
#define __pyx_tuple__436 __pyx_mstate_global->__pyx_tuple__436
#define __pyx_tuple__438 __pyx_mstate_global->__pyx_tuple__438
#define __pyx_tuple__440 __pyx_mstate_global->__pyx_tuple__440
#define __pyx_tuple__442 __pyx_mstate_global->__pyx_tuple__442
#define __pyx_tuple__444 __pyx_mstate_global->__pyx_tuple__444
#define __pyx_tuple__446 __pyx_mstate_global->__pyx_tuple__446
#define __pyx_tuple__448 __pyx_mstate_global->__pyx_tuple__448
#define __pyx_tuple__450 __pyx_mstate_global->__pyx_tuple__450
#define __pyx_tuple__452 __pyx_mstate_global->__pyx_tuple__452
#define __pyx_tuple__455 __pyx_mstate_global->__pyx_tuple__455
#define __pyx_tuple__456 __pyx_mstate_global->__pyx_tuple__456
#define __pyx_tuple__458 __pyx_mstate_global->__pyx_tuple__458
#define __pyx_tuple__460 __pyx_mstate_global->__pyx_tuple__460
#define __pyx_tuple__462 __pyx_mstate_global->__pyx_tuple__462
#define __pyx_tuple__464 __pyx_mstate_global->__pyx_tuple__464
#define __pyx_tuple__466 __pyx_mstate_global->__pyx_tuple__466
#define __pyx_tuple__469 __pyx_mstate_global->__pyx_tuple__469
#define __pyx_tuple__472 __pyx_mstate_global->__pyx_tuple__472
#define __pyx_tuple__475 __pyx_mstate_global->__pyx_tuple__475
#define __pyx_tuple__478 __pyx_mstate_global->__pyx_tuple__478
#define __pyx_tuple__481 __pyx_mstate_global->__pyx_tuple__481
#define __pyx_tuple__482 __pyx_mstate_global->__pyx_tuple__482
#define __pyx_tuple__492 __pyx_mstate_global->__pyx_tuple__492
#define __pyx_tuple__499 __pyx_mstate_global->__pyx_tuple__499
#define __pyx_tuple__506 __pyx_mstate_global->__pyx_tuple__506
#define __pyx_tuple__509 __pyx_mstate_global->__pyx_tuple__509
#define __pyx_tuple__510 __pyx_mstate_global->__pyx_tuple__510
#define __pyx_tuple__511 __pyx_mstate_global->__pyx_tuple__511
#define __pyx_tuple__512 __pyx_mstate_global->__pyx_tuple__512
#define __pyx_tuple__513 __pyx_mstate_global->__pyx_tuple__513
#define __pyx_tuple__514 __pyx_mstate_global->__pyx_tuple__514
#define __pyx_tuple__515 __pyx_mstate_global->__pyx_tuple__515
#define __pyx_tuple__516 __pyx_mstate_global->__pyx_tuple__516
#define __pyx_tuple__518 __pyx_mstate_global->__pyx_tuple__518
#define __pyx_tuple__519 __pyx_mstate_global->__pyx_tuple__519
#define __pyx_tuple__521 __pyx_mstate_global->__pyx_tuple__521
#define __pyx_codeobj__517 __pyx_mstate_global->__pyx_codeobj__517
#define __pyx_codeobj__520 __pyx_mstate_global->__pyx_codeobj__520
/* #### Code section: module_code ### */

/* "neologdn.pyx":18
 * 
 * 
 * cdef py_ucs4_to_unicode(Py_UCS4 *ucs4_ptr, Py_ssize_t length):             # <<<<<<<<<<<<<<
 *     return PyUnicode_DecodeUTF32(<char*>ucs4_ptr, sizeof(Py_UCS4)*length, NULL, NULL)
 * 
 */

static PyObject *__pyx_f_8neologdn_py_ucs4_to_unicode(Py_UCS4 *__pyx_v_ucs4_ptr, Py_ssize_t __pyx_v_length) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_ucs4_to_unicode", 1);

  /* "neologdn.pyx":19
 * 
 * cdef py_ucs4_to_unicode(Py_UCS4 *ucs4_ptr, Py_ssize_t length):
 *     return PyUnicode_DecodeUTF32(<char*>ucs4_ptr, sizeof(Py_UCS4)*length, NULL, NULL)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyUnicode_DecodeUTF32(((char *)__pyx_v_ucs4_ptr), ((sizeof(Py_UCS4)) * __pyx_v_length), NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "neologdn.pyx":18
 * 
 * 
 * cdef py_ucs4_to_unicode(Py_UCS4 *ucs4_ptr, Py_ssize_t length):             # <<<<<<<<<<<<<<
 *     return PyUnicode_DecodeUTF32(<char*>ucs4_ptr, sizeof(Py_UCS4)*length, NULL, NULL)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neologdn.py_ucs4_to_unicode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neologdn.pyx":110
 * 
 * 
 * cpdef unicode shorten_repeat(unicode text, int repeat_threshould, int max_repeat_substr_length=8):             # <<<<<<<<<<<<<<
 *     cdef int text_length, i, repeat_length, right_start, right_end, num_repeat_substrs
 *     cdef int upper_repeat_substr_length
 */

static PyObject *__pyx_pw_8neologdn_1shorten_repeat(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_f_8neologdn_shorten_repeat(PyObject *__pyx_v_text, int __pyx_v_repeat_threshould, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_8neologdn_shorten_repeat *__pyx_optional_args) {
  int __pyx_v_max_repeat_substr_length = ((int)8);
  int __pyx_v_text_length;
  int __pyx_v_i;
  int __pyx_v_repeat_length;
  int __pyx_v_right_start;
  int __pyx_v_right_end;
  int __pyx_v_num_repeat_substrs;
  int __pyx_v_upper_repeat_substr_length;
  PyObject *__pyx_v_substr = 0;
  PyObject *__pyx_v_right_substr = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("shorten_repeat", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_max_repeat_substr_length = __pyx_optional_args->max_repeat_substr_length;
    }
  }
  __Pyx_INCREF(__pyx_v_text);

  /* "neologdn.pyx":115
 *     cdef unicode substr, right_substr
 * 
 *     i = 0             # <<<<<<<<<<<<<<
 *     while i < len(text):
 *         text_length = len(text)
 */
  __pyx_v_i = 0;

  /* "neologdn.pyx":116
 * 
 *     i = 0
 *     while i < len(text):             # <<<<<<<<<<<<<<
 *         text_length = len(text)
 * 
 */
  while (1) {
    if (unlikely(__pyx_v_text == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 116, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyUnicode_GET_LENGTH(__pyx_v_text); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 116, __pyx_L1_error)
    __pyx_t_2 = (__pyx_v_i < __pyx_t_1);
    if (!__pyx_t_2) break;

    /* "neologdn.pyx":117
 *     i = 0
 *     while i < len(text):
 *         text_length = len(text)             # <<<<<<<<<<<<<<
 * 
 *         upper_repeat_substr_length = (text_length - i) // 2
 */
    if (unlikely(__pyx_v_text == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 117, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyUnicode_GET_LENGTH(__pyx_v_text); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 117, __pyx_L1_error)
    __pyx_v_text_length = __pyx_t_1;

    /* "neologdn.pyx":119
 *         text_length = len(text)
 * 
 *         upper_repeat_substr_length = (text_length - i) // 2             # <<<<<<<<<<<<<<
 *         if max_repeat_substr_length and max_repeat_substr_length < upper_repeat_substr_length:
 *             upper_repeat_substr_length = max_repeat_substr_length + 1
 */
    __pyx_v_upper_repeat_substr_length = __Pyx_div_long((__pyx_v_text_length - __pyx_v_i), 2);

    /* "neologdn.pyx":120
 * 
 *         upper_repeat_substr_length = (text_length - i) // 2
 *         if max_repeat_substr_length and max_repeat_substr_length < upper_repeat_substr_length:             # <<<<<<<<<<<<<<
 *             upper_repeat_substr_length = max_repeat_substr_length + 1
 * 
 */
    __pyx_t_3 = (__pyx_v_max_repeat_substr_length != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_3 = (__pyx_v_max_repeat_substr_length < __pyx_v_upper_repeat_substr_length);
    __pyx_t_2 = __pyx_t_3;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_2) {

      /* "neologdn.pyx":121
 *         upper_repeat_substr_length = (text_length - i) // 2
 *         if max_repeat_substr_length and max_repeat_substr_length < upper_repeat_substr_length:
 *             upper_repeat_substr_length = max_repeat_substr_length + 1             # <<<<<<<<<<<<<<
 * 
 *         for repeat_length in range(1, upper_repeat_substr_length):
 */
      __pyx_v_upper_repeat_substr_length = (__pyx_v_max_repeat_substr_length + 1);

      /* "neologdn.pyx":120
 * 
 *         upper_repeat_substr_length = (text_length - i) // 2
 *         if max_repeat_substr_length and max_repeat_substr_length < upper_repeat_substr_length:             # <<<<<<<<<<<<<<
 *             upper_repeat_substr_length = max_repeat_substr_length + 1
 * 
 */
    }

    /* "neologdn.pyx":123
 *             upper_repeat_substr_length = max_repeat_substr_length + 1
 * 
 *         for repeat_length in range(1, upper_repeat_substr_length):             # <<<<<<<<<<<<<<
 *             substr = text[i:i+repeat_length]
 *             right_start = i + repeat_length
 */
    __pyx_t_4 = __pyx_v_upper_repeat_substr_length;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 1; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_repeat_length = __pyx_t_6;

      /* "neologdn.pyx":124
 * 
 *         for repeat_length in range(1, upper_repeat_substr_length):
 *             substr = text[i:i+repeat_length]             # <<<<<<<<<<<<<<
 *             right_start = i + repeat_length
 *             right_end = right_start + repeat_length
 */
      if (unlikely(__pyx_v_text == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 124, __pyx_L1_error)
      }
      __pyx_t_7 = __Pyx_PyUnicode_Substring(__pyx_v_text, __pyx_v_i, (__pyx_v_i + __pyx_v_repeat_length)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 124, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_XDECREF_SET(__pyx_v_substr, ((PyObject*)__pyx_t_7));
      __pyx_t_7 = 0;

      /* "neologdn.pyx":125
 *         for repeat_length in range(1, upper_repeat_substr_length):
 *             substr = text[i:i+repeat_length]
 *             right_start = i + repeat_length             # <<<<<<<<<<<<<<
 *             right_end = right_start + repeat_length
 *             right_substr = text[right_start:right_end]
 */
      __pyx_v_right_start = (__pyx_v_i + __pyx_v_repeat_length);

      /* "neologdn.pyx":126
 *             substr = text[i:i+repeat_length]
 *             right_start = i + repeat_length
 *             right_end = right_start + repeat_length             # <<<<<<<<<<<<<<
 *             right_substr = text[right_start:right_end]
 *             num_repeat_substrs = 1
 */
      __pyx_v_right_end = (__pyx_v_right_start + __pyx_v_repeat_length);

      /* "neologdn.pyx":127
 *             right_start = i + repeat_length
 *             right_end = right_start + repeat_length
 *             right_substr = text[right_start:right_end]             # <<<<<<<<<<<<<<
 *             num_repeat_substrs = 1
 *             while substr == right_substr and right_end <= text_length:
 */
      if (unlikely(__pyx_v_text == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 127, __pyx_L1_error)
      }
      __pyx_t_7 = __Pyx_PyUnicode_Substring(__pyx_v_text, __pyx_v_right_start, __pyx_v_right_end); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 127, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_XDECREF_SET(__pyx_v_right_substr, ((PyObject*)__pyx_t_7));
      __pyx_t_7 = 0;

      /* "neologdn.pyx":128
 *             right_end = right_start + repeat_length
 *             right_substr = text[right_start:right_end]
 *             num_repeat_substrs = 1             # <<<<<<<<<<<<<<
 *             while substr == right_substr and right_end <= text_length:
 *                 num_repeat_substrs += 1
 */
      __pyx_v_num_repeat_substrs = 1;

      /* "neologdn.pyx":129
 *             right_substr = text[right_start:right_end]
 *             num_repeat_substrs = 1
 *             while substr == right_substr and right_end <= text_length:             # <<<<<<<<<<<<<<
 *                 num_repeat_substrs += 1
 *                 right_start += repeat_length
 */
      while (1) {
        __pyx_t_3 = (__Pyx_PyUnicode_Equals(__pyx_v_substr, __pyx_v_right_substr, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 129, __pyx_L1_error)
        if (__pyx_t_3) {
        } else {
          __pyx_t_2 = __pyx_t_3;
          goto __pyx_L12_bool_binop_done;
        }
        __pyx_t_3 = (__pyx_v_right_end <= __pyx_v_text_length);
        __pyx_t_2 = __pyx_t_3;
        __pyx_L12_bool_binop_done:;
        if (!__pyx_t_2) break;

        /* "neologdn.pyx":130
 *             num_repeat_substrs = 1
 *             while substr == right_substr and right_end <= text_length:
 *                 num_repeat_substrs += 1             # <<<<<<<<<<<<<<
 *                 right_start += repeat_length
 *                 right_end += repeat_length
 */
        __pyx_v_num_repeat_substrs = (__pyx_v_num_repeat_substrs + 1);

        /* "neologdn.pyx":131
 *             while substr == right_substr and right_end <= text_length:
 *                 num_repeat_substrs += 1
 *                 right_start += repeat_length             # <<<<<<<<<<<<<<
 *                 right_end += repeat_length
 *                 right_substr = text[right_start:right_end]
 */
        __pyx_v_right_start = (__pyx_v_right_start + __pyx_v_repeat_length);

        /* "neologdn.pyx":132
 *                 num_repeat_substrs += 1
 *                 right_start += repeat_length
 *                 right_end += repeat_length             # <<<<<<<<<<<<<<
 *                 right_substr = text[right_start:right_end]
 *             if num_repeat_substrs > repeat_threshould:
 */
        __pyx_v_right_end = (__pyx_v_right_end + __pyx_v_repeat_length);

        /* "neologdn.pyx":133
 *                 right_start += repeat_length
 *                 right_end += repeat_length
 *                 right_substr = text[right_start:right_end]             # <<<<<<<<<<<<<<
 *             if num_repeat_substrs > repeat_threshould:
 *                 text = text[:i+repeat_length*repeat_threshould] + text[i+repeat_length*num_repeat_substrs:]
 */
        if (unlikely(__pyx_v_text == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(0, 133, __pyx_L1_error)
        }
        __pyx_t_7 = __Pyx_PyUnicode_Substring(__pyx_v_text, __pyx_v_right_start, __pyx_v_right_end); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 133, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF_SET(__pyx_v_right_substr, ((PyObject*)__pyx_t_7));
        __pyx_t_7 = 0;
      }

      /* "neologdn.pyx":134
 *                 right_end += repeat_length
 *                 right_substr = text[right_start:right_end]
 *             if num_repeat_substrs > repeat_threshould:             # <<<<<<<<<<<<<<
 *                 text = text[:i+repeat_length*repeat_threshould] + text[i+repeat_length*num_repeat_substrs:]
 *         i += 1
 */
      __pyx_t_2 = (__pyx_v_num_repeat_substrs > __pyx_v_repeat_threshould);
      if (__pyx_t_2) {

        /* "neologdn.pyx":135
 *                 right_substr = text[right_start:right_end]
 *             if num_repeat_substrs > repeat_threshould:
 *                 text = text[:i+repeat_length*repeat_threshould] + text[i+repeat_length*num_repeat_substrs:]             # <<<<<<<<<<<<<<
 *         i += 1
 *     return text
 */
        if (unlikely(__pyx_v_text == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(0, 135, __pyx_L1_error)
        }
        __pyx_t_7 = __Pyx_PyUnicode_Substring(__pyx_v_text, 0, (__pyx_v_i + (__pyx_v_repeat_length * __pyx_v_repeat_threshould))); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 135, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        if (unlikely(__pyx_v_text == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(0, 135, __pyx_L1_error)
        }
        __pyx_t_8 = __Pyx_PyUnicode_Substring(__pyx_v_text, (__pyx_v_i + (__pyx_v_repeat_length * __pyx_v_num_repeat_substrs)), PY_SSIZE_T_MAX); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 135, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_9 = __Pyx_PyUnicode_ConcatInPlace(__pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 135, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF_SET(__pyx_v_text, ((PyObject*)__pyx_t_9));
        __pyx_t_9 = 0;

        /* "neologdn.pyx":134
 *                 right_end += repeat_length
 *                 right_substr = text[right_start:right_end]
 *             if num_repeat_substrs > repeat_threshould:             # <<<<<<<<<<<<<<
 *                 text = text[:i+repeat_length*repeat_threshould] + text[i+repeat_length*num_repeat_substrs:]
 *         i += 1
 */
      }
    }

    /* "neologdn.pyx":136
 *             if num_repeat_substrs > repeat_threshould:
 *                 text = text[:i+repeat_length*repeat_threshould] + text[i+repeat_length*num_repeat_substrs:]
 *         i += 1             # <<<<<<<<<<<<<<
 *     return text
 * 
 */
    __pyx_v_i = (__pyx_v_i + 1);
  }

  /* "neologdn.pyx":137
 *                 text = text[:i+repeat_length*repeat_threshould] + text[i+repeat_length*num_repeat_substrs:]
 *         i += 1
 *     return text             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_text);
  __pyx_r = __pyx_v_text;
  goto __pyx_L0;

  /* "neologdn.pyx":110
 * 
 * 
 * cpdef unicode shorten_repeat(unicode text, int repeat_threshould, int max_repeat_substr_length=8):             # <<<<<<<<<<<<<<
 *     cdef int text_length, i, repeat_length, right_start, right_end, num_repeat_substrs
 *     cdef int upper_repeat_substr_length
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("neologdn.shorten_repeat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_substr);
  __Pyx_XDECREF(__pyx_v_right_substr);
  __Pyx_XDECREF(__pyx_v_text);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8neologdn_1shorten_repeat(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_8neologdn_1shorten_repeat = {"shorten_repeat", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_8neologdn_1shorten_repeat, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8neologdn_1shorten_repeat(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_text = 0;
  int __pyx_v_repeat_threshould;
  int __pyx_v_max_repeat_substr_length;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("shorten_repeat (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_text,&__pyx_n_s_repeat_threshould,&__pyx_n_s_max_repeat_substr_length,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_text)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 110, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_repeat_threshould)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 110, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("shorten_repeat", 0, 2, 3, 1); __PYX_ERR(0, 110, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_max_repeat_substr_length);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 110, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "shorten_repeat") < 0)) __PYX_ERR(0, 110, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_text = ((PyObject*)values[0]);
    __pyx_v_repeat_threshould = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_repeat_threshould == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 110, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_max_repeat_substr_length = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_max_repeat_substr_length == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 110, __pyx_L3_error)
    } else {
      __pyx_v_max_repeat_substr_length = ((int)8);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("shorten_repeat", 0, 2, 3, __pyx_nargs); __PYX_ERR(0, 110, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("neologdn.shorten_repeat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_text), (&PyUnicode_Type), 1, "text", 1))) __PYX_ERR(0, 110, __pyx_L1_error)
  __pyx_r = __pyx_pf_8neologdn_shorten_repeat(__pyx_self, __pyx_v_text, __pyx_v_repeat_threshould, __pyx_v_max_repeat_substr_length);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8neologdn_shorten_repeat(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text, int __pyx_v_repeat_threshould, int __pyx_v_max_repeat_substr_length) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_8neologdn_shorten_repeat __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("shorten_repeat", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.max_repeat_substr_length = __pyx_v_max_repeat_substr_length;
  __pyx_t_1 = __pyx_f_8neologdn_shorten_repeat(__pyx_v_text, __pyx_v_repeat_threshould, 0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neologdn.shorten_repeat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neologdn.pyx":140
 * 
 * 
 * cpdef unicode normalize(unicode text, int repeat=0, bint remove_space=True,             # <<<<<<<<<<<<<<
 *                         int max_repeat_substr_length=8, unicode tilde='remove'):
 *     cdef Py_UCS4 *buf = <Py_UCS4 *>malloc(sizeof(Py_UCS4) * (len(text) + 1))
 */

static PyObject *__pyx_pw_8neologdn_3normalize(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_f_8neologdn_normalize(PyObject *__pyx_v_text, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_8neologdn_normalize *__pyx_optional_args) {
  int __pyx_v_repeat = ((int)0);
  int __pyx_v_remove_space = ((int)1);
  int __pyx_v_max_repeat_substr_length = ((int)8);
  PyObject *__pyx_v_tilde = ((PyObject*)__pyx_n_u_remove);
  Py_UCS4 *__pyx_v_buf;
  Py_UCS4 __pyx_v_c;
  Py_UCS4 __pyx_v_prev;
  int __pyx_v_pos;
  int __pyx_v_lattin_space;
  PyObject *__pyx_v_ret = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  void *__pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_t_11;
  struct __pyx_opt_args_8neologdn_shorten_repeat __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("normalize", 1);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_repeat = __pyx_optional_args->repeat;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_remove_space = __pyx_optional_args->remove_space;
        if (__pyx_optional_args->__pyx_n > 2) {
          __pyx_v_max_repeat_substr_length = __pyx_optional_args->max_repeat_substr_length;
          if (__pyx_optional_args->__pyx_n > 3) {
            __pyx_v_tilde = __pyx_optional_args->tilde;
          }
        }
      }
    }
  }

  /* "neologdn.pyx":142
 * cpdef unicode normalize(unicode text, int repeat=0, bint remove_space=True,
 *                         int max_repeat_substr_length=8, unicode tilde='remove'):
 *     cdef Py_UCS4 *buf = <Py_UCS4 *>malloc(sizeof(Py_UCS4) * (len(text) + 1))             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_UCS4 c, prev = '\0'
 */
  if (unlikely(__pyx_v_text == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 142, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyUnicode_GET_LENGTH(__pyx_v_text); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 142, __pyx_L1_error)
  __pyx_v_buf = ((Py_UCS4 *)malloc(((sizeof(Py_UCS4)) * (__pyx_t_1 + 1))));

  /* "neologdn.pyx":144
 *     cdef Py_UCS4 *buf = <Py_UCS4 *>malloc(sizeof(Py_UCS4) * (len(text) + 1))
 * 
 *     cdef Py_UCS4 c, prev = '\0'             # <<<<<<<<<<<<<<
 *     cdef int pos = 0
 *     cdef bint lattin_space = False
 */
  __pyx_v_prev = 0;

  /* "neologdn.pyx":145
 * 
 *     cdef Py_UCS4 c, prev = '\0'
 *     cdef int pos = 0             # <<<<<<<<<<<<<<
 *     cdef bint lattin_space = False
 * 
 */
  __pyx_v_pos = 0;

  /* "neologdn.pyx":146
 *     cdef Py_UCS4 c, prev = '\0'
 *     cdef int pos = 0
 *     cdef bint lattin_space = False             # <<<<<<<<<<<<<<
 * 
 *     for c in text:
 */
  __pyx_v_lattin_space = 0;

  /* "neologdn.pyx":148
 *     cdef bint lattin_space = False
 * 
 *     for c in text:             # <<<<<<<<<<<<<<
 *         if c in SPACE:
 *             c = ' '
 */
  if (unlikely(__pyx_v_text == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' is not iterable");
    __PYX_ERR(0, 148, __pyx_L1_error)
  }
  __Pyx_INCREF(__pyx_v_text);
  __pyx_t_2 = __pyx_v_text;
  __pyx_t_6 = __Pyx_init_unicode_iteration(__pyx_t_2, (&__pyx_t_3), (&__pyx_t_4), (&__pyx_t_5)); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 148, __pyx_L1_error)
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_3; __pyx_t_7++) {
    __pyx_t_1 = __pyx_t_7;
    __pyx_v_c = __Pyx_PyUnicode_READ(__pyx_t_5, __pyx_t_4, __pyx_t_1);

    /* "neologdn.pyx":149
 * 
 *     for c in text:
 *         if c in SPACE:             # <<<<<<<<<<<<<<
 *             c = ' '
 *             if (prev == ' ' or blocks.count(prev)) and remove_space:
 */
    __pyx_t_8 = __Pyx_PyUnicode_FromOrdinal(__pyx_v_c); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_SPACE); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = (__Pyx_PySequence_ContainsTF(__pyx_t_8, __pyx_t_9, Py_EQ)); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 149, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (__pyx_t_10) {

      /* "neologdn.pyx":150
 *     for c in text:
 *         if c in SPACE:
 *             c = ' '             # <<<<<<<<<<<<<<
 *             if (prev == ' ' or blocks.count(prev)) and remove_space:
 *                 continue
 */
      __pyx_v_c = 32;

      /* "neologdn.pyx":151
 *         if c in SPACE:
 *             c = ' '
 *             if (prev == ' ' or blocks.count(prev)) and remove_space:             # <<<<<<<<<<<<<<
 *                 continue
 *             elif prev != '*' and pos > 0 and basic_latin.count(prev):
 */
      __pyx_t_11 = (__pyx_v_prev == 32);
      if (!__pyx_t_11) {
      } else {
        goto __pyx_L8_next_and;
      }
      __pyx_t_11 = (__pyx_v_8neologdn_blocks.count(__pyx_v_prev) != 0);
      if (__pyx_t_11) {
      } else {
        __pyx_t_10 = __pyx_t_11;
        goto __pyx_L7_bool_binop_done;
      }
      __pyx_L8_next_and:;
      __pyx_t_10 = __pyx_v_remove_space;
      __pyx_L7_bool_binop_done:;
      if (__pyx_t_10) {

        /* "neologdn.pyx":152
 *             c = ' '
 *             if (prev == ' ' or blocks.count(prev)) and remove_space:
 *                 continue             # <<<<<<<<<<<<<<
 *             elif prev != '*' and pos > 0 and basic_latin.count(prev):
 *                 lattin_space = True
 */
        goto __pyx_L3_continue;

        /* "neologdn.pyx":151
 *         if c in SPACE:
 *             c = ' '
 *             if (prev == ' ' or blocks.count(prev)) and remove_space:             # <<<<<<<<<<<<<<
 *                 continue
 *             elif prev != '*' and pos > 0 and basic_latin.count(prev):
 */
      }

      /* "neologdn.pyx":153
 *             if (prev == ' ' or blocks.count(prev)) and remove_space:
 *                 continue
 *             elif prev != '*' and pos > 0 and basic_latin.count(prev):             # <<<<<<<<<<<<<<
 *                 lattin_space = True
 *                 buf[pos] = c
 */
      __pyx_t_11 = (__pyx_v_prev != 42);
      if (__pyx_t_11) {
      } else {
        __pyx_t_10 = __pyx_t_11;
        goto __pyx_L10_bool_binop_done;
      }
      __pyx_t_11 = (__pyx_v_pos > 0);
      if (__pyx_t_11) {
      } else {
        __pyx_t_10 = __pyx_t_11;
        goto __pyx_L10_bool_binop_done;
      }
      __pyx_t_11 = (__pyx_v_8neologdn_basic_latin.count(__pyx_v_prev) != 0);
      __pyx_t_10 = __pyx_t_11;
      __pyx_L10_bool_binop_done:;
      if (__pyx_t_10) {

        /* "neologdn.pyx":154
 *                 continue
 *             elif prev != '*' and pos > 0 and basic_latin.count(prev):
 *                 lattin_space = True             # <<<<<<<<<<<<<<
 *                 buf[pos] = c
 *             elif remove_space:
 */
        __pyx_v_lattin_space = 1;

        /* "neologdn.pyx":155
 *             elif prev != '*' and pos > 0 and basic_latin.count(prev):
 *                 lattin_space = True
 *                 buf[pos] = c             # <<<<<<<<<<<<<<
 *             elif remove_space:
 *                 pos -= 1
 */
        (__pyx_v_buf[__pyx_v_pos]) = __pyx_v_c;

        /* "neologdn.pyx":153
 *             if (prev == ' ' or blocks.count(prev)) and remove_space:
 *                 continue
 *             elif prev != '*' and pos > 0 and basic_latin.count(prev):             # <<<<<<<<<<<<<<
 *                 lattin_space = True
 *                 buf[pos] = c
 */
        goto __pyx_L6;
      }

      /* "neologdn.pyx":156
 *                 lattin_space = True
 *                 buf[pos] = c
 *             elif remove_space:             # <<<<<<<<<<<<<<
 *                 pos -= 1
 *             else:
 */
      if (__pyx_v_remove_space) {

        /* "neologdn.pyx":157
 *                 buf[pos] = c
 *             elif remove_space:
 *                 pos -= 1             # <<<<<<<<<<<<<<
 *             else:
 *                 buf[pos] = c
 */
        __pyx_v_pos = (__pyx_v_pos - 1);

        /* "neologdn.pyx":156
 *                 lattin_space = True
 *                 buf[pos] = c
 *             elif remove_space:             # <<<<<<<<<<<<<<
 *                 pos -= 1
 *             else:
 */
        goto __pyx_L6;
      }

      /* "neologdn.pyx":159
 *                 pos -= 1
 *             else:
 *                 buf[pos] = c             # <<<<<<<<<<<<<<
 *         else:
 *             if c in HIPHENS:
 */
      /*else*/ {
        (__pyx_v_buf[__pyx_v_pos]) = __pyx_v_c;
      }
      __pyx_L6:;

      /* "neologdn.pyx":149
 * 
 *     for c in text:
 *         if c in SPACE:             # <<<<<<<<<<<<<<
 *             c = ' '
 *             if (prev == ' ' or blocks.count(prev)) and remove_space:
 */
      goto __pyx_L5;
    }

    /* "neologdn.pyx":161
 *                 buf[pos] = c
 *         else:
 *             if c in HIPHENS:             # <<<<<<<<<<<<<<
 *                 if prev == '-':
 *                     continue
 */
    /*else*/ {
      __pyx_t_9 = __Pyx_PyUnicode_FromOrdinal(__pyx_v_c); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 161, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_HIPHENS); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 161, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_10 = (__Pyx_PySequence_ContainsTF(__pyx_t_9, __pyx_t_8, Py_EQ)); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 161, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (__pyx_t_10) {

        /* "neologdn.pyx":162
 *         else:
 *             if c in HIPHENS:
 *                 if prev == '-':             # <<<<<<<<<<<<<<
 *                     continue
 *                 else:
 */
        __pyx_t_10 = (__pyx_v_prev == 45);
        if (__pyx_t_10) {

          /* "neologdn.pyx":163
 *             if c in HIPHENS:
 *                 if prev == '-':
 *                     continue             # <<<<<<<<<<<<<<
 *                 else:
 *                     buf[pos] = c = '-'
 */
          goto __pyx_L3_continue;

          /* "neologdn.pyx":162
 *         else:
 *             if c in HIPHENS:
 *                 if prev == '-':             # <<<<<<<<<<<<<<
 *                     continue
 *                 else:
 */
        }

        /* "neologdn.pyx":165
 *                     continue
 *                 else:
 *                     buf[pos] = c = '-'             # <<<<<<<<<<<<<<
 *                 lattin_space = False
 *             elif c in CHOONPUS:
 */
        /*else*/ {
          (__pyx_v_buf[__pyx_v_pos]) = 45;
          __pyx_v_c = 45;
        }

        /* "neologdn.pyx":166
 *                 else:
 *                     buf[pos] = c = '-'
 *                 lattin_space = False             # <<<<<<<<<<<<<<
 *             elif c in CHOONPUS:
 *                 if prev == '':
 */
        __pyx_v_lattin_space = 0;

        /* "neologdn.pyx":161
 *                 buf[pos] = c
 *         else:
 *             if c in HIPHENS:             # <<<<<<<<<<<<<<
 *                 if prev == '-':
 *                     continue
 */
        goto __pyx_L13;
      }

      /* "neologdn.pyx":167
 *                     buf[pos] = c = '-'
 *                 lattin_space = False
 *             elif c in CHOONPUS:             # <<<<<<<<<<<<<<
 *                 if prev == '':
 *                     continue
 */
      __pyx_t_8 = __Pyx_PyUnicode_FromOrdinal(__pyx_v_c); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 167, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_CHOONPUS); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 167, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = (__Pyx_PySequence_ContainsTF(__pyx_t_8, __pyx_t_9, Py_EQ)); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 167, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (__pyx_t_10) {

        /* "neologdn.pyx":168
 *                 lattin_space = False
 *             elif c in CHOONPUS:
 *                 if prev == '':             # <<<<<<<<<<<<<<
 *                     continue
 *                 else:
 */
        __pyx_t_10 = (__pyx_v_prev == 0x30FC);
        if (__pyx_t_10) {

          /* "neologdn.pyx":169
 *             elif c in CHOONPUS:
 *                 if prev == '':
 *                     continue             # <<<<<<<<<<<<<<
 *                 else:
 *                     buf[pos] = c = ''
 */
          goto __pyx_L3_continue;

          /* "neologdn.pyx":168
 *                 lattin_space = False
 *             elif c in CHOONPUS:
 *                 if prev == '':             # <<<<<<<<<<<<<<
 *                     continue
 *                 else:
 */
        }

        /* "neologdn.pyx":171
 *                     continue
 *                 else:
 *                     buf[pos] = c = ''             # <<<<<<<<<<<<<<
 *                 lattin_space = False
 *             elif c in TILDES:
 */
        /*else*/ {
          (__pyx_v_buf[__pyx_v_pos]) = 0x30FC;
          __pyx_v_c = 0x30FC;
        }

        /* "neologdn.pyx":172
 *                 else:
 *                     buf[pos] = c = ''
 *                 lattin_space = False             # <<<<<<<<<<<<<<
 *             elif c in TILDES:
 *                 if tilde == 'ignore':
 */
        __pyx_v_lattin_space = 0;

        /* "neologdn.pyx":167
 *                     buf[pos] = c = '-'
 *                 lattin_space = False
 *             elif c in CHOONPUS:             # <<<<<<<<<<<<<<
 *                 if prev == '':
 *                     continue
 */
        goto __pyx_L13;
      }

      /* "neologdn.pyx":173
 *                     buf[pos] = c = ''
 *                 lattin_space = False
 *             elif c in TILDES:             # <<<<<<<<<<<<<<
 *                 if tilde == 'ignore':
 *                     buf[pos] = c
 */
      __pyx_t_9 = __Pyx_PyUnicode_FromOrdinal(__pyx_v_c); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 173, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_TILDES); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 173, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_10 = (__Pyx_PySequence_ContainsTF(__pyx_t_9, __pyx_t_8, Py_EQ)); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 173, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (__pyx_t_10) {

        /* "neologdn.pyx":174
 *                 lattin_space = False
 *             elif c in TILDES:
 *                 if tilde == 'ignore':             # <<<<<<<<<<<<<<
 *                     buf[pos] = c
 *                 elif tilde == 'normalize':
 */
        __pyx_t_10 = (__Pyx_PyUnicode_Equals(__pyx_v_tilde, __pyx_n_u_ignore, Py_EQ)); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 174, __pyx_L1_error)
        if (__pyx_t_10) {

          /* "neologdn.pyx":175
 *             elif c in TILDES:
 *                 if tilde == 'ignore':
 *                     buf[pos] = c             # <<<<<<<<<<<<<<
 *                 elif tilde == 'normalize':
 *                     buf[pos] = c = '~'
 */
          (__pyx_v_buf[__pyx_v_pos]) = __pyx_v_c;

          /* "neologdn.pyx":174
 *                 lattin_space = False
 *             elif c in TILDES:
 *                 if tilde == 'ignore':             # <<<<<<<<<<<<<<
 *                     buf[pos] = c
 *                 elif tilde == 'normalize':
 */
          goto __pyx_L16;
        }

        /* "neologdn.pyx":176
 *                 if tilde == 'ignore':
 *                     buf[pos] = c
 *                 elif tilde == 'normalize':             # <<<<<<<<<<<<<<
 *                     buf[pos] = c = '~'
 *                 elif tilde == 'normalize_zenkaku':
 */
        __pyx_t_10 = (__Pyx_PyUnicode_Equals(__pyx_v_tilde, __pyx_n_u_normalize, Py_EQ)); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 176, __pyx_L1_error)
        if (__pyx_t_10) {

          /* "neologdn.pyx":177
 *                     buf[pos] = c
 *                 elif tilde == 'normalize':
 *                     buf[pos] = c = '~'             # <<<<<<<<<<<<<<
 *                 elif tilde == 'normalize_zenkaku':
 *                     buf[pos] = c = ''
 */
          (__pyx_v_buf[__pyx_v_pos]) = 0x7E;
          __pyx_v_c = 0x7E;

          /* "neologdn.pyx":176
 *                 if tilde == 'ignore':
 *                     buf[pos] = c
 *                 elif tilde == 'normalize':             # <<<<<<<<<<<<<<
 *                     buf[pos] = c = '~'
 *                 elif tilde == 'normalize_zenkaku':
 */
          goto __pyx_L16;
        }

        /* "neologdn.pyx":178
 *                 elif tilde == 'normalize':
 *                     buf[pos] = c = '~'
 *                 elif tilde == 'normalize_zenkaku':             # <<<<<<<<<<<<<<
 *                     buf[pos] = c = ''
 *                 else:
 */
        __pyx_t_10 = (__Pyx_PyUnicode_Equals(__pyx_v_tilde, __pyx_n_u_normalize_zenkaku, Py_EQ)); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 178, __pyx_L1_error)
        if (__pyx_t_10) {

          /* "neologdn.pyx":179
 *                     buf[pos] = c = '~'
 *                 elif tilde == 'normalize_zenkaku':
 *                     buf[pos] = c = ''             # <<<<<<<<<<<<<<
 *                 else:
 *                     continue
 */
          (__pyx_v_buf[__pyx_v_pos]) = 0x301C;
          __pyx_v_c = 0x301C;

          /* "neologdn.pyx":178
 *                 elif tilde == 'normalize':
 *                     buf[pos] = c = '~'
 *                 elif tilde == 'normalize_zenkaku':             # <<<<<<<<<<<<<<
 *                     buf[pos] = c = ''
 *                 else:
 */
          goto __pyx_L16;
        }

        /* "neologdn.pyx":181
 *                     buf[pos] = c = ''
 *                 else:
 *                     continue             # <<<<<<<<<<<<<<
 *                 lattin_space = False
 *             else:
 */
        /*else*/ {
          goto __pyx_L3_continue;
        }
        __pyx_L16:;

        /* "neologdn.pyx":182
 *                 else:
 *                     continue
 *                 lattin_space = False             # <<<<<<<<<<<<<<
 *             else:
 *                 if conversion_map.count(c):
 */
        __pyx_v_lattin_space = 0;

        /* "neologdn.pyx":173
 *                     buf[pos] = c = ''
 *                 lattin_space = False
 *             elif c in TILDES:             # <<<<<<<<<<<<<<
 *                 if tilde == 'ignore':
 *                     buf[pos] = c
 */
        goto __pyx_L13;
      }

      /* "neologdn.pyx":184
 *                 lattin_space = False
 *             else:
 *                 if conversion_map.count(c):             # <<<<<<<<<<<<<<
 *                     c = conversion_map[c]
 *                 if c == '' and kana_ten_map.count(prev):
 */
      /*else*/ {
        __pyx_t_10 = (__pyx_v_8neologdn_conversion_map.count(__pyx_v_c) != 0);
        if (__pyx_t_10) {

          /* "neologdn.pyx":185
 *             else:
 *                 if conversion_map.count(c):
 *                     c = conversion_map[c]             # <<<<<<<<<<<<<<
 *                 if c == '' and kana_ten_map.count(prev):
 *                     pos -= 1
 */
          __pyx_v_c = (__pyx_v_8neologdn_conversion_map[__pyx_v_c]);

          /* "neologdn.pyx":184
 *                 lattin_space = False
 *             else:
 *                 if conversion_map.count(c):             # <<<<<<<<<<<<<<
 *                     c = conversion_map[c]
 *                 if c == '' and kana_ten_map.count(prev):
 */
        }

        /* "neologdn.pyx":186
 *                 if conversion_map.count(c):
 *                     c = conversion_map[c]
 *                 if c == '' and kana_ten_map.count(prev):             # <<<<<<<<<<<<<<
 *                     pos -= 1
 *                     c = kana_ten_map[prev]
 */
        __pyx_t_11 = (__pyx_v_c == 0xFF9E);
        if (__pyx_t_11) {
        } else {
          __pyx_t_10 = __pyx_t_11;
          goto __pyx_L19_bool_binop_done;
        }
        __pyx_t_11 = (__pyx_v_8neologdn_kana_ten_map.count(__pyx_v_prev) != 0);
        __pyx_t_10 = __pyx_t_11;
        __pyx_L19_bool_binop_done:;
        if (__pyx_t_10) {

          /* "neologdn.pyx":187
 *                     c = conversion_map[c]
 *                 if c == '' and kana_ten_map.count(prev):
 *                     pos -= 1             # <<<<<<<<<<<<<<
 *                     c = kana_ten_map[prev]
 *                 elif c == '' and kana_maru_map.count(prev):
 */
          __pyx_v_pos = (__pyx_v_pos - 1);

          /* "neologdn.pyx":188
 *                 if c == '' and kana_ten_map.count(prev):
 *                     pos -= 1
 *                     c = kana_ten_map[prev]             # <<<<<<<<<<<<<<
 *                 elif c == '' and kana_maru_map.count(prev):
 *                     pos -= 1
 */
          __pyx_v_c = (__pyx_v_8neologdn_kana_ten_map[__pyx_v_prev]);

          /* "neologdn.pyx":186
 *                 if conversion_map.count(c):
 *                     c = conversion_map[c]
 *                 if c == '' and kana_ten_map.count(prev):             # <<<<<<<<<<<<<<
 *                     pos -= 1
 *                     c = kana_ten_map[prev]
 */
          goto __pyx_L18;
        }

        /* "neologdn.pyx":189
 *                     pos -= 1
 *                     c = kana_ten_map[prev]
 *                 elif c == '' and kana_maru_map.count(prev):             # <<<<<<<<<<<<<<
 *                     pos -= 1
 *                     c = kana_maru_map[prev]
 */
        __pyx_t_11 = (__pyx_v_c == 0xFF9F);
        if (__pyx_t_11) {
        } else {
          __pyx_t_10 = __pyx_t_11;
          goto __pyx_L21_bool_binop_done;
        }
        __pyx_t_11 = (__pyx_v_8neologdn_kana_maru_map.count(__pyx_v_prev) != 0);
        __pyx_t_10 = __pyx_t_11;
        __pyx_L21_bool_binop_done:;
        if (__pyx_t_10) {

          /* "neologdn.pyx":190
 *                     c = kana_ten_map[prev]
 *                 elif c == '' and kana_maru_map.count(prev):
 *                     pos -= 1             # <<<<<<<<<<<<<<
 *                     c = kana_maru_map[prev]
 *                 if lattin_space and blocks.count(c) and remove_space:
 */
          __pyx_v_pos = (__pyx_v_pos - 1);

          /* "neologdn.pyx":191
 *                 elif c == '' and kana_maru_map.count(prev):
 *                     pos -= 1
 *                     c = kana_maru_map[prev]             # <<<<<<<<<<<<<<
 *                 if lattin_space and blocks.count(c) and remove_space:
 *                     pos -= 1
 */
          __pyx_v_c = (__pyx_v_8neologdn_kana_maru_map[__pyx_v_prev]);

          /* "neologdn.pyx":189
 *                     pos -= 1
 *                     c = kana_ten_map[prev]
 *                 elif c == '' and kana_maru_map.count(prev):             # <<<<<<<<<<<<<<
 *                     pos -= 1
 *                     c = kana_maru_map[prev]
 */
        }
        __pyx_L18:;

        /* "neologdn.pyx":192
 *                     pos -= 1
 *                     c = kana_maru_map[prev]
 *                 if lattin_space and blocks.count(c) and remove_space:             # <<<<<<<<<<<<<<
 *                     pos -= 1
 *                 lattin_space = False
 */
        if (__pyx_v_lattin_space) {
        } else {
          __pyx_t_10 = __pyx_v_lattin_space;
          goto __pyx_L24_bool_binop_done;
        }
        __pyx_t_11 = (__pyx_v_8neologdn_blocks.count(__pyx_v_c) != 0);
        if (__pyx_t_11) {
        } else {
          __pyx_t_10 = __pyx_t_11;
          goto __pyx_L24_bool_binop_done;
        }
        __pyx_t_10 = __pyx_v_remove_space;
        __pyx_L24_bool_binop_done:;
        if (__pyx_t_10) {

          /* "neologdn.pyx":193
 *                     c = kana_maru_map[prev]
 *                 if lattin_space and blocks.count(c) and remove_space:
 *                     pos -= 1             # <<<<<<<<<<<<<<
 *                 lattin_space = False
 *                 buf[pos] = c
 */
          __pyx_v_pos = (__pyx_v_pos - 1);

          /* "neologdn.pyx":192
 *                     pos -= 1
 *                     c = kana_maru_map[prev]
 *                 if lattin_space and blocks.count(c) and remove_space:             # <<<<<<<<<<<<<<
 *                     pos -= 1
 *                 lattin_space = False
 */
        }

        /* "neologdn.pyx":194
 *                 if lattin_space and blocks.count(c) and remove_space:
 *                     pos -= 1
 *                 lattin_space = False             # <<<<<<<<<<<<<<
 *                 buf[pos] = c
 *         prev = c
 */
        __pyx_v_lattin_space = 0;

        /* "neologdn.pyx":195
 *                     pos -= 1
 *                 lattin_space = False
 *                 buf[pos] = c             # <<<<<<<<<<<<<<
 *         prev = c
 *         pos += 1
 */
        (__pyx_v_buf[__pyx_v_pos]) = __pyx_v_c;
      }
      __pyx_L13:;
    }
    __pyx_L5:;

    /* "neologdn.pyx":196
 *                 lattin_space = False
 *                 buf[pos] = c
 *         prev = c             # <<<<<<<<<<<<<<
 *         pos += 1
 * 
 */
    __pyx_v_prev = __pyx_v_c;

    /* "neologdn.pyx":197
 *                 buf[pos] = c
 *         prev = c
 *         pos += 1             # <<<<<<<<<<<<<<
 * 
 *     if buf[pos-1] == ' ':
 */
    __pyx_v_pos = (__pyx_v_pos + 1);
    __pyx_L3_continue:;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "neologdn.pyx":199
 *         pos += 1
 * 
 *     if buf[pos-1] == ' ':             # <<<<<<<<<<<<<<
 *         pos -= 1
 *     buf[pos] = '\0'
 */
  __pyx_t_10 = ((__pyx_v_buf[(__pyx_v_pos - 1)]) == 32);
  if (__pyx_t_10) {

    /* "neologdn.pyx":200
 * 
 *     if buf[pos-1] == ' ':
 *         pos -= 1             # <<<<<<<<<<<<<<
 *     buf[pos] = '\0'
 * 
 */
    __pyx_v_pos = (__pyx_v_pos - 1);

    /* "neologdn.pyx":199
 *         pos += 1
 * 
 *     if buf[pos-1] == ' ':             # <<<<<<<<<<<<<<
 *         pos -= 1
 *     buf[pos] = '\0'
 */
  }

  /* "neologdn.pyx":201
 *     if buf[pos-1] == ' ':
 *         pos -= 1
 *     buf[pos] = '\0'             # <<<<<<<<<<<<<<
 * 
 *     cdef unicode ret = py_ucs4_to_unicode(buf, pos)
 */
  (__pyx_v_buf[__pyx_v_pos]) = 0;

  /* "neologdn.pyx":203
 *     buf[pos] = '\0'
 * 
 *     cdef unicode ret = py_ucs4_to_unicode(buf, pos)             # <<<<<<<<<<<<<<
 *     free(buf)
 * 
 */
  __pyx_t_8 = __pyx_f_8neologdn_py_ucs4_to_unicode(__pyx_v_buf, __pyx_v_pos); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (!(likely(PyUnicode_CheckExact(__pyx_t_8))||((__pyx_t_8) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_8))) __PYX_ERR(0, 203, __pyx_L1_error)
  __pyx_v_ret = ((PyObject*)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "neologdn.pyx":204
 * 
 *     cdef unicode ret = py_ucs4_to_unicode(buf, pos)
 *     free(buf)             # <<<<<<<<<<<<<<
 * 
 *     if repeat:
 */
  free(__pyx_v_buf);

  /* "neologdn.pyx":206
 *     free(buf)
 * 
 *     if repeat:             # <<<<<<<<<<<<<<
 *         return shorten_repeat(ret, repeat, max_repeat_substr_length)
 *     return ret
 */
  __pyx_t_10 = (__pyx_v_repeat != 0);
  if (__pyx_t_10) {

    /* "neologdn.pyx":207
 * 
 *     if repeat:
 *         return shorten_repeat(ret, repeat, max_repeat_substr_length)             # <<<<<<<<<<<<<<
 *     return ret
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_12.__pyx_n = 1;
    __pyx_t_12.max_repeat_substr_length = __pyx_v_max_repeat_substr_length;
    __pyx_t_8 = __pyx_f_8neologdn_shorten_repeat(__pyx_v_ret, __pyx_v_repeat, 0, &__pyx_t_12); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_r = ((PyObject*)__pyx_t_8);
    __pyx_t_8 = 0;
    goto __pyx_L0;

    /* "neologdn.pyx":206
 *     free(buf)
 * 
 *     if repeat:             # <<<<<<<<<<<<<<
 *         return shorten_repeat(ret, repeat, max_repeat_substr_length)
 *     return ret
 */
  }

  /* "neologdn.pyx":208
 *     if repeat:
 *         return shorten_repeat(ret, repeat, max_repeat_substr_length)
 *     return ret             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "neologdn.pyx":140
 * 
 * 
 * cpdef unicode normalize(unicode text, int repeat=0, bint remove_space=True,             # <<<<<<<<<<<<<<
 *                         int max_repeat_substr_length=8, unicode tilde='remove'):
 *     cdef Py_UCS4 *buf = <Py_UCS4 *>malloc(sizeof(Py_UCS4) * (len(text) + 1))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("neologdn.normalize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8neologdn_3normalize(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_8neologdn_3normalize = {"normalize", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_8neologdn_3normalize, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8neologdn_3normalize(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_text = 0;
  int __pyx_v_repeat;
  int __pyx_v_remove_space;
  int __pyx_v_max_repeat_substr_length;
  PyObject *__pyx_v_tilde = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[5] = {0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("normalize (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_text,&__pyx_n_s_repeat,&__pyx_n_s_remove_space,&__pyx_n_s_max_repeat_substr_length,&__pyx_n_s_tilde,0};
    values[4] = __Pyx_Arg_NewRef_FASTCALL(((PyObject*)__pyx_n_u_remove));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_text)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 140, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_repeat);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 140, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_remove_space);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 140, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_max_repeat_substr_length);
          if (value) { values[3] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 140, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_tilde);
          if (value) { values[4] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 140, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "normalize") < 0)) __PYX_ERR(0, 140, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_text = ((PyObject*)values[0]);
    if (values[1]) {
      __pyx_v_repeat = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_repeat == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 140, __pyx_L3_error)
    } else {
      __pyx_v_repeat = ((int)0);
    }
    if (values[2]) {
      __pyx_v_remove_space = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_remove_space == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 140, __pyx_L3_error)
    } else {
      __pyx_v_remove_space = ((int)1);
    }
    if (values[3]) {
      __pyx_v_max_repeat_substr_length = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_max_repeat_substr_length == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 141, __pyx_L3_error)
    } else {
      __pyx_v_max_repeat_substr_length = ((int)8);
    }
    __pyx_v_tilde = ((PyObject*)values[4]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("normalize", 0, 1, 5, __pyx_nargs); __PYX_ERR(0, 140, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("neologdn.normalize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_text), (&PyUnicode_Type), 1, "text", 1))) __PYX_ERR(0, 140, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_tilde), (&PyUnicode_Type), 1, "tilde", 1))) __PYX_ERR(0, 141, __pyx_L1_error)
  __pyx_r = __pyx_pf_8neologdn_2normalize(__pyx_self, __pyx_v_text, __pyx_v_repeat, __pyx_v_remove_space, __pyx_v_max_repeat_substr_length, __pyx_v_tilde);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8neologdn_2normalize(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_text, int __pyx_v_repeat, int __pyx_v_remove_space, int __pyx_v_max_repeat_substr_length, PyObject *__pyx_v_tilde) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_8neologdn_normalize __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("normalize", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 4;
  __pyx_t_2.repeat = __pyx_v_repeat;
  __pyx_t_2.remove_space = __pyx_v_remove_space;
  __pyx_t_2.max_repeat_substr_length = __pyx_v_max_repeat_substr_length;
  __pyx_t_2.tilde = __pyx_v_tilde;
  __pyx_t_1 = __pyx_f_8neologdn_normalize(__pyx_v_text, 0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neologdn.normalize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif
/* #### Code section: pystring_table ### */

static int __Pyx_CreateStringTabAndInitStrings(void) {
  __Pyx_StringTabEntry __pyx_string_tab[] = {
    {&__pyx_n_s_, __pyx_k_, sizeof(__pyx_k_), 0, 0, 1, 1},
    {&__pyx_kp_u_, __pyx_k_, sizeof(__pyx_k_), 0, 1, 0, 0},
    {&__pyx_kp_u_0, __pyx_k_0, sizeof(__pyx_k_0), 0, 1, 0, 0},
    {&__pyx_kp_u_0_5_3, __pyx_k_0_5_3, sizeof(__pyx_k_0_5_3), 0, 1, 0, 0},
    {&__pyx_kp_u_1, __pyx_k_1, sizeof(__pyx_k_1), 0, 1, 0, 0},
    {&__pyx_kp_u_2, __pyx_k_2, sizeof(__pyx_k_2), 0, 1, 0, 0},
    {&__pyx_kp_u_3, __pyx_k_3, sizeof(__pyx_k_3), 0, 1, 0, 0},
    {&__pyx_kp_u_4, __pyx_k_4, sizeof(__pyx_k_4), 0, 1, 0, 0},
    {&__pyx_kp_u_5, __pyx_k_5, sizeof(__pyx_k_5), 0, 1, 0, 0},
    {&__pyx_kp_u_6, __pyx_k_6, sizeof(__pyx_k_6), 0, 1, 0, 0},
    {&__pyx_kp_u_7, __pyx_k_7, sizeof(__pyx_k_7), 0, 1, 0, 0},
    {&__pyx_kp_u_8, __pyx_k_8, sizeof(__pyx_k_8), 0, 1, 0, 0},
    {&__pyx_kp_u_9, __pyx_k_9, sizeof(__pyx_k_9), 0, 1, 0, 0},
    {&__pyx_n_u_A, __pyx_k_A, sizeof(__pyx_k_A), 0, 1, 0, 1},
    {&__pyx_n_s_ASCII, __pyx_k_ASCII, sizeof(__pyx_k_ASCII), 0, 0, 1, 1},
    {&__pyx_n_u_B, __pyx_k_B, sizeof(__pyx_k_B), 0, 1, 0, 1},
    {&__pyx_n_u_C, __pyx_k_C, sizeof(__pyx_k_C), 0, 1, 0, 1},
    {&__pyx_n_s_CHOONPUS, __pyx_k_CHOONPUS, sizeof(__pyx_k_CHOONPUS), 0, 0, 1, 1},
    {&__pyx_n_u_D, __pyx_k_D, sizeof(__pyx_k_D), 0, 1, 0, 1},
    {&__pyx_n_s_DIGIT, __pyx_k_DIGIT, sizeof(__pyx_k_DIGIT), 0, 0, 1, 1},
    {&__pyx_n_u_E, __pyx_k_E, sizeof(__pyx_k_E), 0, 1, 0, 1},
    {&__pyx_n_u_F, __pyx_k_F, sizeof(__pyx_k_F), 0, 1, 0, 1},
    {&__pyx_n_u_G, __pyx_k_G, sizeof(__pyx_k_G), 0, 1, 0, 1},
    {&__pyx_n_u_H, __pyx_k_H, sizeof(__pyx_k_H), 0, 1, 0, 1},
    {&__pyx_n_s_HIPHENS, __pyx_k_HIPHENS, sizeof(__pyx_k_HIPHENS), 0, 0, 1, 1},
    {&__pyx_n_u_I, __pyx_k_I, sizeof(__pyx_k_I), 0, 1, 0, 1},
    {&__pyx_n_u_J, __pyx_k_J, sizeof(__pyx_k_J), 0, 1, 0, 1},
    {&__pyx_n_u_K, __pyx_k_K, sizeof(__pyx_k_K), 0, 1, 0, 1},
    {&__pyx_n_s_KANA, __pyx_k_KANA, sizeof(__pyx_k_KANA), 0, 0, 1, 1},
    {&__pyx_n_s_KANA_MARU, __pyx_k_KANA_MARU, sizeof(__pyx_k_KANA_MARU), 0, 0, 1, 1},
    {&__pyx_n_s_KANA_TEN, __pyx_k_KANA_TEN, sizeof(__pyx_k_KANA_TEN), 0, 0, 1, 1},
    {&__pyx_n_u_L, __pyx_k_L, sizeof(__pyx_k_L), 0, 1, 0, 1},
    {&__pyx_n_u_M, __pyx_k_M, sizeof(__pyx_k_M), 0, 1, 0, 1},
    {&__pyx_n_u_N, __pyx_k_N, sizeof(__pyx_k_N), 0, 1, 0, 1},
    {&__pyx_n_u_O, __pyx_k_O, sizeof(__pyx_k_O), 0, 1, 0, 1},
    {&__pyx_n_u_P, __pyx_k_P, sizeof(__pyx_k_P), 0, 1, 0, 1},
    {&__pyx_n_u_Q, __pyx_k_Q, sizeof(__pyx_k_Q), 0, 1, 0, 1},
    {&__pyx_n_u_R, __pyx_k_R, sizeof(__pyx_k_R), 0, 1, 0, 1},
    {&__pyx_n_u_S, __pyx_k_S, sizeof(__pyx_k_S), 0, 1, 0, 1},
    {&__pyx_n_s_SPACE, __pyx_k_SPACE, sizeof(__pyx_k_SPACE), 0, 0, 1, 1},
    {&__pyx_n_u_T, __pyx_k_T, sizeof(__pyx_k_T), 0, 1, 0, 1},
    {&__pyx_n_s_TILDES, __pyx_k_TILDES, sizeof(__pyx_k_TILDES), 0, 0, 1, 1},
    {&__pyx_n_u_U, __pyx_k_U, sizeof(__pyx_k_U), 0, 1, 0, 1},
    {&__pyx_n_u_V, __pyx_k_V, sizeof(__pyx_k_V), 0, 1, 0, 1},
    {&__pyx_n_s_VERSION, __pyx_k_VERSION, sizeof(__pyx_k_VERSION), 0, 0, 1, 1},
    {&__pyx_n_u_W, __pyx_k_W, sizeof(__pyx_k_W), 0, 1, 0, 1},
    {&__pyx_n_u_X, __pyx_k_X, sizeof(__pyx_k_X), 0, 1, 0, 1},
    {&__pyx_n_u_Y, __pyx_k_Y, sizeof(__pyx_k_Y), 0, 1, 0, 1},
    {&__pyx_n_u_Z, __pyx_k_Z, sizeof(__pyx_k_Z), 0, 1, 0, 1},
    {&__pyx_n_u__10, __pyx_k__10, sizeof(__pyx_k__10), 0, 1, 0, 1},
    {&__pyx_n_u__100, __pyx_k__100, sizeof(__pyx_k__100), 0, 1, 0, 1},
    {&__pyx_n_u__102, __pyx_k__102, sizeof(__pyx_k__102), 0, 1, 0, 1},
    {&__pyx_n_u__104, __pyx_k__104, sizeof(__pyx_k__104), 0, 1, 0, 1},
    {&__pyx_n_u__106, __pyx_k__106, sizeof(__pyx_k__106), 0, 1, 0, 1},
    {&__pyx_kp_u__108, __pyx_k__108, sizeof(__pyx_k__108), 0, 1, 0, 0},
    {&__pyx_kp_u__109, __pyx_k__109, sizeof(__pyx_k__109), 0, 1, 0, 0},
    {&__pyx_kp_u__111, __pyx_k__111, sizeof(__pyx_k__111), 0, 1, 0, 0},
    {&__pyx_kp_u__112, __pyx_k__112, sizeof(__pyx_k__112), 0, 1, 0, 0},
    {&__pyx_kp_u__114, __pyx_k__114, sizeof(__pyx_k__114), 0, 1, 0, 0},
    {&__pyx_kp_u__115, __pyx_k__115, sizeof(__pyx_k__115), 0, 1, 0, 0},
    {&__pyx_kp_u__117, __pyx_k__117, sizeof(__pyx_k__117), 0, 1, 0, 0},
    {&__pyx_kp_u__118, __pyx_k__118, sizeof(__pyx_k__118), 0, 1, 0, 0},
    {&__pyx_n_u__12, __pyx_k__12, sizeof(__pyx_k__12), 0, 1, 0, 1},
    {&__pyx_kp_u__120, __pyx_k__120, sizeof(__pyx_k__120), 0, 1, 0, 0},
    {&__pyx_kp_u__121, __pyx_k__121, sizeof(__pyx_k__121), 0, 1, 0, 0},
    {&__pyx_kp_u__123, __pyx_k__123, sizeof(__pyx_k__123), 0, 1, 0, 0},
    {&__pyx_kp_u__124, __pyx_k__124, sizeof(__pyx_k__124), 0, 1, 0, 0},
    {&__pyx_kp_u__126, __pyx_k__126, sizeof(__pyx_k__126), 0, 1, 0, 0},
    {&__pyx_kp_u__127, __pyx_k__127, sizeof(__pyx_k__127), 0, 1, 0, 0},
    {&__pyx_kp_u__129, __pyx_k__129, sizeof(__pyx_k__129), 0, 1, 0, 0},
    {&__pyx_kp_u__130, __pyx_k__130, sizeof(__pyx_k__130), 0, 1, 0, 0},
    {&__pyx_kp_u__132, __pyx_k__132, sizeof(__pyx_k__132), 0, 1, 0, 0},
    {&__pyx_kp_u__133, __pyx_k__133, sizeof(__pyx_k__133), 0, 1, 0, 0},
    {&__pyx_kp_u__135, __pyx_k__135, sizeof(__pyx_k__135), 0, 1, 0, 0},
    {&__pyx_kp_u__137, __pyx_k__137, sizeof(__pyx_k__137), 0, 1, 0, 0},
    {&__pyx_kp_u__138, __pyx_k__138, sizeof(__pyx_k__138), 0, 1, 0, 0},
    {&__pyx_n_u__14, __pyx_k__14, sizeof(__pyx_k__14), 0, 1, 0, 1},
    {&__pyx_kp_u__140, __pyx_k__140, sizeof(__pyx_k__140), 0, 1, 0, 0},
    {&__pyx_kp_u__141, __pyx_k__141, sizeof(__pyx_k__141), 0, 1, 0, 0},
    {&__pyx_kp_u__143, __pyx_k__143, sizeof(__pyx_k__143), 0, 1, 0, 0},
    {&__pyx_kp_u__144, __pyx_k__144, sizeof(__pyx_k__144), 0, 1, 0, 0},
    {&__pyx_kp_u__146, __pyx_k__146, sizeof(__pyx_k__146), 0, 1, 0, 0},
    {&__pyx_kp_u__148, __pyx_k__148, sizeof(__pyx_k__148), 0, 1, 0, 0},
    {&__pyx_kp_u__149, __pyx_k__149, sizeof(__pyx_k__149), 0, 1, 0, 0},
    {&__pyx_kp_u__151, __pyx_k__151, sizeof(__pyx_k__151), 0, 1, 0, 0},
    {&__pyx_kp_u__152, __pyx_k__152, sizeof(__pyx_k__152), 0, 1, 0, 0},
    {&__pyx_kp_u__154, __pyx_k__154, sizeof(__pyx_k__154), 0, 1, 0, 0},
    {&__pyx_kp_u__155, __pyx_k__155, sizeof(__pyx_k__155), 0, 1, 0, 0},
    {&__pyx_kp_u__157, __pyx_k__157, sizeof(__pyx_k__157), 0, 1, 0, 0},
    {&__pyx_kp_u__158, __pyx_k__158, sizeof(__pyx_k__158), 0, 1, 0, 0},
    {&__pyx_n_u__16, __pyx_k__16, sizeof(__pyx_k__16), 0, 1, 0, 1},
    {&__pyx_kp_u__160, __pyx_k__160, sizeof(__pyx_k__160), 0, 1, 0, 0},
    {&__pyx_kp_u__161, __pyx_k__161, sizeof(__pyx_k__161), 0, 1, 0, 0},
    {&__pyx_kp_u__163, __pyx_k__163, sizeof(__pyx_k__163), 0, 1, 0, 0},
    {&__pyx_kp_u__164, __pyx_k__164, sizeof(__pyx_k__164), 0, 1, 0, 0},
    {&__pyx_kp_u__166, __pyx_k__166, sizeof(__pyx_k__166), 0, 1, 0, 0},
    {&__pyx_n_s__167, __pyx_k__167, sizeof(__pyx_k__167), 0, 0, 1, 1},
    {&__pyx_kp_u__167, __pyx_k__167, sizeof(__pyx_k__167), 0, 1, 0, 0},
    {&__pyx_kp_u__169, __pyx_k__169, sizeof(__pyx_k__169), 0, 1, 0, 0},
    {&__pyx_kp_u__170, __pyx_k__170, sizeof(__pyx_k__170), 0, 1, 0, 0},
    {&__pyx_kp_u__172, __pyx_k__172, sizeof(__pyx_k__172), 0, 1, 0, 0},
    {&__pyx_kp_u__173, __pyx_k__173, sizeof(__pyx_k__173), 0, 1, 0, 0},
    {&__pyx_kp_u__175, __pyx_k__175, sizeof(__pyx_k__175), 0, 1, 0, 0},
    {&__pyx_kp_u__176, __pyx_k__176, sizeof(__pyx_k__176), 0, 1, 0, 0},
    {&__pyx_kp_u__178, __pyx_k__178, sizeof(__pyx_k__178), 0, 1, 0, 0},
    {&__pyx_kp_u__179, __pyx_k__179, sizeof(__pyx_k__179), 0, 1, 0, 0},
    {&__pyx_n_u__18, __pyx_k__18, sizeof(__pyx_k__18), 0, 1, 0, 1},
    {&__pyx_kp_u__181, __pyx_k__181, sizeof(__pyx_k__181), 0, 1, 0, 0},
    {&__pyx_kp_u__182, __pyx_k__182, sizeof(__pyx_k__182), 0, 1, 0, 0},
    {&__pyx_kp_u__184, __pyx_k__184, sizeof(__pyx_k__184), 0, 1, 0, 0},
    {&__pyx_n_u__185, __pyx_k__185, sizeof(__pyx_k__185), 0, 1, 0, 1},
    {&__pyx_kp_u__187, __pyx_k__187, sizeof(__pyx_k__187), 0, 1, 0, 0},
    {&__pyx_kp_u__188, __pyx_k__188, sizeof(__pyx_k__188), 0, 1, 0, 0},
    {&__pyx_kp_u__190, __pyx_k__190, sizeof(__pyx_k__190), 0, 1, 0, 0},
    {&__pyx_kp_u__191, __pyx_k__191, sizeof(__pyx_k__191), 0, 1, 0, 0},
    {&__pyx_kp_u__193, __pyx_k__193, sizeof(__pyx_k__193), 0, 1, 0, 0},
    {&__pyx_kp_u__194, __pyx_k__194, sizeof(__pyx_k__194), 0, 1, 0, 0},
    {&__pyx_kp_u__196, __pyx_k__196, sizeof(__pyx_k__196), 0, 1, 0, 0},
    {&__pyx_kp_u__197, __pyx_k__197, sizeof(__pyx_k__197), 0, 1, 0, 0},
    {&__pyx_kp_u__2, __pyx_k__2, sizeof(__pyx_k__2), 0, 1, 0, 0},
    {&__pyx_n_u__20, __pyx_k__20, sizeof(__pyx_k__20), 0, 1, 0, 1},
    {&__pyx_n_u__200, __pyx_k__200, sizeof(__pyx_k__200), 0, 1, 0, 1},
    {&__pyx_n_u__201, __pyx_k__201, sizeof(__pyx_k__201), 0, 1, 0, 1},
    {&__pyx_n_u__203, __pyx_k__203, sizeof(__pyx_k__203), 0, 1, 0, 1},
    {&__pyx_n_u__204, __pyx_k__204, sizeof(__pyx_k__204), 0, 1, 0, 1},
    {&__pyx_n_u__206, __pyx_k__206, sizeof(__pyx_k__206), 0, 1, 0, 1},
    {&__pyx_n_u__207, __pyx_k__207, sizeof(__pyx_k__207), 0, 1, 0, 1},
    {&__pyx_n_u__209, __pyx_k__209, sizeof(__pyx_k__209), 0, 1, 0, 1},
    {&__pyx_n_u__210, __pyx_k__210, sizeof(__pyx_k__210), 0, 1, 0, 1},
    {&__pyx_n_u__212, __pyx_k__212, sizeof(__pyx_k__212), 0, 1, 0, 1},
    {&__pyx_n_u__213, __pyx_k__213, sizeof(__pyx_k__213), 0, 1, 0, 1},
    {&__pyx_n_u__215, __pyx_k__215, sizeof(__pyx_k__215), 0, 1, 0, 1},
    {&__pyx_n_u__216, __pyx_k__216, sizeof(__pyx_k__216), 0, 1, 0, 1},
    {&__pyx_n_u__218, __pyx_k__218, sizeof(__pyx_k__218), 0, 1, 0, 1},
    {&__pyx_n_u__219, __pyx_k__219, sizeof(__pyx_k__219), 0, 1, 0, 1},
    {&__pyx_n_u__22, __pyx_k__22, sizeof(__pyx_k__22), 0, 1, 0, 1},
    {&__pyx_n_u__221, __pyx_k__221, sizeof(__pyx_k__221), 0, 1, 0, 1},
    {&__pyx_n_u__222, __pyx_k__222, sizeof(__pyx_k__222), 0, 1, 0, 1},
    {&__pyx_n_u__224, __pyx_k__224, sizeof(__pyx_k__224), 0, 1, 0, 1},
    {&__pyx_n_u__225, __pyx_k__225, sizeof(__pyx_k__225), 0, 1, 0, 1},
    {&__pyx_n_u__227, __pyx_k__227, sizeof(__pyx_k__227), 0, 1, 0, 1},
    {&__pyx_n_u__228, __pyx_k__228, sizeof(__pyx_k__228), 0, 1, 0, 1},
    {&__pyx_n_u__230, __pyx_k__230, sizeof(__pyx_k__230), 0, 1, 0, 1},
    {&__pyx_n_u__231, __pyx_k__231, sizeof(__pyx_k__231), 0, 1, 0, 1},
    {&__pyx_n_u__233, __pyx_k__233, sizeof(__pyx_k__233), 0, 1, 0, 1},
    {&__pyx_n_u__234, __pyx_k__234, sizeof(__pyx_k__234), 0, 1, 0, 1},
    {&__pyx_n_u__236, __pyx_k__236, sizeof(__pyx_k__236), 0, 1, 0, 1},
    {&__pyx_n_u__237, __pyx_k__237, sizeof(__pyx_k__237), 0, 1, 0, 1},
    {&__pyx_n_u__239, __pyx_k__239, sizeof(__pyx_k__239), 0, 1, 0, 1},
    {&__pyx_n_u__24, __pyx_k__24, sizeof(__pyx_k__24), 0, 1, 0, 1},
    {&__pyx_n_u__240, __pyx_k__240, sizeof(__pyx_k__240), 0, 1, 0, 1},
    {&__pyx_n_u__242, __pyx_k__242, sizeof(__pyx_k__242), 0, 1, 0, 1},
    {&__pyx_n_u__243, __pyx_k__243, sizeof(__pyx_k__243), 0, 1, 0, 1},
    {&__pyx_n_u__245, __pyx_k__245, sizeof(__pyx_k__245), 0, 1, 0, 1},
    {&__pyx_n_u__246, __pyx_k__246, sizeof(__pyx_k__246), 0, 1, 0, 1},
    {&__pyx_n_u__248, __pyx_k__248, sizeof(__pyx_k__248), 0, 1, 0, 1},
    {&__pyx_n_u__249, __pyx_k__249, sizeof(__pyx_k__249), 0, 1, 0, 1},
    {&__pyx_n_u__251, __pyx_k__251, sizeof(__pyx_k__251), 0, 1, 0, 1},
    {&__pyx_n_u__252, __pyx_k__252, sizeof(__pyx_k__252), 0, 1, 0, 1},
    {&__pyx_n_u__254, __pyx_k__254, sizeof(__pyx_k__254), 0, 1, 0, 1},
    {&__pyx_n_u__255, __pyx_k__255, sizeof(__pyx_k__255), 0, 1, 0, 1},
    {&__pyx_n_u__257, __pyx_k__257, sizeof(__pyx_k__257), 0, 1, 0, 1},
    {&__pyx_n_u__258, __pyx_k__258, sizeof(__pyx_k__258), 0, 1, 0, 1},
    {&__pyx_n_u__26, __pyx_k__26, sizeof(__pyx_k__26), 0, 1, 0, 1},
    {&__pyx_n_u__260, __pyx_k__260, sizeof(__pyx_k__260), 0, 1, 0, 1},
    {&__pyx_n_u__261, __pyx_k__261, sizeof(__pyx_k__261), 0, 1, 0, 1},
    {&__pyx_n_u__263, __pyx_k__263, sizeof(__pyx_k__263), 0, 1, 0, 1},
    {&__pyx_n_u__264, __pyx_k__264, sizeof(__pyx_k__264), 0, 1, 0, 1},
    {&__pyx_n_u__266, __pyx_k__266, sizeof(__pyx_k__266), 0, 1, 0, 1},
    {&__pyx_n_u__267, __pyx_k__267, sizeof(__pyx_k__267), 0, 1, 0, 1},
    {&__pyx_n_u__269, __pyx_k__269, sizeof(__pyx_k__269), 0, 1, 0, 1},
    {&__pyx_n_u__270, __pyx_k__270, sizeof(__pyx_k__270), 0, 1, 0, 1},
    {&__pyx_n_u__272, __pyx_k__272, sizeof(__pyx_k__272), 0, 1, 0, 1},
    {&__pyx_n_u__273, __pyx_k__273, sizeof(__pyx_k__273), 0, 1, 0, 1},
    {&__pyx_n_u__275, __pyx_k__275, sizeof(__pyx_k__275), 0, 1, 0, 1},
    {&__pyx_n_u__276, __pyx_k__276, sizeof(__pyx_k__276), 0, 1, 0, 1},
    {&__pyx_n_u__278, __pyx_k__278, sizeof(__pyx_k__278), 0, 1, 0, 1},
    {&__pyx_n_u__279, __pyx_k__279, sizeof(__pyx_k__279), 0, 1, 0, 1},
    {&__pyx_n_u__28, __pyx_k__28, sizeof(__pyx_k__28), 0, 1, 0, 1},
    {&__pyx_n_u__281, __pyx_k__281, sizeof(__pyx_k__281), 0, 1, 0, 1},
    {&__pyx_n_u__282, __pyx_k__282, sizeof(__pyx_k__282), 0, 1, 0, 1},
    {&__pyx_n_u__284, __pyx_k__284, sizeof(__pyx_k__284), 0, 1, 0, 1},
    {&__pyx_n_u__285, __pyx_k__285, sizeof(__pyx_k__285), 0, 1, 0, 1},
    {&__pyx_n_u__287, __pyx_k__287, sizeof(__pyx_k__287), 0, 1, 0, 1},
    {&__pyx_n_u__288, __pyx_k__288, sizeof(__pyx_k__288), 0, 1, 0, 1},
    {&__pyx_n_u__290, __pyx_k__290, sizeof(__pyx_k__290), 0, 1, 0, 1},
    {&__pyx_n_u__291, __pyx_k__291, sizeof(__pyx_k__291), 0, 1, 0, 1},
    {&__pyx_n_u__293, __pyx_k__293, sizeof(__pyx_k__293), 0, 1, 0, 1},
    {&__pyx_n_u__294, __pyx_k__294, sizeof(__pyx_k__294), 0, 1, 0, 1},
    {&__pyx_n_u__296, __pyx_k__296, sizeof(__pyx_k__296), 0, 1, 0, 1},
    {&__pyx_n_u__297, __pyx_k__297, sizeof(__pyx_k__297), 0, 1, 0, 1},
    {&__pyx_n_u__299, __pyx_k__299, sizeof(__pyx_k__299), 0, 1, 0, 1},
    {&__pyx_n_u__30, __pyx_k__30, sizeof(__pyx_k__30), 0, 1, 0, 1},
    {&__pyx_n_u__300, __pyx_k__300, sizeof(__pyx_k__300), 0, 1, 0, 1},
    {&__pyx_n_u__302, __pyx_k__302, sizeof(__pyx_k__302), 0, 1, 0, 1},
    {&__pyx_n_u__303, __pyx_k__303, sizeof(__pyx_k__303), 0, 1, 0, 1},
    {&__pyx_n_u__305, __pyx_k__305, sizeof(__pyx_k__305), 0, 1, 0, 1},
    {&__pyx_n_u__306, __pyx_k__306, sizeof(__pyx_k__306), 0, 1, 0, 1},
    {&__pyx_n_u__308, __pyx_k__308, sizeof(__pyx_k__308), 0, 1, 0, 1},
    {&__pyx_n_u__309, __pyx_k__309, sizeof(__pyx_k__309), 0, 1, 0, 1},
    {&__pyx_n_u__311, __pyx_k__311, sizeof(__pyx_k__311), 0, 1, 0, 1},
    {&__pyx_n_u__312, __pyx_k__312, sizeof(__pyx_k__312), 0, 1, 0, 1},
    {&__pyx_n_u__314, __pyx_k__314, sizeof(__pyx_k__314), 0, 1, 0, 1},
    {&__pyx_n_u__315, __pyx_k__315, sizeof(__pyx_k__315), 0, 1, 0, 1},
    {&__pyx_n_u__317, __pyx_k__317, sizeof(__pyx_k__317), 0, 1, 0, 1},
    {&__pyx_n_u__318, __pyx_k__318, sizeof(__pyx_k__318), 0, 1, 0, 1},
    {&__pyx_n_u__32, __pyx_k__32, sizeof(__pyx_k__32), 0, 1, 0, 1},
    {&__pyx_n_u__320, __pyx_k__320, sizeof(__pyx_k__320), 0, 1, 0, 1},
    {&__pyx_n_u__321, __pyx_k__321, sizeof(__pyx_k__321), 0, 1, 0, 1},
    {&__pyx_n_u__323, __pyx_k__323, sizeof(__pyx_k__323), 0, 1, 0, 1},
    {&__pyx_n_u__324, __pyx_k__324, sizeof(__pyx_k__324), 0, 1, 0, 1},
    {&__pyx_n_u__326, __pyx_k__326, sizeof(__pyx_k__326), 0, 1, 0, 1},
    {&__pyx_n_u__327, __pyx_k__327, sizeof(__pyx_k__327), 0, 1, 0, 1},
    {&__pyx_n_u__329, __pyx_k__329, sizeof(__pyx_k__329), 0, 1, 0, 1},
    {&__pyx_n_u__330, __pyx_k__330, sizeof(__pyx_k__330), 0, 1, 0, 1},
    {&__pyx_n_u__332, __pyx_k__332, sizeof(__pyx_k__332), 0, 1, 0, 1},
    {&__pyx_n_u__333, __pyx_k__333, sizeof(__pyx_k__333), 0, 1, 0, 1},
    {&__pyx_n_u__335, __pyx_k__335, sizeof(__pyx_k__335), 0, 1, 0, 1},
    {&__pyx_n_u__336, __pyx_k__336, sizeof(__pyx_k__336), 0, 1, 0, 1},
    {&__pyx_n_u__338, __pyx_k__338, sizeof(__pyx_k__338), 0, 1, 0, 1},
    {&__pyx_n_u__339, __pyx_k__339, sizeof(__pyx_k__339), 0, 1, 0, 1},
    {&__pyx_n_u__34, __pyx_k__34, sizeof(__pyx_k__34), 0, 1, 0, 1},
    {&__pyx_n_u__341, __pyx_k__341, sizeof(__pyx_k__341), 0, 1, 0, 1},
    {&__pyx_n_u__342, __pyx_k__342, sizeof(__pyx_k__342), 0, 1, 0, 1},
    {&__pyx_n_u__344, __pyx_k__344, sizeof(__pyx_k__344), 0, 1, 0, 1},
    {&__pyx_n_u__345, __pyx_k__345, sizeof(__pyx_k__345), 0, 1, 0, 1},
    {&__pyx_n_u__347, __pyx_k__347, sizeof(__pyx_k__347), 0, 1, 0, 1},
    {&__pyx_n_u__348, __pyx_k__348, sizeof(__pyx_k__348), 0, 1, 0, 1},
    {&__pyx_n_u__350, __pyx_k__350, sizeof(__pyx_k__350), 0, 1, 0, 1},
    {&__pyx_n_u__351, __pyx_k__351, sizeof(__pyx_k__351), 0, 1, 0, 1},
    {&__pyx_n_u__353, __pyx_k__353, sizeof(__pyx_k__353), 0, 1, 0, 1},
    {&__pyx_n_u__354, __pyx_k__354, sizeof(__pyx_k__354), 0, 1, 0, 1},
    {&__pyx_n_u__356, __pyx_k__356, sizeof(__pyx_k__356), 0, 1, 0, 1},
    {&__pyx_n_u__357, __pyx_k__357, sizeof(__pyx_k__357), 0, 1, 0, 1},
    {&__pyx_n_u__359, __pyx_k__359, sizeof(__pyx_k__359), 0, 1, 0, 1},
    {&__pyx_n_u__36, __pyx_k__36, sizeof(__pyx_k__36), 0, 1, 0, 1},
    {&__pyx_n_u__360, __pyx_k__360, sizeof(__pyx_k__360), 0, 1, 0, 1},
    {&__pyx_n_u__362, __pyx_k__362, sizeof(__pyx_k__362), 0, 1, 0, 1},
    {&__pyx_n_u__363, __pyx_k__363, sizeof(__pyx_k__363), 0, 1, 0, 1},
    {&__pyx_kp_u__365, __pyx_k__365, sizeof(__pyx_k__365), 0, 1, 0, 0},
    {&__pyx_kp_u__366, __pyx_k__366, sizeof(__pyx_k__366), 0, 1, 0, 0},
    {&__pyx_kp_u__368, __pyx_k__368, sizeof(__pyx_k__368), 0, 1, 0, 0},
    {&__pyx_kp_u__369, __pyx_k__369, sizeof(__pyx_k__369), 0, 1, 0, 0},
    {&__pyx_kp_u__371, __pyx_k__371, sizeof(__pyx_k__371), 0, 1, 0, 0},
    {&__pyx_kp_u__372, __pyx_k__372, sizeof(__pyx_k__372), 0, 1, 0, 0},
    {&__pyx_kp_u__374, __pyx_k__374, sizeof(__pyx_k__374), 0, 1, 0, 0},
    {&__pyx_n_u__375, __pyx_k__375, sizeof(__pyx_k__375), 0, 1, 0, 1},
    {&__pyx_kp_u__377, __pyx_k__377, sizeof(__pyx_k__377), 0, 1, 0, 0},
    {&__pyx_n_u__378, __pyx_k__378, sizeof(__pyx_k__378), 0, 1, 0, 1},
    {&__pyx_n_u__38, __pyx_k__38, sizeof(__pyx_k__38), 0, 1, 0, 1},
    {&__pyx_kp_u__380, __pyx_k__380, sizeof(__pyx_k__380), 0, 1, 0, 0},
    {&__pyx_kp_u__381, __pyx_k__381, sizeof(__pyx_k__381), 0, 1, 0, 0},
    {&__pyx_kp_u__383, __pyx_k__383, sizeof(__pyx_k__383), 0, 1, 0, 0},
    {&__pyx_kp_u__384, __pyx_k__384, sizeof(__pyx_k__384), 0, 1, 0, 0},
    {&__pyx_n_u__386, __pyx_k__386, sizeof(__pyx_k__386), 0, 1, 0, 1},
    {&__pyx_n_u__387, __pyx_k__387, sizeof(__pyx_k__387), 0, 1, 0, 1},
    {&__pyx_n_u__390, __pyx_k__390, sizeof(__pyx_k__390), 0, 1, 0, 1},
    {&__pyx_n_u__392, __pyx_k__392, sizeof(__pyx_k__392), 0, 1, 0, 1},
    {&__pyx_n_u__394, __pyx_k__394, sizeof(__pyx_k__394), 0, 1, 0, 1},
    {&__pyx_n_u__396, __pyx_k__396, sizeof(__pyx_k__396), 0, 1, 0, 1},
    {&__pyx_n_u__398, __pyx_k__398, sizeof(__pyx_k__398), 0, 1, 0, 1},
    {&__pyx_n_u__4, __pyx_k__4, sizeof(__pyx_k__4), 0, 1, 0, 1},
    {&__pyx_n_u__40, __pyx_k__40, sizeof(__pyx_k__40), 0, 1, 0, 1},
    {&__pyx_n_u__400, __pyx_k__400, sizeof(__pyx_k__400), 0, 1, 0, 1},
    {&__pyx_n_u__402, __pyx_k__402, sizeof(__pyx_k__402), 0, 1, 0, 1},
    {&__pyx_n_u__404, __pyx_k__404, sizeof(__pyx_k__404), 0, 1, 0, 1},
    {&__pyx_n_u__406, __pyx_k__406, sizeof(__pyx_k__406), 0, 1, 0, 1},
    {&__pyx_n_u__408, __pyx_k__408, sizeof(__pyx_k__408), 0, 1, 0, 1},
    {&__pyx_n_u__411, __pyx_k__411, sizeof(__pyx_k__411), 0, 1, 0, 1},
    {&__pyx_n_u__413, __pyx_k__413, sizeof(__pyx_k__413), 0, 1, 0, 1},
    {&__pyx_n_u__415, __pyx_k__415, sizeof(__pyx_k__415), 0, 1, 0, 1},
    {&__pyx_n_u__417, __pyx_k__417, sizeof(__pyx_k__417), 0, 1, 0, 1},
    {&__pyx_n_u__419, __pyx_k__419, sizeof(__pyx_k__419), 0, 1, 0, 1},
    {&__pyx_n_u__42, __pyx_k__42, sizeof(__pyx_k__42), 0, 1, 0, 1},
    {&__pyx_n_u__421, __pyx_k__421, sizeof(__pyx_k__421), 0, 1, 0, 1},
    {&__pyx_n_u__423, __pyx_k__423, sizeof(__pyx_k__423), 0, 1, 0, 1},
    {&__pyx_n_u__425, __pyx_k__425, sizeof(__pyx_k__425), 0, 1, 0, 1},
    {&__pyx_n_u__427, __pyx_k__427, sizeof(__pyx_k__427), 0, 1, 0, 1},
    {&__pyx_n_u__429, __pyx_k__429, sizeof(__pyx_k__429), 0, 1, 0, 1},
    {&__pyx_n_u__431, __pyx_k__431, sizeof(__pyx_k__431), 0, 1, 0, 1},
    {&__pyx_n_u__433, __pyx_k__433, sizeof(__pyx_k__433), 0, 1, 0, 1},
    {&__pyx_n_u__435, __pyx_k__435, sizeof(__pyx_k__435), 0, 1, 0, 1},
    {&__pyx_n_u__437, __pyx_k__437, sizeof(__pyx_k__437), 0, 1, 0, 1},
    {&__pyx_n_u__439, __pyx_k__439, sizeof(__pyx_k__439), 0, 1, 0, 1},
    {&__pyx_n_u__44, __pyx_k__44, sizeof(__pyx_k__44), 0, 1, 0, 1},
    {&__pyx_n_u__441, __pyx_k__441, sizeof(__pyx_k__441), 0, 1, 0, 1},
    {&__pyx_n_u__443, __pyx_k__443, sizeof(__pyx_k__443), 0, 1, 0, 1},
    {&__pyx_n_u__445, __pyx_k__445, sizeof(__pyx_k__445), 0, 1, 0, 1},
    {&__pyx_n_u__447, __pyx_k__447, sizeof(__pyx_k__447), 0, 1, 0, 1},
    {&__pyx_n_u__449, __pyx_k__449, sizeof(__pyx_k__449), 0, 1, 0, 1},
    {&__pyx_n_u__451, __pyx_k__451, sizeof(__pyx_k__451), 0, 1, 0, 1},
    {&__pyx_n_u__453, __pyx_k__453, sizeof(__pyx_k__453), 0, 1, 0, 1},
    {&__pyx_n_u__454, __pyx_k__454, sizeof(__pyx_k__454), 0, 1, 0, 1},
    {&__pyx_n_u__457, __pyx_k__457, sizeof(__pyx_k__457), 0, 1, 0, 1},
    {&__pyx_n_u__459, __pyx_k__459, sizeof(__pyx_k__459), 0, 1, 0, 1},
    {&__pyx_n_u__46, __pyx_k__46, sizeof(__pyx_k__46), 0, 1, 0, 1},
    {&__pyx_n_u__461, __pyx_k__461, sizeof(__pyx_k__461), 0, 1, 0, 1},
    {&__pyx_n_u__463, __pyx_k__463, sizeof(__pyx_k__463), 0, 1, 0, 1},
    {&__pyx_n_u__465, __pyx_k__465, sizeof(__pyx_k__465), 0, 1, 0, 1},
    {&__pyx_n_u__467, __pyx_k__467, sizeof(__pyx_k__467), 0, 1, 0, 1},
    {&__pyx_n_u__468, __pyx_k__468, sizeof(__pyx_k__468), 0, 1, 0, 1},
    {&__pyx_n_u__470, __pyx_k__470, sizeof(__pyx_k__470), 0, 1, 0, 1},
    {&__pyx_n_u__471, __pyx_k__471, sizeof(__pyx_k__471), 0, 1, 0, 1},
    {&__pyx_n_u__473, __pyx_k__473, sizeof(__pyx_k__473), 0, 1, 0, 1},
    {&__pyx_n_u__474, __pyx_k__474, sizeof(__pyx_k__474), 0, 1, 0, 1},
    {&__pyx_n_u__476, __pyx_k__476, sizeof(__pyx_k__476), 0, 1, 0, 1},
    {&__pyx_n_u__477, __pyx_k__477, sizeof(__pyx_k__477), 0, 1, 0, 1},
    {&__pyx_n_u__479, __pyx_k__479, sizeof(__pyx_k__479), 0, 1, 0, 1},
    {&__pyx_n_u__48, __pyx_k__48, sizeof(__pyx_k__48), 0, 1, 0, 1},
    {&__pyx_n_u__480, __pyx_k__480, sizeof(__pyx_k__480), 0, 1, 0, 1},
    {&__pyx_kp_u__483, __pyx_k__483, sizeof(__pyx_k__483), 0, 1, 0, 0},
    {&__pyx_kp_u__484, __pyx_k__484, sizeof(__pyx_k__484), 0, 1, 0, 0},
    {&__pyx_kp_u__485, __pyx_k__485, sizeof(__pyx_k__485), 0, 1, 0, 0},
    {&__pyx_kp_u__486, __pyx_k__486, sizeof(__pyx_k__486), 0, 1, 0, 0},
    {&__pyx_kp_u__487, __pyx_k__487, sizeof(__pyx_k__487), 0, 1, 0, 0},
    {&__pyx_kp_u__488, __pyx_k__488, sizeof(__pyx_k__488), 0, 1, 0, 0},
    {&__pyx_kp_u__489, __pyx_k__489, sizeof(__pyx_k__489), 0, 1, 0, 0},
    {&__pyx_kp_u__490, __pyx_k__490, sizeof(__pyx_k__490), 0, 1, 0, 0},
    {&__pyx_kp_u__491, __pyx_k__491, sizeof(__pyx_k__491), 0, 1, 0, 0},
    {&__pyx_kp_u__493, __pyx_k__493, sizeof(__pyx_k__493), 0, 1, 0, 0},
    {&__pyx_kp_u__494, __pyx_k__494, sizeof(__pyx_k__494), 0, 1, 0, 0},
    {&__pyx_kp_u__495, __pyx_k__495, sizeof(__pyx_k__495), 0, 1, 0, 0},
    {&__pyx_kp_u__496, __pyx_k__496, sizeof(__pyx_k__496), 0, 1, 0, 0},
    {&__pyx_kp_u__497, __pyx_k__497, sizeof(__pyx_k__497), 0, 1, 0, 0},
    {&__pyx_kp_u__498, __pyx_k__498, sizeof(__pyx_k__498), 0, 1, 0, 0},
    {&__pyx_n_u__50, __pyx_k__50, sizeof(__pyx_k__50), 0, 1, 0, 1},
    {&__pyx_kp_u__500, __pyx_k__500, sizeof(__pyx_k__500), 0, 1, 0, 0},
    {&__pyx_kp_u__501, __pyx_k__501, sizeof(__pyx_k__501), 0, 1, 0, 0},
    {&__pyx_kp_u__502, __pyx_k__502, sizeof(__pyx_k__502), 0, 1, 0, 0},
    {&__pyx_kp_u__503, __pyx_k__503, sizeof(__pyx_k__503), 0, 1, 0, 0},
    {&__pyx_kp_u__504, __pyx_k__504, sizeof(__pyx_k__504), 0, 1, 0, 0},
    {&__pyx_kp_u__505, __pyx_k__505, sizeof(__pyx_k__505), 0, 1, 0, 0},
    {&__pyx_kp_u__507, __pyx_k__507, sizeof(__pyx_k__507), 0, 1, 0, 0},
    {&__pyx_kp_u__508, __pyx_k__508, sizeof(__pyx_k__508), 0, 1, 0, 0},
    {&__pyx_n_u__52, __pyx_k__52, sizeof(__pyx_k__52), 0, 1, 0, 1},
    {&__pyx_n_u__54, __pyx_k__54, sizeof(__pyx_k__54), 0, 1, 0, 1},
    {&__pyx_n_u__56, __pyx_k__56, sizeof(__pyx_k__56), 0, 1, 0, 1},
    {&__pyx_n_u__58, __pyx_k__58, sizeof(__pyx_k__58), 0, 1, 0, 1},
    {&__pyx_n_u__6, __pyx_k__6, sizeof(__pyx_k__6), 0, 1, 0, 1},
    {&__pyx_n_u__60, __pyx_k__60, sizeof(__pyx_k__60), 0, 1, 0, 1},
    {&__pyx_n_u__62, __pyx_k__62, sizeof(__pyx_k__62), 0, 1, 0, 1},
    {&__pyx_n_u__64, __pyx_k__64, sizeof(__pyx_k__64), 0, 1, 0, 1},
    {&__pyx_n_u__66, __pyx_k__66, sizeof(__pyx_k__66), 0, 1, 0, 1},
    {&__pyx_n_u__68, __pyx_k__68, sizeof(__pyx_k__68), 0, 1, 0, 1},
    {&__pyx_n_u__70, __pyx_k__70, sizeof(__pyx_k__70), 0, 1, 0, 1},
    {&__pyx_n_u__72, __pyx_k__72, sizeof(__pyx_k__72), 0, 1, 0, 1},
    {&__pyx_n_u__74, __pyx_k__74, sizeof(__pyx_k__74), 0, 1, 0, 1},
    {&__pyx_n_u__76, __pyx_k__76, sizeof(__pyx_k__76), 0, 1, 0, 1},
    {&__pyx_n_u__78, __pyx_k__78, sizeof(__pyx_k__78), 0, 1, 0, 1},
    {&__pyx_n_u__8, __pyx_k__8, sizeof(__pyx_k__8), 0, 1, 0, 1},
    {&__pyx_n_u__80, __pyx_k__80, sizeof(__pyx_k__80), 0, 1, 0, 1},
    {&__pyx_n_u__82, __pyx_k__82, sizeof(__pyx_k__82), 0, 1, 0, 1},
    {&__pyx_n_u__84, __pyx_k__84, sizeof(__pyx_k__84), 0, 1, 0, 1},
    {&__pyx_n_u__86, __pyx_k__86, sizeof(__pyx_k__86), 0, 1, 0, 1},
    {&__pyx_n_u__88, __pyx_k__88, sizeof(__pyx_k__88), 0, 1, 0, 1},
    {&__pyx_n_u__90, __pyx_k__90, sizeof(__pyx_k__90), 0, 1, 0, 1},
    {&__pyx_n_u__92, __pyx_k__92, sizeof(__pyx_k__92), 0, 1, 0, 1},
    {&__pyx_n_u__94, __pyx_k__94, sizeof(__pyx_k__94), 0, 1, 0, 1},
    {&__pyx_n_u__96, __pyx_k__96, sizeof(__pyx_k__96), 0, 1, 0, 1},
    {&__pyx_n_u__98, __pyx_k__98, sizeof(__pyx_k__98), 0, 1, 0, 1},
    {&__pyx_n_u_a, __pyx_k_a, sizeof(__pyx_k_a), 0, 1, 0, 1},
    {&__pyx_n_s_after, __pyx_k_after, sizeof(__pyx_k_after), 0, 0, 1, 1},
    {&__pyx_n_s_asyncio_coroutines, __pyx_k_asyncio_coroutines, sizeof(__pyx_k_asyncio_coroutines), 0, 0, 1, 1},
    {&__pyx_n_u_b, __pyx_k_b, sizeof(__pyx_k_b), 0, 1, 0, 1},
    {&__pyx_n_s_before, __pyx_k_before, sizeof(__pyx_k_before), 0, 0, 1, 1},
    {&__pyx_n_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
    {&__pyx_n_u_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 1, 0, 1},
    {&__pyx_n_s_chain, __pyx_k_chain, sizeof(__pyx_k_chain), 0, 0, 1, 1},
    {&__pyx_n_s_char_codes, __pyx_k_char_codes, sizeof(__pyx_k_char_codes), 0, 0, 1, 1},
    {&__pyx_n_s_chr, __pyx_k_chr, sizeof(__pyx_k_chr), 0, 0, 1, 1},
    {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
    {&__pyx_n_u_d, __pyx_k_d, sizeof(__pyx_k_d), 0, 1, 0, 1},
    {&__pyx_n_u_e, __pyx_k_e, sizeof(__pyx_k_e), 0, 1, 0, 1},
    {&__pyx_n_u_f, __pyx_k_f, sizeof(__pyx_k_f), 0, 1, 0, 1},
    {&__pyx_n_u_g, __pyx_k_g, sizeof(__pyx_k_g), 0, 1, 0, 1},
    {&__pyx_n_u_h, __pyx_k_h, sizeof(__pyx_k_h), 0, 1, 0, 1},
    {&__pyx_n_u_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 1, 0, 1},
    {&__pyx_n_u_ignore, __pyx_k_ignore, sizeof(__pyx_k_ignore), 0, 1, 0, 1},
    {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
    {&__pyx_n_s_initializing, __pyx_k_initializing, sizeof(__pyx_k_initializing), 0, 0, 1, 1},
    {&__pyx_n_s_is_coroutine, __pyx_k_is_coroutine, sizeof(__pyx_k_is_coroutine), 0, 0, 1, 1},
    {&__pyx_n_s_itertools, __pyx_k_itertools, sizeof(__pyx_k_itertools), 0, 0, 1, 1},
    {&__pyx_n_u_j, __pyx_k_j, sizeof(__pyx_k_j), 0, 1, 0, 1},
    {&__pyx_n_u_k, __pyx_k_k, sizeof(__pyx_k_k), 0, 1, 0, 1},
    {&__pyx_n_u_l, __pyx_k_l, sizeof(__pyx_k_l), 0, 1, 0, 1},
    {&__pyx_n_u_m, __pyx_k_m, sizeof(__pyx_k_m), 0, 1, 0, 1},
    {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
    {&__pyx_n_s_map, __pyx_k_map, sizeof(__pyx_k_map), 0, 0, 1, 1},
    {&__pyx_n_s_max_repeat_substr_length, __pyx_k_max_repeat_substr_length, sizeof(__pyx_k_max_repeat_substr_length), 0, 0, 1, 1},
    {&__pyx_n_u_n, __pyx_k_n, sizeof(__pyx_k_n), 0, 1, 0, 1},
    {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
    {&__pyx_n_s_neologdn, __pyx_k_neologdn, sizeof(__pyx_k_neologdn), 0, 0, 1, 1},
    {&__pyx_kp_s_neologdn_pyx, __pyx_k_neologdn_pyx, sizeof(__pyx_k_neologdn_pyx), 0, 0, 1, 0},
    {&__pyx_n_s_normalize, __pyx_k_normalize, sizeof(__pyx_k_normalize), 0, 0, 1, 1},
    {&__pyx_n_u_normalize, __pyx_k_normalize, sizeof(__pyx_k_normalize), 0, 1, 0, 1},
    {&__pyx_n_u_normalize_zenkaku, __pyx_k_normalize_zenkaku, sizeof(__pyx_k_normalize_zenkaku), 0, 1, 0, 1},
    {&__pyx_n_u_o, __pyx_k_o, sizeof(__pyx_k_o), 0, 1, 0, 1},
    {&__pyx_n_u_p, __pyx_k_p, sizeof(__pyx_k_p), 0, 1, 0, 1},
    {&__pyx_n_u_q, __pyx_k_q, sizeof(__pyx_k_q), 0, 1, 0, 1},
    {&__pyx_n_u_r, __pyx_k_r, sizeof(__pyx_k_r), 0, 1, 0, 1},
    {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
    {&__pyx_n_u_remove, __pyx_k_remove, sizeof(__pyx_k_remove), 0, 1, 0, 1},
    {&__pyx_n_s_remove_space, __pyx_k_remove_space, sizeof(__pyx_k_remove_space), 0, 0, 1, 1},
    {&__pyx_n_s_repeat, __pyx_k_repeat, sizeof(__pyx_k_repeat), 0, 0, 1, 1},
    {&__pyx_n_s_repeat_threshould, __pyx_k_repeat_threshould, sizeof(__pyx_k_repeat_threshould), 0, 0, 1, 1},
    {&__pyx_n_u_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 1, 0, 1},
    {&__pyx_n_s_shorten_repeat, __pyx_k_shorten_repeat, sizeof(__pyx_k_shorten_repeat), 0, 0, 1, 1},
    {&__pyx_n_s_spec, __pyx_k_spec, sizeof(__pyx_k_spec), 0, 0, 1, 1},
    {&__pyx_n_s_sys, __pyx_k_sys, sizeof(__pyx_k_sys), 0, 0, 1, 1},
    {&__pyx_n_u_t, __pyx_k_t, sizeof(__pyx_k_t), 0, 1, 0, 1},
    {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
    {&__pyx_n_s_text, __pyx_k_text, sizeof(__pyx_k_text), 0, 0, 1, 1},
    {&__pyx_n_s_tilde, __pyx_k_tilde, sizeof(__pyx_k_tilde), 0, 0, 1, 1},
    {&__pyx_n_u_u, __pyx_k_u, sizeof(__pyx_k_u), 0, 1, 0, 1},
    {&__pyx_n_u_v, __pyx_k_v, sizeof(__pyx_k_v), 0, 1, 0, 1},
    {&__pyx_n_s_version, __pyx_k_version, sizeof(__pyx_k_version), 0, 0, 1, 1},
    {&__pyx_n_s_version_info, __pyx_k_version_info, sizeof(__pyx_k_version_info), 0, 0, 1, 1},
    {&__pyx_n_u_w, __pyx_k_w, sizeof(__pyx_k_w), 0, 1, 0, 1},
    {&__pyx_n_u_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 1, 0, 1},
    {&__pyx_n_u_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 1, 0, 1},
    {&__pyx_n_u_z, __pyx_k_z, sizeof(__pyx_k_z), 0, 1, 0, 1},
    {0, 0, 0, 0, 0, 0, 0}
  };
  return __Pyx_InitStrings(__pyx_string_tab);
}
/* #### Code section: cached_builtins ### */
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 94, __pyx_L1_error)
  __pyx_builtin_map = __Pyx_GetBuiltinName(__pyx_n_s_map); if (!__pyx_builtin_map) __PYX_ERR(0, 100, __pyx_L1_error)
  __pyx_builtin_chr = __Pyx_GetBuiltinName(__pyx_n_s_chr); if (!__pyx_builtin_chr) __PYX_ERR(0, 100, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: cached_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "neologdn.pyx":11
 * from libcpp.unordered_set cimport unordered_set
 * 
 * VERSION = (0, 5, 3)             # <<<<<<<<<<<<<<
 * __version__ = '0.5.3'
 * 
 */
  __pyx_tuple__3 = PyTuple_Pack(3, __pyx_int_0, __pyx_int_5, __pyx_int_3); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "neologdn.pyx":23
 * 
 * ASCII = (
 *     ('', 'a'), ('', 'b'), ('', 'c'), ('', 'd'), ('', 'e'),             # <<<<<<<<<<<<<<
 *     ('', 'f'), ('', 'g'), ('', 'h'), ('', 'i'), ('', 'j'),
 *     ('', 'k'), ('', 'l'), ('', 'm'), ('', 'n'), ('', 'o'),
 */
  __pyx_tuple__5 = PyTuple_Pack(2, __pyx_n_u__4, __pyx_n_u_a); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);
  __pyx_tuple__7 = PyTuple_Pack(2, __pyx_n_u__6, __pyx_n_u_b); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);
  __pyx_tuple__9 = PyTuple_Pack(2, __pyx_n_u__8, __pyx_n_u_c); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);
  __pyx_tuple__11 = PyTuple_Pack(2, __pyx_n_u__10, __pyx_n_u_d); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);
  __pyx_tuple__13 = PyTuple_Pack(2, __pyx_n_u__12, __pyx_n_u_e); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "neologdn.pyx":24
 * ASCII = (
 *     ('', 'a'), ('', 'b'), ('', 'c'), ('', 'd'), ('', 'e'),
 *     ('', 'f'), ('', 'g'), ('', 'h'), ('', 'i'), ('', 'j'),             # <<<<<<<<<<<<<<
 *     ('', 'k'), ('', 'l'), ('', 'm'), ('', 'n'), ('', 'o'),
 *     ('', 'p'), ('', 'q'), ('', 'r'), ('', 's'), ('', 't'),
 */
  __pyx_tuple__15 = PyTuple_Pack(2, __pyx_n_u__14, __pyx_n_u_f); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);
  __pyx_tuple__17 = PyTuple_Pack(2, __pyx_n_u__16, __pyx_n_u_g); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);
  __pyx_tuple__19 = PyTuple_Pack(2, __pyx_n_u__18, __pyx_n_u_h); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);
  __pyx_tuple__21 = PyTuple_Pack(2, __pyx_n_u__20, __pyx_n_u_i); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);
  __pyx_tuple__23 = PyTuple_Pack(2, __pyx_n_u__22, __pyx_n_u_j); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "neologdn.pyx":25
 *     ('', 'a'), ('', 'b'), ('', 'c'), ('', 'd'), ('', 'e'),
 *     ('', 'f'), ('', 'g'), ('', 'h'), ('', 'i'), ('', 'j'),
 *     ('', 'k'), ('', 'l'), ('', 'm'), ('', 'n'), ('', 'o'),             # <<<<<<<<<<<<<<
 *     ('', 'p'), ('', 'q'), ('', 'r'), ('', 's'), ('', 't'),
 *     ('', 'u'), ('', 'v'), ('', 'w'), ('', 'x'), ('', 'y'),
 */
  __pyx_tuple__25 = PyTuple_Pack(2, __pyx_n_u__24, __pyx_n_u_k); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);
  __pyx_tuple__27 = PyTuple_Pack(2, __pyx_n_u__26, __pyx_n_u_l); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);
  __pyx_tuple__29 = PyTuple_Pack(2, __pyx_n_u__28, __pyx_n_u_m); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);
  __pyx_tuple__31 = PyTuple_Pack(2, __pyx_n_u__30, __pyx_n_u_n); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);
  __pyx_tuple__33 = PyTuple_Pack(2, __pyx_n_u__32, __pyx_n_u_o); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "neologdn.pyx":26
 *     ('', 'f'), ('', 'g'), ('', 'h'), ('', 'i'), ('', 'j'),
 *     ('', 'k'), ('', 'l'), ('', 'm'), ('', 'n'), ('', 'o'),
 *     ('', 'p'), ('', 'q'), ('', 'r'), ('', 's'), ('', 't'),             # <<<<<<<<<<<<<<
 *     ('', 'u'), ('', 'v'), ('', 'w'), ('', 'x'), ('', 'y'),
 *     ('', 'z'),
 */
  __pyx_tuple__35 = PyTuple_Pack(2, __pyx_n_u__34, __pyx_n_u_p); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);
  __pyx_tuple__37 = PyTuple_Pack(2, __pyx_n_u__36, __pyx_n_u_q); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);
  __pyx_tuple__39 = PyTuple_Pack(2, __pyx_n_u__38, __pyx_n_u_r); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);
  __pyx_tuple__41 = PyTuple_Pack(2, __pyx_n_u__40, __pyx_n_u_s); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);
  __pyx_tuple__43 = PyTuple_Pack(2, __pyx_n_u__42, __pyx_n_u_t); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);

  /* "neologdn.pyx":27
 *     ('', 'k'), ('', 'l'), ('', 'm'), ('', 'n'), ('', 'o'),
 *     ('', 'p'), ('', 'q'), ('', 'r'), ('', 's'), ('', 't'),
 *     ('', 'u'), ('', 'v'), ('', 'w'), ('', 'x'), ('', 'y'),             # <<<<<<<<<<<<<<
 *     ('', 'z'),
 *     ('', 'A'), ('', 'B'), ('', 'C'), ('', 'D'), ('', 'E'),
 */
  __pyx_tuple__45 = PyTuple_Pack(2, __pyx_n_u__44, __pyx_n_u_u); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);
  __pyx_tuple__47 = PyTuple_Pack(2, __pyx_n_u__46, __pyx_n_u_v); if (unlikely(!__pyx_tuple__47)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);
  __pyx_tuple__49 = PyTuple_Pack(2, __pyx_n_u__48, __pyx_n_u_w); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);
  __pyx_tuple__51 = PyTuple_Pack(2, __pyx_n_u__50, __pyx_n_u_x); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);
  __pyx_tuple__53 = PyTuple_Pack(2, __pyx_n_u__52, __pyx_n_u_y); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);

  /* "neologdn.pyx":28
 *     ('', 'p'), ('', 'q'), ('', 'r'), ('', 's'), ('', 't'),
 *     ('', 'u'), ('', 'v'), ('', 'w'), ('', 'x'), ('', 'y'),
 *     ('', 'z'),             # <<<<<<<<<<<<<<
 *     ('', 'A'), ('', 'B'), ('', 'C'), ('', 'D'), ('', 'E'),
 *     ('', 'F'), ('', 'G'), ('', 'H'), ('', 'I'), ('', 'J'),
 */
  __pyx_tuple__55 = PyTuple_Pack(2, __pyx_n_u__54, __pyx_n_u_z); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);

  /* "neologdn.pyx":29
 *     ('', 'u'), ('', 'v'), ('', 'w'), ('', 'x'), ('', 'y'),
 *     ('', 'z'),
 *     ('', 'A'), ('', 'B'), ('', 'C'), ('', 'D'), ('', 'E'),             # <<<<<<<<<<<<<<
 *     ('', 'F'), ('', 'G'), ('', 'H'), ('', 'I'), ('', 'J'),
 *     ('', 'K'), ('', 'L'), ('', 'M'), ('', 'N'), ('', 'O'),
 */
  __pyx_tuple__57 = PyTuple_Pack(2, __pyx_n_u__56, __pyx_n_u_A); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);
  __pyx_tuple__59 = PyTuple_Pack(2, __pyx_n_u__58, __pyx_n_u_B); if (unlikely(!__pyx_tuple__59)) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);
  __pyx_tuple__61 = PyTuple_Pack(2, __pyx_n_u__60, __pyx_n_u_C); if (unlikely(!__pyx_tuple__61)) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);
  __pyx_tuple__63 = PyTuple_Pack(2, __pyx_n_u__62, __pyx_n_u_D); if (unlikely(!__pyx_tuple__63)) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);
  __pyx_tuple__65 = PyTuple_Pack(2, __pyx_n_u__64, __pyx_n_u_E); if (unlikely(!__pyx_tuple__65)) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);

  /* "neologdn.pyx":30
 *     ('', 'z'),
 *     ('', 'A'), ('', 'B'), ('', 'C'), ('', 'D'), ('', 'E'),
 *     ('', 'F'), ('', 'G'), ('', 'H'), ('', 'I'), ('', 'J'),             # <<<<<<<<<<<<<<
 *     ('', 'K'), ('', 'L'), ('', 'M'), ('', 'N'), ('', 'O'),
 *     ('', 'P'), ('', 'Q'), ('', 'R'), ('', 'S'), ('', 'T'),
 */
  __pyx_tuple__67 = PyTuple_Pack(2, __pyx_n_u__66, __pyx_n_u_F); if (unlikely(!__pyx_tuple__67)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__67);
  __Pyx_GIVEREF(__pyx_tuple__67);
  __pyx_tuple__69 = PyTuple_Pack(2, __pyx_n_u__68, __pyx_n_u_G); if (unlikely(!__pyx_tuple__69)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__69);
  __Pyx_GIVEREF(__pyx_tuple__69);
  __pyx_tuple__71 = PyTuple_Pack(2, __pyx_n_u__70, __pyx_n_u_H); if (unlikely(!__pyx_tuple__71)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__71);
  __Pyx_GIVEREF(__pyx_tuple__71);
  __pyx_tuple__73 = PyTuple_Pack(2, __pyx_n_u__72, __pyx_n_u_I); if (unlikely(!__pyx_tuple__73)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__73);
  __Pyx_GIVEREF(__pyx_tuple__73);
  __pyx_tuple__75 = PyTuple_Pack(2, __pyx_n_u__74, __pyx_n_u_J); if (unlikely(!__pyx_tuple__75)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__75);
  __Pyx_GIVEREF(__pyx_tuple__75);

  /* "neologdn.pyx":31
 *     ('', 'A'), ('', 'B'), ('', 'C'), ('', 'D'), ('', 'E'),
 *     ('', 'F'), ('', 'G'), ('', 'H'), ('', 'I'), ('', 'J'),
 *     ('', 'K'), ('', 'L'), ('', 'M'), ('', 'N'), ('', 'O'),             # <<<<<<<<<<<<<<
 *     ('', 'P'), ('', 'Q'), ('', 'R'), ('', 'S'), ('', 'T'),
 *     ('', 'U'), ('', 'V'), ('', 'W'), ('', 'X'), ('', 'Y'),
 */
  __pyx_tuple__77 = PyTuple_Pack(2, __pyx_n_u__76, __pyx_n_u_K); if (unlikely(!__pyx_tuple__77)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__77);
  __Pyx_GIVEREF(__pyx_tuple__77);
  __pyx_tuple__79 = PyTuple_Pack(2, __pyx_n_u__78, __pyx_n_u_L); if (unlikely(!__pyx_tuple__79)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__79);
  __Pyx_GIVEREF(__pyx_tuple__79);
  __pyx_tuple__81 = PyTuple_Pack(2, __pyx_n_u__80, __pyx_n_u_M); if (unlikely(!__pyx_tuple__81)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__81);
  __Pyx_GIVEREF(__pyx_tuple__81);
  __pyx_tuple__83 = PyTuple_Pack(2, __pyx_n_u__82, __pyx_n_u_N); if (unlikely(!__pyx_tuple__83)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__83);
  __Pyx_GIVEREF(__pyx_tuple__83);
  __pyx_tuple__85 = PyTuple_Pack(2, __pyx_n_u__84, __pyx_n_u_O); if (unlikely(!__pyx_tuple__85)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__85);
  __Pyx_GIVEREF(__pyx_tuple__85);

  /* "neologdn.pyx":32
 *     ('', 'F'), ('', 'G'), ('', 'H'), ('', 'I'), ('', 'J'),
 *     ('', 'K'), ('', 'L'), ('', 'M'), ('', 'N'), ('', 'O'),
 *     ('', 'P'), ('', 'Q'), ('', 'R'), ('', 'S'), ('', 'T'),             # <<<<<<<<<<<<<<
 *     ('', 'U'), ('', 'V'), ('', 'W'), ('', 'X'), ('', 'Y'),
 *     ('', 'Z'),
 */
  __pyx_tuple__87 = PyTuple_Pack(2, __pyx_n_u__86, __pyx_n_u_P); if (unlikely(!__pyx_tuple__87)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__87);
  __Pyx_GIVEREF(__pyx_tuple__87);
  __pyx_tuple__89 = PyTuple_Pack(2, __pyx_n_u__88, __pyx_n_u_Q); if (unlikely(!__pyx_tuple__89)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__89);
  __Pyx_GIVEREF(__pyx_tuple__89);
  __pyx_tuple__91 = PyTuple_Pack(2, __pyx_n_u__90, __pyx_n_u_R); if (unlikely(!__pyx_tuple__91)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__91);
  __Pyx_GIVEREF(__pyx_tuple__91);
  __pyx_tuple__93 = PyTuple_Pack(2, __pyx_n_u__92, __pyx_n_u_S); if (unlikely(!__pyx_tuple__93)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__93);
  __Pyx_GIVEREF(__pyx_tuple__93);
  __pyx_tuple__95 = PyTuple_Pack(2, __pyx_n_u__94, __pyx_n_u_T); if (unlikely(!__pyx_tuple__95)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__95);
  __Pyx_GIVEREF(__pyx_tuple__95);

  /* "neologdn.pyx":33
 *     ('', 'K'), ('', 'L'), ('', 'M'), ('', 'N'), ('', 'O'),
 *     ('', 'P'), ('', 'Q'), ('', 'R'), ('', 'S'), ('', 'T'),
 *     ('', 'U'), ('', 'V'), ('', 'W'), ('', 'X'), ('', 'Y'),             # <<<<<<<<<<<<<<
 *     ('', 'Z'),
 *     ('', '!'), ('', '"'), ('', '#'), ('', '$'), ('', '%'),
 */
  __pyx_tuple__97 = PyTuple_Pack(2, __pyx_n_u__96, __pyx_n_u_U); if (unlikely(!__pyx_tuple__97)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__97);
  __Pyx_GIVEREF(__pyx_tuple__97);
  __pyx_tuple__99 = PyTuple_Pack(2, __pyx_n_u__98, __pyx_n_u_V); if (unlikely(!__pyx_tuple__99)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__99);
  __Pyx_GIVEREF(__pyx_tuple__99);
  __pyx_tuple__101 = PyTuple_Pack(2, __pyx_n_u__100, __pyx_n_u_W); if (unlikely(!__pyx_tuple__101)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__101);
  __Pyx_GIVEREF(__pyx_tuple__101);
  __pyx_tuple__103 = PyTuple_Pack(2, __pyx_n_u__102, __pyx_n_u_X); if (unlikely(!__pyx_tuple__103)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__103);
  __Pyx_GIVEREF(__pyx_tuple__103);
  __pyx_tuple__105 = PyTuple_Pack(2, __pyx_n_u__104, __pyx_n_u_Y); if (unlikely(!__pyx_tuple__105)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__105);
  __Pyx_GIVEREF(__pyx_tuple__105);

  /* "neologdn.pyx":34
 *     ('', 'P'), ('', 'Q'), ('', 'R'), ('', 'S'), ('', 'T'),
 *     ('', 'U'), ('', 'V'), ('', 'W'), ('', 'X'), ('', 'Y'),
 *     ('', 'Z'),             # <<<<<<<<<<<<<<
 *     ('', '!'), ('', '"'), ('', '#'), ('', '$'), ('', '%'),
 *     ('', '&'), ('', '\''), ('', '('), ('', ')'), ('', '*'),
 */
  __pyx_tuple__107 = PyTuple_Pack(2, __pyx_n_u__106, __pyx_n_u_Z); if (unlikely(!__pyx_tuple__107)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__107);
  __Pyx_GIVEREF(__pyx_tuple__107);

  /* "neologdn.pyx":35
 *     ('', 'U'), ('', 'V'), ('', 'W'), ('', 'X'), ('', 'Y'),
 *     ('', 'Z'),
 *     ('', '!'), ('', '"'), ('', '#'), ('', '$'), ('', '%'),             # <<<<<<<<<<<<<<
 *     ('', '&'), ('', '\''), ('', '('), ('', ')'), ('', '*'),
 *     ('', '+'), ('', ','), ('', '-'), ('', '.'), ('', '/'),
 */
  __pyx_tuple__110 = PyTuple_Pack(2, __pyx_kp_u__108, __pyx_kp_u__109); if (unlikely(!__pyx_tuple__110)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__110);
  __Pyx_GIVEREF(__pyx_tuple__110);
  __pyx_tuple__113 = PyTuple_Pack(2, __pyx_kp_u__111, __pyx_kp_u__112); if (unlikely(!__pyx_tuple__113)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__113);
  __Pyx_GIVEREF(__pyx_tuple__113);
  __pyx_tuple__116 = PyTuple_Pack(2, __pyx_kp_u__114, __pyx_kp_u__115); if (unlikely(!__pyx_tuple__116)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__116);
  __Pyx_GIVEREF(__pyx_tuple__116);
  __pyx_tuple__119 = PyTuple_Pack(2, __pyx_kp_u__117, __pyx_kp_u__118); if (unlikely(!__pyx_tuple__119)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__119);
  __Pyx_GIVEREF(__pyx_tuple__119);
  __pyx_tuple__122 = PyTuple_Pack(2, __pyx_kp_u__120, __pyx_kp_u__121); if (unlikely(!__pyx_tuple__122)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__122);
  __Pyx_GIVEREF(__pyx_tuple__122);

  /* "neologdn.pyx":36
 *     ('', 'Z'),
 *     ('', '!'), ('', '"'), ('', '#'), ('', '$'), ('', '%'),
 *     ('', '&'), ('', '\''), ('', '('), ('', ')'), ('', '*'),             # <<<<<<<<<<<<<<
 *     ('', '+'), ('', ','), ('', '-'), ('', '.'), ('', '/'),
 *     ('', ':'), ('', ';'), ('', '<'), ('', '='), ('', '>'),
 */
  __pyx_tuple__125 = PyTuple_Pack(2, __pyx_kp_u__123, __pyx_kp_u__124); if (unlikely(!__pyx_tuple__125)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__125);
  __Pyx_GIVEREF(__pyx_tuple__125);
  __pyx_tuple__128 = PyTuple_Pack(2, __pyx_kp_u__126, __pyx_kp_u__127); if (unlikely(!__pyx_tuple__128)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__128);
  __Pyx_GIVEREF(__pyx_tuple__128);
  __pyx_tuple__131 = PyTuple_Pack(2, __pyx_kp_u__129, __pyx_kp_u__130); if (unlikely(!__pyx_tuple__131)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__131);
  __Pyx_GIVEREF(__pyx_tuple__131);
  __pyx_tuple__134 = PyTuple_Pack(2, __pyx_kp_u__132, __pyx_kp_u__133); if (unlikely(!__pyx_tuple__134)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__134);
  __Pyx_GIVEREF(__pyx_tuple__134);
  __pyx_tuple__136 = PyTuple_Pack(2, __pyx_kp_u__135, __pyx_kp_u_); if (unlikely(!__pyx_tuple__136)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__136);
  __Pyx_GIVEREF(__pyx_tuple__136);

  /* "neologdn.pyx":37
 *     ('', '!'), ('', '"'), ('', '#'), ('', '$'), ('', '%'),
 *     ('', '&'), ('', '\''), ('', '('), ('', ')'), ('', '*'),
 *     ('', '+'), ('', ','), ('', '-'), ('', '.'), ('', '/'),             # <<<<<<<<<<<<<<
 *     ('', ':'), ('', ';'), ('', '<'), ('', '='), ('', '>'),
 *     ('', '?'), ('', '@'), ('', '['), ('', '\\'), ('', ']'),
 */
  __pyx_tuple__139 = PyTuple_Pack(2, __pyx_kp_u__137, __pyx_kp_u__138); if (unlikely(!__pyx_tuple__139)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__139);
  __Pyx_GIVEREF(__pyx_tuple__139);
  __pyx_tuple__142 = PyTuple_Pack(2, __pyx_kp_u__140, __pyx_kp_u__141); if (unlikely(!__pyx_tuple__142)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__142);
  __Pyx_GIVEREF(__pyx_tuple__142);
  __pyx_tuple__145 = PyTuple_Pack(2, __pyx_kp_u__143, __pyx_kp_u__144); if (unlikely(!__pyx_tuple__145)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__145);
  __Pyx_GIVEREF(__pyx_tuple__145);
  __pyx_tuple__147 = PyTuple_Pack(2, __pyx_kp_u__146, __pyx_kp_u__2); if (unlikely(!__pyx_tuple__147)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__147);
  __Pyx_GIVEREF(__pyx_tuple__147);
  __pyx_tuple__150 = PyTuple_Pack(2, __pyx_kp_u__148, __pyx_kp_u__149); if (unlikely(!__pyx_tuple__150)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__150);
  __Pyx_GIVEREF(__pyx_tuple__150);

  /* "neologdn.pyx":38
 *     ('', '&'), ('', '\''), ('', '('), ('', ')'), ('', '*'),
 *     ('', '+'), ('', ','), ('', '-'), ('', '.'), ('', '/'),
 *     ('', ':'), ('', ';'), ('', '<'), ('', '='), ('', '>'),             # <<<<<<<<<<<<<<
 *     ('', '?'), ('', '@'), ('', '['), ('', '\\'), ('', ']'),
 *     ('', '^'), ('', '_'), ('', '`'), ('', '{'), ('', '|'),
 */
  __pyx_tuple__153 = PyTuple_Pack(2, __pyx_kp_u__151, __pyx_kp_u__152); if (unlikely(!__pyx_tuple__153)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__153);
  __Pyx_GIVEREF(__pyx_tuple__153);
  __pyx_tuple__156 = PyTuple_Pack(2, __pyx_kp_u__154, __pyx_kp_u__155); if (unlikely(!__pyx_tuple__156)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__156);
  __Pyx_GIVEREF(__pyx_tuple__156);
  __pyx_tuple__159 = PyTuple_Pack(2, __pyx_kp_u__157, __pyx_kp_u__158); if (unlikely(!__pyx_tuple__159)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__159);
  __Pyx_GIVEREF(__pyx_tuple__159);
  __pyx_tuple__162 = PyTuple_Pack(2, __pyx_kp_u__160, __pyx_kp_u__161); if (unlikely(!__pyx_tuple__162)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__162);
  __Pyx_GIVEREF(__pyx_tuple__162);
  __pyx_tuple__165 = PyTuple_Pack(2, __pyx_kp_u__163, __pyx_kp_u__164); if (unlikely(!__pyx_tuple__165)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__165);
  __Pyx_GIVEREF(__pyx_tuple__165);

  /* "neologdn.pyx":39
 *     ('', '+'), ('', ','), ('', '-'), ('', '.'), ('', '/'),
 *     ('', ':'), ('', ';'), ('', '<'), ('', '='), ('', '>'),
 *     ('', '?'), ('', '@'), ('', '['), ('', '\\'), ('', ']'),             # <<<<<<<<<<<<<<
 *     ('', '^'), ('', '_'), ('', '`'), ('', '{'), ('', '|'),
 *     ('', '}')
 */
  __pyx_tuple__168 = PyTuple_Pack(2, __pyx_kp_u__166, __pyx_kp_u__167); if (unlikely(!__pyx_tuple__168)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__168);
  __Pyx_GIVEREF(__pyx_tuple__168);
  __pyx_tuple__171 = PyTuple_Pack(2, __pyx_kp_u__169, __pyx_kp_u__170); if (unlikely(!__pyx_tuple__171)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__171);
  __Pyx_GIVEREF(__pyx_tuple__171);
  __pyx_tuple__174 = PyTuple_Pack(2, __pyx_kp_u__172, __pyx_kp_u__173); if (unlikely(!__pyx_tuple__174)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__174);
  __Pyx_GIVEREF(__pyx_tuple__174);
  __pyx_tuple__177 = PyTuple_Pack(2, __pyx_kp_u__175, __pyx_kp_u__176); if (unlikely(!__pyx_tuple__177)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__177);
  __Pyx_GIVEREF(__pyx_tuple__177);
  __pyx_tuple__180 = PyTuple_Pack(2, __pyx_kp_u__178, __pyx_kp_u__179); if (unlikely(!__pyx_tuple__180)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__180);
  __Pyx_GIVEREF(__pyx_tuple__180);

  /* "neologdn.pyx":40
 *     ('', ':'), ('', ';'), ('', '<'), ('', '='), ('', '>'),
 *     ('', '?'), ('', '@'), ('', '['), ('', '\\'), ('', ']'),
 *     ('', '^'), ('', '_'), ('', '`'), ('', '{'), ('', '|'),             # <<<<<<<<<<<<<<
 *     ('', '}')
 * )
 */
  __pyx_tuple__183 = PyTuple_Pack(2, __pyx_kp_u__181, __pyx_kp_u__182); if (unlikely(!__pyx_tuple__183)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__183);
  __Pyx_GIVEREF(__pyx_tuple__183);
  __pyx_tuple__186 = PyTuple_Pack(2, __pyx_kp_u__184, __pyx_n_u__185); if (unlikely(!__pyx_tuple__186)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__186);
  __Pyx_GIVEREF(__pyx_tuple__186);
  __pyx_tuple__189 = PyTuple_Pack(2, __pyx_kp_u__187, __pyx_kp_u__188); if (unlikely(!__pyx_tuple__189)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__189);
  __Pyx_GIVEREF(__pyx_tuple__189);
  __pyx_tuple__192 = PyTuple_Pack(2, __pyx_kp_u__190, __pyx_kp_u__191); if (unlikely(!__pyx_tuple__192)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__192);
  __Pyx_GIVEREF(__pyx_tuple__192);
  __pyx_tuple__195 = PyTuple_Pack(2, __pyx_kp_u__193, __pyx_kp_u__194); if (unlikely(!__pyx_tuple__195)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__195);
  __Pyx_GIVEREF(__pyx_tuple__195);

  /* "neologdn.pyx":41
 *     ('', '?'), ('', '@'), ('', '['), ('', '\\'), ('', ']'),
 *     ('', '^'), ('', '_'), ('', '`'), ('', '{'), ('', '|'),
 *     ('', '}')             # <<<<<<<<<<<<<<
 * )
 * KANA = (
 */
  __pyx_tuple__198 = PyTuple_Pack(2, __pyx_kp_u__196, __pyx_kp_u__197); if (unlikely(!__pyx_tuple__198)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__198);
  __Pyx_GIVEREF(__pyx_tuple__198);

  /* "neologdn.pyx":23
 * 
 * ASCII = (
 *     ('', 'a'), ('', 'b'), ('', 'c'), ('', 'd'), ('', 'e'),             # <<<<<<<<<<<<<<
 *     ('', 'f'), ('', 'g'), ('', 'h'), ('', 'i'), ('', 'j'),
 *     ('', 'k'), ('', 'l'), ('', 'm'), ('', 'n'), ('', 'o'),
 */
  __pyx_tuple__199 = PyTuple_Pack(83, __pyx_tuple__5, __pyx_tuple__7, __pyx_tuple__9, __pyx_tuple__11, __pyx_tuple__13, __pyx_tuple__15, __pyx_tuple__17, __pyx_tuple__19, __pyx_tuple__21, __pyx_tuple__23, __pyx_tuple__25, __pyx_tuple__27, __pyx_tuple__29, __pyx_tuple__31, __pyx_tuple__33, __pyx_tuple__35, __pyx_tuple__37, __pyx_tuple__39, __pyx_tuple__41, __pyx_tuple__43, __pyx_tuple__45, __pyx_tuple__47, __pyx_tuple__49, __pyx_tuple__51, __pyx_tuple__53, __pyx_tuple__55, __pyx_tuple__57, __pyx_tuple__59, __pyx_tuple__61, __pyx_tuple__63, __pyx_tuple__65, __pyx_tuple__67, __pyx_tuple__69, __pyx_tuple__71, __pyx_tuple__73, __pyx_tuple__75, __pyx_tuple__77, __pyx_tuple__79, __pyx_tuple__81, __pyx_tuple__83, __pyx_tuple__85, __pyx_tuple__87, __pyx_tuple__89, __pyx_tuple__91, __pyx_tuple__93, __pyx_tuple__95, __pyx_tuple__97, __pyx_tuple__99, __pyx_tuple__101, __pyx_tuple__103, __pyx_tuple__105, __pyx_tuple__107, __pyx_tuple__110, __pyx_tuple__113, __pyx_tuple__116, __pyx_tuple__119, __pyx_tuple__122, __pyx_tuple__125, __pyx_tuple__128, __pyx_tuple__131, __pyx_tuple__134, __pyx_tuple__136, __pyx_tuple__139, __pyx_tuple__142, __pyx_tuple__145, __pyx_tuple__147, __pyx_tuple__150, __pyx_tuple__153, __pyx_tuple__156, __pyx_tuple__159, __pyx_tuple__162, __pyx_tuple__165, __pyx_tuple__168, __pyx_tuple__171, __pyx_tuple__174, __pyx_tuple__177, __pyx_tuple__180, __pyx_tuple__183, __pyx_tuple__186, __pyx_tuple__189, __pyx_tuple__192, __pyx_tuple__195, __pyx_tuple__198); if (unlikely(!__pyx_tuple__199)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__199);
  __Pyx_GIVEREF(__pyx_tuple__199);

  /* "neologdn.pyx":44
 * )
 * KANA = (
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),             # <<<<<<<<<<<<<<
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 */
  __pyx_tuple__202 = PyTuple_Pack(2, __pyx_n_u__200, __pyx_n_u__201); if (unlikely(!__pyx_tuple__202)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__202);
  __Pyx_GIVEREF(__pyx_tuple__202);
  __pyx_tuple__205 = PyTuple_Pack(2, __pyx_n_u__203, __pyx_n_u__204); if (unlikely(!__pyx_tuple__205)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__205);
  __Pyx_GIVEREF(__pyx_tuple__205);
  __pyx_tuple__208 = PyTuple_Pack(2, __pyx_n_u__206, __pyx_n_u__207); if (unlikely(!__pyx_tuple__208)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__208);
  __Pyx_GIVEREF(__pyx_tuple__208);
  __pyx_tuple__211 = PyTuple_Pack(2, __pyx_n_u__209, __pyx_n_u__210); if (unlikely(!__pyx_tuple__211)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__211);
  __Pyx_GIVEREF(__pyx_tuple__211);
  __pyx_tuple__214 = PyTuple_Pack(2, __pyx_n_u__212, __pyx_n_u__213); if (unlikely(!__pyx_tuple__214)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__214);
  __Pyx_GIVEREF(__pyx_tuple__214);

  /* "neologdn.pyx":45
 * KANA = (
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),             # <<<<<<<<<<<<<<
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 */
  __pyx_tuple__217 = PyTuple_Pack(2, __pyx_n_u__215, __pyx_n_u__216); if (unlikely(!__pyx_tuple__217)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__217);
  __Pyx_GIVEREF(__pyx_tuple__217);
  __pyx_tuple__220 = PyTuple_Pack(2, __pyx_n_u__218, __pyx_n_u__219); if (unlikely(!__pyx_tuple__220)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__220);
  __Pyx_GIVEREF(__pyx_tuple__220);
  __pyx_tuple__223 = PyTuple_Pack(2, __pyx_n_u__221, __pyx_n_u__222); if (unlikely(!__pyx_tuple__223)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__223);
  __Pyx_GIVEREF(__pyx_tuple__223);
  __pyx_tuple__226 = PyTuple_Pack(2, __pyx_n_u__224, __pyx_n_u__225); if (unlikely(!__pyx_tuple__226)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__226);
  __Pyx_GIVEREF(__pyx_tuple__226);
  __pyx_tuple__229 = PyTuple_Pack(2, __pyx_n_u__227, __pyx_n_u__228); if (unlikely(!__pyx_tuple__229)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__229);
  __Pyx_GIVEREF(__pyx_tuple__229);

  /* "neologdn.pyx":46
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),             # <<<<<<<<<<<<<<
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 */
  __pyx_tuple__232 = PyTuple_Pack(2, __pyx_n_u__230, __pyx_n_u__231); if (unlikely(!__pyx_tuple__232)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__232);
  __Pyx_GIVEREF(__pyx_tuple__232);
  __pyx_tuple__235 = PyTuple_Pack(2, __pyx_n_u__233, __pyx_n_u__234); if (unlikely(!__pyx_tuple__235)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__235);
  __Pyx_GIVEREF(__pyx_tuple__235);
  __pyx_tuple__238 = PyTuple_Pack(2, __pyx_n_u__236, __pyx_n_u__237); if (unlikely(!__pyx_tuple__238)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__238);
  __Pyx_GIVEREF(__pyx_tuple__238);
  __pyx_tuple__241 = PyTuple_Pack(2, __pyx_n_u__239, __pyx_n_u__240); if (unlikely(!__pyx_tuple__241)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__241);
  __Pyx_GIVEREF(__pyx_tuple__241);
  __pyx_tuple__244 = PyTuple_Pack(2, __pyx_n_u__242, __pyx_n_u__243); if (unlikely(!__pyx_tuple__244)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__244);
  __Pyx_GIVEREF(__pyx_tuple__244);

  /* "neologdn.pyx":47
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),             # <<<<<<<<<<<<<<
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 */
  __pyx_tuple__247 = PyTuple_Pack(2, __pyx_n_u__245, __pyx_n_u__246); if (unlikely(!__pyx_tuple__247)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__247);
  __Pyx_GIVEREF(__pyx_tuple__247);
  __pyx_tuple__250 = PyTuple_Pack(2, __pyx_n_u__248, __pyx_n_u__249); if (unlikely(!__pyx_tuple__250)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__250);
  __Pyx_GIVEREF(__pyx_tuple__250);
  __pyx_tuple__253 = PyTuple_Pack(2, __pyx_n_u__251, __pyx_n_u__252); if (unlikely(!__pyx_tuple__253)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__253);
  __Pyx_GIVEREF(__pyx_tuple__253);
  __pyx_tuple__256 = PyTuple_Pack(2, __pyx_n_u__254, __pyx_n_u__255); if (unlikely(!__pyx_tuple__256)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__256);
  __Pyx_GIVEREF(__pyx_tuple__256);
  __pyx_tuple__259 = PyTuple_Pack(2, __pyx_n_u__257, __pyx_n_u__258); if (unlikely(!__pyx_tuple__259)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__259);
  __Pyx_GIVEREF(__pyx_tuple__259);

  /* "neologdn.pyx":48
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),             # <<<<<<<<<<<<<<
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 */
  __pyx_tuple__262 = PyTuple_Pack(2, __pyx_n_u__260, __pyx_n_u__261); if (unlikely(!__pyx_tuple__262)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__262);
  __Pyx_GIVEREF(__pyx_tuple__262);
  __pyx_tuple__265 = PyTuple_Pack(2, __pyx_n_u__263, __pyx_n_u__264); if (unlikely(!__pyx_tuple__265)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__265);
  __Pyx_GIVEREF(__pyx_tuple__265);
  __pyx_tuple__268 = PyTuple_Pack(2, __pyx_n_u__266, __pyx_n_u__267); if (unlikely(!__pyx_tuple__268)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__268);
  __Pyx_GIVEREF(__pyx_tuple__268);
  __pyx_tuple__271 = PyTuple_Pack(2, __pyx_n_u__269, __pyx_n_u__270); if (unlikely(!__pyx_tuple__271)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__271);
  __Pyx_GIVEREF(__pyx_tuple__271);
  __pyx_tuple__274 = PyTuple_Pack(2, __pyx_n_u__272, __pyx_n_u__273); if (unlikely(!__pyx_tuple__274)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__274);
  __Pyx_GIVEREF(__pyx_tuple__274);

  /* "neologdn.pyx":49
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),             # <<<<<<<<<<<<<<
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''),
 */
  __pyx_tuple__277 = PyTuple_Pack(2, __pyx_n_u__275, __pyx_n_u__276); if (unlikely(!__pyx_tuple__277)) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__277);
  __Pyx_GIVEREF(__pyx_tuple__277);
  __pyx_tuple__280 = PyTuple_Pack(2, __pyx_n_u__278, __pyx_n_u__279); if (unlikely(!__pyx_tuple__280)) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__280);
  __Pyx_GIVEREF(__pyx_tuple__280);
  __pyx_tuple__283 = PyTuple_Pack(2, __pyx_n_u__281, __pyx_n_u__282); if (unlikely(!__pyx_tuple__283)) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__283);
  __Pyx_GIVEREF(__pyx_tuple__283);
  __pyx_tuple__286 = PyTuple_Pack(2, __pyx_n_u__284, __pyx_n_u__285); if (unlikely(!__pyx_tuple__286)) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__286);
  __Pyx_GIVEREF(__pyx_tuple__286);
  __pyx_tuple__289 = PyTuple_Pack(2, __pyx_n_u__287, __pyx_n_u__288); if (unlikely(!__pyx_tuple__289)) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__289);
  __Pyx_GIVEREF(__pyx_tuple__289);

  /* "neologdn.pyx":50
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),             # <<<<<<<<<<<<<<
 *     ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 */
  __pyx_tuple__292 = PyTuple_Pack(2, __pyx_n_u__290, __pyx_n_u__291); if (unlikely(!__pyx_tuple__292)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__292);
  __Pyx_GIVEREF(__pyx_tuple__292);
  __pyx_tuple__295 = PyTuple_Pack(2, __pyx_n_u__293, __pyx_n_u__294); if (unlikely(!__pyx_tuple__295)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__295);
  __Pyx_GIVEREF(__pyx_tuple__295);
  __pyx_tuple__298 = PyTuple_Pack(2, __pyx_n_u__296, __pyx_n_u__297); if (unlikely(!__pyx_tuple__298)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__298);
  __Pyx_GIVEREF(__pyx_tuple__298);
  __pyx_tuple__301 = PyTuple_Pack(2, __pyx_n_u__299, __pyx_n_u__300); if (unlikely(!__pyx_tuple__301)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__301);
  __Pyx_GIVEREF(__pyx_tuple__301);
  __pyx_tuple__304 = PyTuple_Pack(2, __pyx_n_u__302, __pyx_n_u__303); if (unlikely(!__pyx_tuple__304)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__304);
  __Pyx_GIVEREF(__pyx_tuple__304);

  /* "neologdn.pyx":51
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''),             # <<<<<<<<<<<<<<
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''),
 */
  __pyx_tuple__307 = PyTuple_Pack(2, __pyx_n_u__305, __pyx_n_u__306); if (unlikely(!__pyx_tuple__307)) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__307);
  __Pyx_GIVEREF(__pyx_tuple__307);
  __pyx_tuple__310 = PyTuple_Pack(2, __pyx_n_u__308, __pyx_n_u__309); if (unlikely(!__pyx_tuple__310)) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__310);
  __Pyx_GIVEREF(__pyx_tuple__310);
  __pyx_tuple__313 = PyTuple_Pack(2, __pyx_n_u__311, __pyx_n_u__312); if (unlikely(!__pyx_tuple__313)) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__313);
  __Pyx_GIVEREF(__pyx_tuple__313);

  /* "neologdn.pyx":52
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),             # <<<<<<<<<<<<<<
 *     ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 */
  __pyx_tuple__316 = PyTuple_Pack(2, __pyx_n_u__314, __pyx_n_u__315); if (unlikely(!__pyx_tuple__316)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__316);
  __Pyx_GIVEREF(__pyx_tuple__316);
  __pyx_tuple__319 = PyTuple_Pack(2, __pyx_n_u__317, __pyx_n_u__318); if (unlikely(!__pyx_tuple__319)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__319);
  __Pyx_GIVEREF(__pyx_tuple__319);
  __pyx_tuple__322 = PyTuple_Pack(2, __pyx_n_u__320, __pyx_n_u__321); if (unlikely(!__pyx_tuple__322)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__322);
  __Pyx_GIVEREF(__pyx_tuple__322);
  __pyx_tuple__325 = PyTuple_Pack(2, __pyx_n_u__323, __pyx_n_u__324); if (unlikely(!__pyx_tuple__325)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__325);
  __Pyx_GIVEREF(__pyx_tuple__325);
  __pyx_tuple__328 = PyTuple_Pack(2, __pyx_n_u__326, __pyx_n_u__327); if (unlikely(!__pyx_tuple__328)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__328);
  __Pyx_GIVEREF(__pyx_tuple__328);

  /* "neologdn.pyx":53
 *     ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''),             # <<<<<<<<<<<<<<
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''),
 */
  __pyx_tuple__331 = PyTuple_Pack(2, __pyx_n_u__329, __pyx_n_u__330); if (unlikely(!__pyx_tuple__331)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__331);
  __Pyx_GIVEREF(__pyx_tuple__331);
  __pyx_tuple__334 = PyTuple_Pack(2, __pyx_n_u__332, __pyx_n_u__333); if (unlikely(!__pyx_tuple__334)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__334);
  __Pyx_GIVEREF(__pyx_tuple__334);
  __pyx_tuple__337 = PyTuple_Pack(2, __pyx_n_u__335, __pyx_n_u__336); if (unlikely(!__pyx_tuple__337)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__337);
  __Pyx_GIVEREF(__pyx_tuple__337);

  /* "neologdn.pyx":54
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),             # <<<<<<<<<<<<<<
 *     ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 */
  __pyx_tuple__340 = PyTuple_Pack(2, __pyx_n_u__338, __pyx_n_u__339); if (unlikely(!__pyx_tuple__340)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__340);
  __Pyx_GIVEREF(__pyx_tuple__340);
  __pyx_tuple__343 = PyTuple_Pack(2, __pyx_n_u__341, __pyx_n_u__342); if (unlikely(!__pyx_tuple__343)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__343);
  __Pyx_GIVEREF(__pyx_tuple__343);
  __pyx_tuple__346 = PyTuple_Pack(2, __pyx_n_u__344, __pyx_n_u__345); if (unlikely(!__pyx_tuple__346)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__346);
  __Pyx_GIVEREF(__pyx_tuple__346);
  __pyx_tuple__349 = PyTuple_Pack(2, __pyx_n_u__347, __pyx_n_u__348); if (unlikely(!__pyx_tuple__349)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__349);
  __Pyx_GIVEREF(__pyx_tuple__349);
  __pyx_tuple__352 = PyTuple_Pack(2, __pyx_n_u__350, __pyx_n_u__351); if (unlikely(!__pyx_tuple__352)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__352);
  __Pyx_GIVEREF(__pyx_tuple__352);

  /* "neologdn.pyx":55
 *     ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''),             # <<<<<<<<<<<<<<
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', '')
 */
  __pyx_tuple__355 = PyTuple_Pack(2, __pyx_n_u__353, __pyx_n_u__354); if (unlikely(!__pyx_tuple__355)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__355);
  __Pyx_GIVEREF(__pyx_tuple__355);
  __pyx_tuple__358 = PyTuple_Pack(2, __pyx_n_u__356, __pyx_n_u__357); if (unlikely(!__pyx_tuple__358)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__358);
  __Pyx_GIVEREF(__pyx_tuple__358);
  __pyx_tuple__361 = PyTuple_Pack(2, __pyx_n_u__359, __pyx_n_u__360); if (unlikely(!__pyx_tuple__361)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__361);
  __Pyx_GIVEREF(__pyx_tuple__361);
  __pyx_tuple__364 = PyTuple_Pack(2, __pyx_n_u__362, __pyx_n_u__363); if (unlikely(!__pyx_tuple__364)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__364);
  __Pyx_GIVEREF(__pyx_tuple__364);

  /* "neologdn.pyx":56
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),             # <<<<<<<<<<<<<<
 *     ('', ''), ('', ''), ('', '')
 * )
 */
  __pyx_tuple__367 = PyTuple_Pack(2, __pyx_kp_u__365, __pyx_kp_u__366); if (unlikely(!__pyx_tuple__367)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__367);
  __Pyx_GIVEREF(__pyx_tuple__367);
  __pyx_tuple__370 = PyTuple_Pack(2, __pyx_kp_u__368, __pyx_kp_u__369); if (unlikely(!__pyx_tuple__370)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__370);
  __Pyx_GIVEREF(__pyx_tuple__370);
  __pyx_tuple__373 = PyTuple_Pack(2, __pyx_kp_u__371, __pyx_kp_u__372); if (unlikely(!__pyx_tuple__373)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__373);
  __Pyx_GIVEREF(__pyx_tuple__373);
  __pyx_tuple__376 = PyTuple_Pack(2, __pyx_kp_u__374, __pyx_n_u__375); if (unlikely(!__pyx_tuple__376)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__376);
  __Pyx_GIVEREF(__pyx_tuple__376);
  __pyx_tuple__379 = PyTuple_Pack(2, __pyx_kp_u__377, __pyx_n_u__378); if (unlikely(!__pyx_tuple__379)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__379);
  __Pyx_GIVEREF(__pyx_tuple__379);

  /* "neologdn.pyx":57
 *     ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', '')             # <<<<<<<<<<<<<<
 * )
 * DIGIT = (
 */
  __pyx_tuple__382 = PyTuple_Pack(2, __pyx_kp_u__380, __pyx_kp_u__381); if (unlikely(!__pyx_tuple__382)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__382);
  __Pyx_GIVEREF(__pyx_tuple__382);
  __pyx_tuple__385 = PyTuple_Pack(2, __pyx_kp_u__383, __pyx_kp_u__384); if (unlikely(!__pyx_tuple__385)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__385);
  __Pyx_GIVEREF(__pyx_tuple__385);
  __pyx_tuple__388 = PyTuple_Pack(2, __pyx_n_u__386, __pyx_n_u__387); if (unlikely(!__pyx_tuple__388)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__388);
  __Pyx_GIVEREF(__pyx_tuple__388);

  /* "neologdn.pyx":44
 * )
 * KANA = (
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),             # <<<<<<<<<<<<<<
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 */
  __pyx_tuple__389 = PyTuple_Pack(63, __pyx_tuple__202, __pyx_tuple__205, __pyx_tuple__208, __pyx_tuple__211, __pyx_tuple__214, __pyx_tuple__217, __pyx_tuple__220, __pyx_tuple__223, __pyx_tuple__226, __pyx_tuple__229, __pyx_tuple__232, __pyx_tuple__235, __pyx_tuple__238, __pyx_tuple__241, __pyx_tuple__244, __pyx_tuple__247, __pyx_tuple__250, __pyx_tuple__253, __pyx_tuple__256, __pyx_tuple__259, __pyx_tuple__262, __pyx_tuple__265, __pyx_tuple__268, __pyx_tuple__271, __pyx_tuple__274, __pyx_tuple__277, __pyx_tuple__280, __pyx_tuple__283, __pyx_tuple__286, __pyx_tuple__289, __pyx_tuple__292, __pyx_tuple__295, __pyx_tuple__298, __pyx_tuple__301, __pyx_tuple__304, __pyx_tuple__307, __pyx_tuple__310, __pyx_tuple__313, __pyx_tuple__316, __pyx_tuple__319, __pyx_tuple__322, __pyx_tuple__325, __pyx_tuple__328, __pyx_tuple__331, __pyx_tuple__334, __pyx_tuple__337, __pyx_tuple__340, __pyx_tuple__343, __pyx_tuple__346, __pyx_tuple__349, __pyx_tuple__352, __pyx_tuple__355, __pyx_tuple__358, __pyx_tuple__361, __pyx_tuple__364, __pyx_tuple__367, __pyx_tuple__370, __pyx_tuple__373, __pyx_tuple__376, __pyx_tuple__379, __pyx_tuple__382, __pyx_tuple__385, __pyx_tuple__388); if (unlikely(!__pyx_tuple__389)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__389);
  __Pyx_GIVEREF(__pyx_tuple__389);

  /* "neologdn.pyx":60
 * )
 * DIGIT = (
 *     ('', '0'), ('', '1'), ('', '2'), ('', '3'), ('', '4'),             # <<<<<<<<<<<<<<
 *     ('', '5'), ('', '6'), ('', '7'), ('', '8'), ('', '9')
 * )
 */
  __pyx_tuple__391 = PyTuple_Pack(2, __pyx_n_u__390, __pyx_kp_u_0); if (unlikely(!__pyx_tuple__391)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__391);
  __Pyx_GIVEREF(__pyx_tuple__391);
  __pyx_tuple__393 = PyTuple_Pack(2, __pyx_n_u__392, __pyx_kp_u_1); if (unlikely(!__pyx_tuple__393)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__393);
  __Pyx_GIVEREF(__pyx_tuple__393);
  __pyx_tuple__395 = PyTuple_Pack(2, __pyx_n_u__394, __pyx_kp_u_2); if (unlikely(!__pyx_tuple__395)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__395);
  __Pyx_GIVEREF(__pyx_tuple__395);
  __pyx_tuple__397 = PyTuple_Pack(2, __pyx_n_u__396, __pyx_kp_u_3); if (unlikely(!__pyx_tuple__397)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__397);
  __Pyx_GIVEREF(__pyx_tuple__397);
  __pyx_tuple__399 = PyTuple_Pack(2, __pyx_n_u__398, __pyx_kp_u_4); if (unlikely(!__pyx_tuple__399)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__399);
  __Pyx_GIVEREF(__pyx_tuple__399);

  /* "neologdn.pyx":61
 * DIGIT = (
 *     ('', '0'), ('', '1'), ('', '2'), ('', '3'), ('', '4'),
 *     ('', '5'), ('', '6'), ('', '7'), ('', '8'), ('', '9')             # <<<<<<<<<<<<<<
 * )
 * KANA_TEN = (
 */
  __pyx_tuple__401 = PyTuple_Pack(2, __pyx_n_u__400, __pyx_kp_u_5); if (unlikely(!__pyx_tuple__401)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__401);
  __Pyx_GIVEREF(__pyx_tuple__401);
  __pyx_tuple__403 = PyTuple_Pack(2, __pyx_n_u__402, __pyx_kp_u_6); if (unlikely(!__pyx_tuple__403)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__403);
  __Pyx_GIVEREF(__pyx_tuple__403);
  __pyx_tuple__405 = PyTuple_Pack(2, __pyx_n_u__404, __pyx_kp_u_7); if (unlikely(!__pyx_tuple__405)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__405);
  __Pyx_GIVEREF(__pyx_tuple__405);
  __pyx_tuple__407 = PyTuple_Pack(2, __pyx_n_u__406, __pyx_kp_u_8); if (unlikely(!__pyx_tuple__407)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__407);
  __Pyx_GIVEREF(__pyx_tuple__407);
  __pyx_tuple__409 = PyTuple_Pack(2, __pyx_n_u__408, __pyx_kp_u_9); if (unlikely(!__pyx_tuple__409)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__409);
  __Pyx_GIVEREF(__pyx_tuple__409);

  /* "neologdn.pyx":60
 * )
 * DIGIT = (
 *     ('', '0'), ('', '1'), ('', '2'), ('', '3'), ('', '4'),             # <<<<<<<<<<<<<<
 *     ('', '5'), ('', '6'), ('', '7'), ('', '8'), ('', '9')
 * )
 */
  __pyx_tuple__410 = PyTuple_Pack(10, __pyx_tuple__391, __pyx_tuple__393, __pyx_tuple__395, __pyx_tuple__397, __pyx_tuple__399, __pyx_tuple__401, __pyx_tuple__403, __pyx_tuple__405, __pyx_tuple__407, __pyx_tuple__409); if (unlikely(!__pyx_tuple__410)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__410);
  __Pyx_GIVEREF(__pyx_tuple__410);

  /* "neologdn.pyx":64
 * )
 * KANA_TEN = (
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),             # <<<<<<<<<<<<<<
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 */
  __pyx_tuple__412 = PyTuple_Pack(2, __pyx_n_u__216, __pyx_n_u__411); if (unlikely(!__pyx_tuple__412)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__412);
  __Pyx_GIVEREF(__pyx_tuple__412);
  __pyx_tuple__414 = PyTuple_Pack(2, __pyx_n_u__219, __pyx_n_u__413); if (unlikely(!__pyx_tuple__414)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__414);
  __Pyx_GIVEREF(__pyx_tuple__414);
  __pyx_tuple__416 = PyTuple_Pack(2, __pyx_n_u__222, __pyx_n_u__415); if (unlikely(!__pyx_tuple__416)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__416);
  __Pyx_GIVEREF(__pyx_tuple__416);
  __pyx_tuple__418 = PyTuple_Pack(2, __pyx_n_u__225, __pyx_n_u__417); if (unlikely(!__pyx_tuple__418)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__418);
  __Pyx_GIVEREF(__pyx_tuple__418);
  __pyx_tuple__420 = PyTuple_Pack(2, __pyx_n_u__228, __pyx_n_u__419); if (unlikely(!__pyx_tuple__420)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__420);
  __Pyx_GIVEREF(__pyx_tuple__420);

  /* "neologdn.pyx":65
 * KANA_TEN = (
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),             # <<<<<<<<<<<<<<
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 */
  __pyx_tuple__422 = PyTuple_Pack(2, __pyx_n_u__231, __pyx_n_u__421); if (unlikely(!__pyx_tuple__422)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__422);
  __Pyx_GIVEREF(__pyx_tuple__422);
  __pyx_tuple__424 = PyTuple_Pack(2, __pyx_n_u__234, __pyx_n_u__423); if (unlikely(!__pyx_tuple__424)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__424);
  __Pyx_GIVEREF(__pyx_tuple__424);
  __pyx_tuple__426 = PyTuple_Pack(2, __pyx_n_u__237, __pyx_n_u__425); if (unlikely(!__pyx_tuple__426)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__426);
  __Pyx_GIVEREF(__pyx_tuple__426);
  __pyx_tuple__428 = PyTuple_Pack(2, __pyx_n_u__240, __pyx_n_u__427); if (unlikely(!__pyx_tuple__428)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__428);
  __Pyx_GIVEREF(__pyx_tuple__428);
  __pyx_tuple__430 = PyTuple_Pack(2, __pyx_n_u__243, __pyx_n_u__429); if (unlikely(!__pyx_tuple__430)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__430);
  __Pyx_GIVEREF(__pyx_tuple__430);

  /* "neologdn.pyx":66
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),             # <<<<<<<<<<<<<<
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', '')
 */
  __pyx_tuple__432 = PyTuple_Pack(2, __pyx_n_u__246, __pyx_n_u__431); if (unlikely(!__pyx_tuple__432)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__432);
  __Pyx_GIVEREF(__pyx_tuple__432);
  __pyx_tuple__434 = PyTuple_Pack(2, __pyx_n_u__249, __pyx_n_u__433); if (unlikely(!__pyx_tuple__434)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__434);
  __Pyx_GIVEREF(__pyx_tuple__434);
  __pyx_tuple__436 = PyTuple_Pack(2, __pyx_n_u__252, __pyx_n_u__435); if (unlikely(!__pyx_tuple__436)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__436);
  __Pyx_GIVEREF(__pyx_tuple__436);
  __pyx_tuple__438 = PyTuple_Pack(2, __pyx_n_u__255, __pyx_n_u__437); if (unlikely(!__pyx_tuple__438)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__438);
  __Pyx_GIVEREF(__pyx_tuple__438);
  __pyx_tuple__440 = PyTuple_Pack(2, __pyx_n_u__258, __pyx_n_u__439); if (unlikely(!__pyx_tuple__440)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__440);
  __Pyx_GIVEREF(__pyx_tuple__440);

  /* "neologdn.pyx":67
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),             # <<<<<<<<<<<<<<
 *     ('', ''), ('', '')
 * )
 */
  __pyx_tuple__442 = PyTuple_Pack(2, __pyx_n_u__276, __pyx_n_u__441); if (unlikely(!__pyx_tuple__442)) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__442);
  __Pyx_GIVEREF(__pyx_tuple__442);
  __pyx_tuple__444 = PyTuple_Pack(2, __pyx_n_u__279, __pyx_n_u__443); if (unlikely(!__pyx_tuple__444)) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__444);
  __Pyx_GIVEREF(__pyx_tuple__444);
  __pyx_tuple__446 = PyTuple_Pack(2, __pyx_n_u__282, __pyx_n_u__445); if (unlikely(!__pyx_tuple__446)) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__446);
  __Pyx_GIVEREF(__pyx_tuple__446);
  __pyx_tuple__448 = PyTuple_Pack(2, __pyx_n_u__285, __pyx_n_u__447); if (unlikely(!__pyx_tuple__448)) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__448);
  __Pyx_GIVEREF(__pyx_tuple__448);
  __pyx_tuple__450 = PyTuple_Pack(2, __pyx_n_u__288, __pyx_n_u__449); if (unlikely(!__pyx_tuple__450)) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__450);
  __Pyx_GIVEREF(__pyx_tuple__450);

  /* "neologdn.pyx":68
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', '')             # <<<<<<<<<<<<<<
 * )
 * KANA_MARU = (
 */
  __pyx_tuple__452 = PyTuple_Pack(2, __pyx_n_u__207, __pyx_n_u__451); if (unlikely(!__pyx_tuple__452)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__452);
  __Pyx_GIVEREF(__pyx_tuple__452);
  __pyx_tuple__455 = PyTuple_Pack(2, __pyx_n_u__453, __pyx_n_u__454); if (unlikely(!__pyx_tuple__455)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__455);
  __Pyx_GIVEREF(__pyx_tuple__455);

  /* "neologdn.pyx":64
 * )
 * KANA_TEN = (
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),             # <<<<<<<<<<<<<<
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 */
  __pyx_tuple__456 = PyTuple_Pack(22, __pyx_tuple__412, __pyx_tuple__414, __pyx_tuple__416, __pyx_tuple__418, __pyx_tuple__420, __pyx_tuple__422, __pyx_tuple__424, __pyx_tuple__426, __pyx_tuple__428, __pyx_tuple__430, __pyx_tuple__432, __pyx_tuple__434, __pyx_tuple__436, __pyx_tuple__438, __pyx_tuple__440, __pyx_tuple__442, __pyx_tuple__444, __pyx_tuple__446, __pyx_tuple__448, __pyx_tuple__450, __pyx_tuple__452, __pyx_tuple__455); if (unlikely(!__pyx_tuple__456)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__456);
  __Pyx_GIVEREF(__pyx_tuple__456);

  /* "neologdn.pyx":71
 * )
 * KANA_MARU = (
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),             # <<<<<<<<<<<<<<
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', '')
 * )
 */
  __pyx_tuple__458 = PyTuple_Pack(2, __pyx_n_u__276, __pyx_n_u__457); if (unlikely(!__pyx_tuple__458)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__458);
  __Pyx_GIVEREF(__pyx_tuple__458);
  __pyx_tuple__460 = PyTuple_Pack(2, __pyx_n_u__279, __pyx_n_u__459); if (unlikely(!__pyx_tuple__460)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__460);
  __Pyx_GIVEREF(__pyx_tuple__460);
  __pyx_tuple__462 = PyTuple_Pack(2, __pyx_n_u__282, __pyx_n_u__461); if (unlikely(!__pyx_tuple__462)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__462);
  __Pyx_GIVEREF(__pyx_tuple__462);
  __pyx_tuple__464 = PyTuple_Pack(2, __pyx_n_u__285, __pyx_n_u__463); if (unlikely(!__pyx_tuple__464)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__464);
  __Pyx_GIVEREF(__pyx_tuple__464);
  __pyx_tuple__466 = PyTuple_Pack(2, __pyx_n_u__288, __pyx_n_u__465); if (unlikely(!__pyx_tuple__466)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__466);
  __Pyx_GIVEREF(__pyx_tuple__466);

  /* "neologdn.pyx":72
 * KANA_MARU = (
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', '')             # <<<<<<<<<<<<<<
 * )
 * 
 */
  __pyx_tuple__469 = PyTuple_Pack(2, __pyx_n_u__467, __pyx_n_u__468); if (unlikely(!__pyx_tuple__469)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__469);
  __Pyx_GIVEREF(__pyx_tuple__469);
  __pyx_tuple__472 = PyTuple_Pack(2, __pyx_n_u__470, __pyx_n_u__471); if (unlikely(!__pyx_tuple__472)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__472);
  __Pyx_GIVEREF(__pyx_tuple__472);
  __pyx_tuple__475 = PyTuple_Pack(2, __pyx_n_u__473, __pyx_n_u__474); if (unlikely(!__pyx_tuple__475)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__475);
  __Pyx_GIVEREF(__pyx_tuple__475);
  __pyx_tuple__478 = PyTuple_Pack(2, __pyx_n_u__476, __pyx_n_u__477); if (unlikely(!__pyx_tuple__478)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__478);
  __Pyx_GIVEREF(__pyx_tuple__478);
  __pyx_tuple__481 = PyTuple_Pack(2, __pyx_n_u__479, __pyx_n_u__480); if (unlikely(!__pyx_tuple__481)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__481);
  __Pyx_GIVEREF(__pyx_tuple__481);

  /* "neologdn.pyx":71
 * )
 * KANA_MARU = (
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),             # <<<<<<<<<<<<<<
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', '')
 * )
 */
  __pyx_tuple__482 = PyTuple_Pack(10, __pyx_tuple__458, __pyx_tuple__460, __pyx_tuple__462, __pyx_tuple__464, __pyx_tuple__466, __pyx_tuple__469, __pyx_tuple__472, __pyx_tuple__475, __pyx_tuple__478, __pyx_tuple__481); if (unlikely(!__pyx_tuple__482)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__482);
  __Pyx_GIVEREF(__pyx_tuple__482);

  /* "neologdn.pyx":75
 * )
 * 
 * HIPHENS = ('', '', '', '', '', '', '', '', '', '')             # <<<<<<<<<<<<<<
 * CHOONPUS = ('', '', '', '', '', '', '', '')
 * TILDES = ('~', '', '', '', '', '')
 */
  __pyx_tuple__492 = PyTuple_Pack(10, __pyx_kp_u__483, __pyx_kp_u__484, __pyx_kp_u__485, __pyx_kp_u__486, __pyx_kp_u__487, __pyx_kp_u__488, __pyx_kp_u__489, __pyx_kp_u__490, __pyx_kp_u__491, __pyx_kp_u__143); if (unlikely(!__pyx_tuple__492)) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__492);
  __Pyx_GIVEREF(__pyx_tuple__492);

  /* "neologdn.pyx":76
 * 
 * HIPHENS = ('', '', '', '', '', '', '', '', '', '')
 * CHOONPUS = ('', '', '', '', '', '', '', '')             # <<<<<<<<<<<<<<
 * TILDES = ('~', '', '', '', '', '')
 * 
 */
  __pyx_tuple__499 = PyTuple_Pack(8, __pyx_kp_u__493, __pyx_kp_u__494, __pyx_n_u__386, __pyx_kp_u__495, __pyx_kp_u__496, __pyx_kp_u__497, __pyx_kp_u__498, __pyx_n_u__387); if (unlikely(!__pyx_tuple__499)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__499);
  __Pyx_GIVEREF(__pyx_tuple__499);

  /* "neologdn.pyx":77
 * HIPHENS = ('', '', '', '', '', '', '', '', '', '')
 * CHOONPUS = ('', '', '', '', '', '', '', '')
 * TILDES = ('~', '', '', '', '', '')             # <<<<<<<<<<<<<<
 * 
 * SPACE = (' ', '')
 */
  __pyx_tuple__506 = PyTuple_Pack(6, __pyx_kp_u__500, __pyx_kp_u__501, __pyx_kp_u__502, __pyx_kp_u__503, __pyx_kp_u__504, __pyx_kp_u__505); if (unlikely(!__pyx_tuple__506)) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__506);
  __Pyx_GIVEREF(__pyx_tuple__506);

  /* "neologdn.pyx":79
 * TILDES = ('~', '', '', '', '', '')
 * 
 * SPACE = (' ', '')             # <<<<<<<<<<<<<<
 * 
 * cdef unordered_map[Py_UCS4, Py_UCS4] conversion_map, kana_ten_map, kana_maru_map
 */
  __pyx_tuple__509 = PyTuple_Pack(2, __pyx_kp_u__507, __pyx_kp_u__508); if (unlikely(!__pyx_tuple__509)) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__509);
  __Pyx_GIVEREF(__pyx_tuple__509);

  /* "neologdn.pyx":94
 * 
 * char_codes = itertools.chain(
 *     range(19968, 40960),  # CJK UNIFIED IDEOGRAPHS             # <<<<<<<<<<<<<<
 *     range(12352, 12448),  # HIRAGANA
 *     range(12448, 12544),  # KATAKANA
 */
  __pyx_tuple__510 = PyTuple_Pack(2, __pyx_int_19968, __pyx_int_40960); if (unlikely(!__pyx_tuple__510)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__510);
  __Pyx_GIVEREF(__pyx_tuple__510);

  /* "neologdn.pyx":95
 * char_codes = itertools.chain(
 *     range(19968, 40960),  # CJK UNIFIED IDEOGRAPHS
 *     range(12352, 12448),  # HIRAGANA             # <<<<<<<<<<<<<<
 *     range(12448, 12544),  # KATAKANA
 *     range(12289, 12352),  # CJK SYMBOLS AND PUNCTUATION
 */
  __pyx_tuple__511 = PyTuple_Pack(2, __pyx_int_12352, __pyx_int_12448); if (unlikely(!__pyx_tuple__511)) __PYX_ERR(0, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__511);
  __Pyx_GIVEREF(__pyx_tuple__511);

  /* "neologdn.pyx":96
 *     range(19968, 40960),  # CJK UNIFIED IDEOGRAPHS
 *     range(12352, 12448),  # HIRAGANA
 *     range(12448, 12544),  # KATAKANA             # <<<<<<<<<<<<<<
 *     range(12289, 12352),  # CJK SYMBOLS AND PUNCTUATION
 *     range(65280, 65520)   # HALFWIDTH AND FULLWIDTH FORMS
 */
  __pyx_tuple__512 = PyTuple_Pack(2, __pyx_int_12448, __pyx_int_12544); if (unlikely(!__pyx_tuple__512)) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__512);
  __Pyx_GIVEREF(__pyx_tuple__512);

  /* "neologdn.pyx":97
 *     range(12352, 12448),  # HIRAGANA
 *     range(12448, 12544),  # KATAKANA
 *     range(12289, 12352),  # CJK SYMBOLS AND PUNCTUATION             # <<<<<<<<<<<<<<
 *     range(65280, 65520)   # HALFWIDTH AND FULLWIDTH FORMS
 * )
 */
  __pyx_tuple__513 = PyTuple_Pack(2, __pyx_int_12289, __pyx_int_12352); if (unlikely(!__pyx_tuple__513)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__513);
  __Pyx_GIVEREF(__pyx_tuple__513);

  /* "neologdn.pyx":98
 *     range(12448, 12544),  # KATAKANA
 *     range(12289, 12352),  # CJK SYMBOLS AND PUNCTUATION
 *     range(65280, 65520)   # HALFWIDTH AND FULLWIDTH FORMS             # <<<<<<<<<<<<<<
 * )
 * for c in map(chr, char_codes):
 */
  __pyx_tuple__514 = PyTuple_Pack(2, __pyx_int_65280, __pyx_int_65520); if (unlikely(!__pyx_tuple__514)) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__514);
  __Pyx_GIVEREF(__pyx_tuple__514);

  /* "neologdn.pyx":104
 * 
 * 
 * for c in map(chr, range(128)):             # <<<<<<<<<<<<<<
 *     basic_latin.insert(c)
 * 
 */
  __pyx_tuple__515 = PyTuple_Pack(1, __pyx_int_128); if (unlikely(!__pyx_tuple__515)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__515);
  __Pyx_GIVEREF(__pyx_tuple__515);

  /* "neologdn.pyx":110
 * 
 * 
 * cpdef unicode shorten_repeat(unicode text, int repeat_threshould, int max_repeat_substr_length=8):             # <<<<<<<<<<<<<<
 *     cdef int text_length, i, repeat_length, right_start, right_end, num_repeat_substrs
 *     cdef int upper_repeat_substr_length
 */
  __pyx_tuple__516 = PyTuple_Pack(3, __pyx_n_s_text, __pyx_n_s_repeat_threshould, __pyx_n_s_max_repeat_substr_length); if (unlikely(!__pyx_tuple__516)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__516);
  __Pyx_GIVEREF(__pyx_tuple__516);
  __pyx_codeobj__517 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__516, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_neologdn_pyx, __pyx_n_s_shorten_repeat, 110, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__517)) __PYX_ERR(0, 110, __pyx_L1_error)
  __pyx_tuple__518 = PyTuple_Pack(1, __pyx_int_8); if (unlikely(!__pyx_tuple__518)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__518);
  __Pyx_GIVEREF(__pyx_tuple__518);

  /* "neologdn.pyx":140
 * 
 * 
 * cpdef unicode normalize(unicode text, int repeat=0, bint remove_space=True,             # <<<<<<<<<<<<<<
 *                         int max_repeat_substr_length=8, unicode tilde='remove'):
 *     cdef Py_UCS4 *buf = <Py_UCS4 *>malloc(sizeof(Py_UCS4) * (len(text) + 1))
 */
  __pyx_tuple__519 = PyTuple_Pack(5, __pyx_n_s_text, __pyx_n_s_repeat, __pyx_n_s_remove_space, __pyx_n_s_max_repeat_substr_length, __pyx_n_s_tilde); if (unlikely(!__pyx_tuple__519)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__519);
  __Pyx_GIVEREF(__pyx_tuple__519);
  __pyx_codeobj__520 = (PyObject*)__Pyx_PyCode_New(5, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__519, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_neologdn_pyx, __pyx_n_s_normalize, 140, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__520)) __PYX_ERR(0, 140, __pyx_L1_error)
  __pyx_tuple__521 = PyTuple_Pack(4, __pyx_int_0, Py_True, __pyx_int_8, __pyx_n_u_remove); if (unlikely(!__pyx_tuple__521)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__521);
  __Pyx_GIVEREF(__pyx_tuple__521);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}
/* #### Code section: init_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitConstants(void) {
  if (__Pyx_CreateStringTabAndInitStrings() < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_5 = PyInt_FromLong(5); if (unlikely(!__pyx_int_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_8 = PyInt_FromLong(8); if (unlikely(!__pyx_int_8)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_128 = PyInt_FromLong(128); if (unlikely(!__pyx_int_128)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_12289 = PyInt_FromLong(12289L); if (unlikely(!__pyx_int_12289)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_12352 = PyInt_FromLong(12352L); if (unlikely(!__pyx_int_12352)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_12448 = PyInt_FromLong(12448L); if (unlikely(!__pyx_int_12448)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_12544 = PyInt_FromLong(12544L); if (unlikely(!__pyx_int_12544)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_19968 = PyInt_FromLong(19968L); if (unlikely(!__pyx_int_19968)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_40960 = PyInt_FromLong(40960L); if (unlikely(!__pyx_int_40960)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_65280 = PyInt_FromLong(65280L); if (unlikely(!__pyx_int_65280)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_65520 = PyInt_FromLong(65520L); if (unlikely(!__pyx_int_65520)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_globals ### */

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  return 0;
}
/* #### Code section: init_module ### */

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_neologdn(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_neologdn},
  {0, NULL}
};
#endif

#ifdef __cplusplus
namespace {
  struct PyModuleDef __pyx_moduledef =
  #else
  static struct PyModuleDef __pyx_moduledef =
  #endif
  {
      PyModuleDef_HEAD_INIT,
      "neologdn",
      0, /* m_doc */
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      0, /* m_size */
    #elif CYTHON_USE_MODULE_STATE
      sizeof(__pyx_mstate), /* m_size */
    #else
      -1, /* m_size */
    #endif
      __pyx_methods /* m_methods */,
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      __pyx_moduledef_slots, /* m_slots */
    #else
      NULL, /* m_reload */
    #endif
    #if CYTHON_USE_MODULE_STATE
      __pyx_m_traverse, /* m_traverse */
      __pyx_m_clear, /* m_clear */
      NULL /* m_free */
    #else
      NULL, /* m_traverse */
      NULL, /* m_clear */
      NULL /* m_free */
    #endif
  };
  #ifdef __cplusplus
} /* anonymous namespace */
#endif
#endif

#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initneologdn(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initneologdn(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_neologdn(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_neologdn(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *module, const char* from_name, const char* to_name, int allow_none)
#else
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none)
#endif
{
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
#if CYTHON_COMPILING_IN_LIMITED_API
            result = PyModule_AddObject(module, to_name, value);
#else
            result = PyDict_SetItemString(moddict, to_name, value);
#endif
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    CYTHON_UNUSED_VAR(def);
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    moddict = module;
#else
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
#endif
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_neologdn(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  int stringtab_initialized = 0;
  #if CYTHON_USE_MODULE_STATE
  int pystate_addmodule_run = 0;
  #endif
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  Py_UCS4 __pyx_t_10;
  Py_UCS4 __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'neologdn' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("neologdn", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #elif CYTHON_USE_MODULE_STATE
  __pyx_t_1 = PyModule_Create(&__pyx_moduledef); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  {
    int add_module_result = PyState_AddModule(__pyx_t_1, &__pyx_moduledef);
    __pyx_t_1 = 0; /* transfer ownership from __pyx_t_1 to "neologdn" pseudovariable */
    if (unlikely((add_module_result < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    pystate_addmodule_run = 1;
  }
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #endif
  CYTHON_UNUSED_VAR(__pyx_t_1);
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = __Pyx_PyImport_AddModuleRef(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_cython_runtime = __Pyx_PyImport_AddModuleRef((const char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_neologdn(void)", 0);
  if (__Pyx_check_binary_version(__PYX_LIMITED_VERSION_HEX, __Pyx_get_runtime_version(), CYTHON_COMPILING_IN_LIMITED_API) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  stringtab_initialized = 1;
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_neologdn) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "neologdn")) {
      if (unlikely((PyDict_SetItemString(modules, "neologdn", __pyx_m) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  (void)__Pyx_modinit_type_init_code();
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "neologdn.pyx":5
 * # -*- coding: utf-8 -*-
 * 
 * import itertools             # <<<<<<<<<<<<<<
 * from sys import version_info
 * from libc.stdlib cimport malloc, free
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_itertools, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_itertools, __pyx_t_2) < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "neologdn.pyx":6
 * 
 * import itertools
 * from sys import version_info             # <<<<<<<<<<<<<<
 * from libc.stdlib cimport malloc, free
 * from libcpp.unordered_map cimport unordered_map
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_version_info);
  __Pyx_GIVEREF(__pyx_n_s_version_info);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_version_info)) __PYX_ERR(0, 6, __pyx_L1_error);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_sys, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_version_info); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_version_info, __pyx_t_2) < 0) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "neologdn.pyx":11
 * from libcpp.unordered_set cimport unordered_set
 * 
 * VERSION = (0, 5, 3)             # <<<<<<<<<<<<<<
 * __version__ = '0.5.3'
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_VERSION, __pyx_tuple__3) < 0) __PYX_ERR(0, 11, __pyx_L1_error)

  /* "neologdn.pyx":12
 * 
 * VERSION = (0, 5, 3)
 * __version__ = '0.5.3'             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "Python.h":
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_version, __pyx_kp_u_0_5_3) < 0) __PYX_ERR(0, 12, __pyx_L1_error)

  /* "neologdn.pyx":23
 * 
 * ASCII = (
 *     ('', 'a'), ('', 'b'), ('', 'c'), ('', 'd'), ('', 'e'),             # <<<<<<<<<<<<<<
 *     ('', 'f'), ('', 'g'), ('', 'h'), ('', 'i'), ('', 'j'),
 *     ('', 'k'), ('', 'l'), ('', 'm'), ('', 'n'), ('', 'o'),
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ASCII, __pyx_tuple__199) < 0) __PYX_ERR(0, 22, __pyx_L1_error)

  /* "neologdn.pyx":44
 * )
 * KANA = (
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),             # <<<<<<<<<<<<<<
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_KANA, __pyx_tuple__389) < 0) __PYX_ERR(0, 43, __pyx_L1_error)

  /* "neologdn.pyx":60
 * )
 * DIGIT = (
 *     ('', '0'), ('', '1'), ('', '2'), ('', '3'), ('', '4'),             # <<<<<<<<<<<<<<
 *     ('', '5'), ('', '6'), ('', '7'), ('', '8'), ('', '9')
 * )
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DIGIT, __pyx_tuple__410) < 0) __PYX_ERR(0, 59, __pyx_L1_error)

  /* "neologdn.pyx":64
 * )
 * KANA_TEN = (
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),             # <<<<<<<<<<<<<<
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_KANA_TEN, __pyx_tuple__456) < 0) __PYX_ERR(0, 63, __pyx_L1_error)

  /* "neologdn.pyx":71
 * )
 * KANA_MARU = (
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', ''),             # <<<<<<<<<<<<<<
 *     ('', ''), ('', ''), ('', ''), ('', ''), ('', '')
 * )
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_KANA_MARU, __pyx_tuple__482) < 0) __PYX_ERR(0, 70, __pyx_L1_error)

  /* "neologdn.pyx":75
 * )
 * 
 * HIPHENS = ('', '', '', '', '', '', '', '', '', '')             # <<<<<<<<<<<<<<
 * CHOONPUS = ('', '', '', '', '', '', '', '')
 * TILDES = ('~', '', '', '', '', '')
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_HIPHENS, __pyx_tuple__492) < 0) __PYX_ERR(0, 75, __pyx_L1_error)

  /* "neologdn.pyx":76
 * 
 * HIPHENS = ('', '', '', '', '', '', '', '', '', '')
 * CHOONPUS = ('', '', '', '', '', '', '', '')             # <<<<<<<<<<<<<<
 * TILDES = ('~', '', '', '', '', '')
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CHOONPUS, __pyx_tuple__499) < 0) __PYX_ERR(0, 76, __pyx_L1_error)

  /* "neologdn.pyx":77
 * HIPHENS = ('', '', '', '', '', '', '', '', '', '')
 * CHOONPUS = ('', '', '', '', '', '', '', '')
 * TILDES = ('~', '', '', '', '', '')             # <<<<<<<<<<<<<<
 * 
 * SPACE = (' ', '')
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TILDES, __pyx_tuple__506) < 0) __PYX_ERR(0, 77, __pyx_L1_error)

  /* "neologdn.pyx":79
 * TILDES = ('~', '', '', '', '', '')
 * 
 * SPACE = (' ', '')             # <<<<<<<<<<<<<<
 * 
 * cdef unordered_map[Py_UCS4, Py_UCS4] conversion_map, kana_ten_map, kana_maru_map
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SPACE, __pyx_tuple__509) < 0) __PYX_ERR(0, 79, __pyx_L1_error)

  /* "neologdn.pyx":84
 * cdef unordered_set[Py_UCS4] blocks, basic_latin
 * 
 * for (before, after) in (ASCII + DIGIT + KANA):             # <<<<<<<<<<<<<<
 *     conversion_map[before] = after
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_ASCII); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_DIGIT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_KANA); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Add(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2);
    __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 84, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_2);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 84, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 84, __pyx_L1_error)
        #else
        __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 84, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 84, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 84, __pyx_L1_error)
        #else
        __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 84, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_6(__pyx_t_2);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 84, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
      PyObject* sequence = __pyx_t_3;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 84, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_7);
      #else
      __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 84, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 84, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      #endif
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_8 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 84, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_9 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_8);
      index = 0; __pyx_t_4 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_4)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      index = 1; __pyx_t_7 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_7)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 2) < 0) __PYX_ERR(0, 84, __pyx_L1_error)
      __pyx_t_9 = NULL;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L5_unpacking_done;
      __pyx_L4_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 84, __pyx_L1_error)
      __pyx_L5_unpacking_done:;
    }
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_before, __pyx_t_4) < 0) __PYX_ERR(0, 84, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_after, __pyx_t_7) < 0) __PYX_ERR(0, 84, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "neologdn.pyx":85
 * 
 * for (before, after) in (ASCII + DIGIT + KANA):
 *     conversion_map[before] = after             # <<<<<<<<<<<<<<
 * 
 * for (before, after) in KANA_TEN:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_after); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 85, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_10 = __Pyx_PyObject_AsPy_UCS4(__pyx_t_3); if (unlikely((__pyx_t_10 == (Py_UCS4)-1) && PyErr_Occurred())) __PYX_ERR(0, 85, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_before); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 85, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_11 = __Pyx_PyObject_AsPy_UCS4(__pyx_t_3); if (unlikely((__pyx_t_11 == (Py_UCS4)-1) && PyErr_Occurred())) __PYX_ERR(0, 85, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_8neologdn_conversion_map[__pyx_t_11]) = __pyx_t_10;

    /* "neologdn.pyx":84
 * cdef unordered_set[Py_UCS4] blocks, basic_latin
 * 
 * for (before, after) in (ASCII + DIGIT + KANA):             # <<<<<<<<<<<<<<
 *     conversion_map[before] = after
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "neologdn.pyx":87
 *     conversion_map[before] = after
 * 
 * for (before, after) in KANA_TEN:             # <<<<<<<<<<<<<<
 *     kana_ten_map[before] = after
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_KANA_TEN); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3);
    __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 87, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 87, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 87, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 87, __pyx_L1_error)
        #else
        __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 87, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 87, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 87, __pyx_L1_error)
        #else
        __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 87, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_6(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 87, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 87, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_7 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_7 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 87, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 87, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_8 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 87, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_9 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_8);
      index = 0; __pyx_t_7 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_7)) goto __pyx_L9_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      index = 1; __pyx_t_4 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_4)) goto __pyx_L9_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 2) < 0) __PYX_ERR(0, 87, __pyx_L1_error)
      __pyx_t_9 = NULL;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L10_unpacking_done;
      __pyx_L9_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 87, __pyx_L1_error)
      __pyx_L10_unpacking_done:;
    }
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_before, __pyx_t_7) < 0) __PYX_ERR(0, 87, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_after, __pyx_t_4) < 0) __PYX_ERR(0, 87, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "neologdn.pyx":88
 * 
 * for (before, after) in KANA_TEN:
 *     kana_ten_map[before] = after             # <<<<<<<<<<<<<<
 * 
 * for (before, after) in KANA_MARU:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_after); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_10 = __Pyx_PyObject_AsPy_UCS4(__pyx_t_2); if (unlikely((__pyx_t_10 == (Py_UCS4)-1) && PyErr_Occurred())) __PYX_ERR(0, 88, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_before); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_11 = __Pyx_PyObject_AsPy_UCS4(__pyx_t_2); if (unlikely((__pyx_t_11 == (Py_UCS4)-1) && PyErr_Occurred())) __PYX_ERR(0, 88, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    (__pyx_v_8neologdn_kana_ten_map[__pyx_t_11]) = __pyx_t_10;

    /* "neologdn.pyx":87
 *     conversion_map[before] = after
 * 
 * for (before, after) in KANA_TEN:             # <<<<<<<<<<<<<<
 *     kana_ten_map[before] = after
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "neologdn.pyx":90
 *     kana_ten_map[before] = after
 * 
 * for (before, after) in KANA_MARU:             # <<<<<<<<<<<<<<
 *     kana_maru_map[before] = after
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_KANA_MARU); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2);
    __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 90, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 90, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_2);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 90, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 90, __pyx_L1_error)
        #else
        __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 90, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 90, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 90, __pyx_L1_error)
        #else
        __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 90, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_6(__pyx_t_2);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 90, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
      PyObject* sequence = __pyx_t_3;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 90, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_7);
      #else
      __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 90, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 90, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      #endif
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_8 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 90, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_9 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_8);
      index = 0; __pyx_t_4 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_4)) goto __pyx_L14_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      index = 1; __pyx_t_7 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_7)) goto __pyx_L14_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 2) < 0) __PYX_ERR(0, 90, __pyx_L1_error)
      __pyx_t_9 = NULL;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L15_unpacking_done;
      __pyx_L14_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 90, __pyx_L1_error)
      __pyx_L15_unpacking_done:;
    }
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_before, __pyx_t_4) < 0) __PYX_ERR(0, 90, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_after, __pyx_t_7) < 0) __PYX_ERR(0, 90, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "neologdn.pyx":91
 * 
 * for (before, after) in KANA_MARU:
 *     kana_maru_map[before] = after             # <<<<<<<<<<<<<<
 * 
 * char_codes = itertools.chain(
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_after); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 91, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_10 = __Pyx_PyObject_AsPy_UCS4(__pyx_t_3); if (unlikely((__pyx_t_10 == (Py_UCS4)-1) && PyErr_Occurred())) __PYX_ERR(0, 91, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_before); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 91, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_11 = __Pyx_PyObject_AsPy_UCS4(__pyx_t_3); if (unlikely((__pyx_t_11 == (Py_UCS4)-1) && PyErr_Occurred())) __PYX_ERR(0, 91, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_8neologdn_kana_maru_map[__pyx_t_11]) = __pyx_t_10;

    /* "neologdn.pyx":90
 *     kana_ten_map[before] = after
 * 
 * for (before, after) in KANA_MARU:             # <<<<<<<<<<<<<<
 *     kana_maru_map[before] = after
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "neologdn.pyx":93
 *     kana_maru_map[before] = after
 * 
 * char_codes = itertools.chain(             # <<<<<<<<<<<<<<
 *     range(19968, 40960),  # CJK UNIFIED IDEOGRAPHS
 *     range(12352, 12448),  # HIRAGANA
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_itertools); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_chain); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "neologdn.pyx":94
 * 
 * char_codes = itertools.chain(
 *     range(19968, 40960),  # CJK UNIFIED IDEOGRAPHS             # <<<<<<<<<<<<<<
 *     range(12352, 12448),  # HIRAGANA
 *     range(12448, 12544),  # KATAKANA
 */
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_tuple__510, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "neologdn.pyx":95
 * char_codes = itertools.chain(
 *     range(19968, 40960),  # CJK UNIFIED IDEOGRAPHS
 *     range(12352, 12448),  # HIRAGANA             # <<<<<<<<<<<<<<
 *     range(12448, 12544),  # KATAKANA
 *     range(12289, 12352),  # CJK SYMBOLS AND PUNCTUATION
 */
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_tuple__511, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);

  /* "neologdn.pyx":96
 *     range(19968, 40960),  # CJK UNIFIED IDEOGRAPHS
 *     range(12352, 12448),  # HIRAGANA
 *     range(12448, 12544),  # KATAKANA             # <<<<<<<<<<<<<<
 *     range(12289, 12352),  # CJK SYMBOLS AND PUNCTUATION
 *     range(65280, 65520)   # HALFWIDTH AND FULLWIDTH FORMS
 */
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_tuple__512, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "neologdn.pyx":97
 *     range(12352, 12448),  # HIRAGANA
 *     range(12448, 12544),  # KATAKANA
 *     range(12289, 12352),  # CJK SYMBOLS AND PUNCTUATION             # <<<<<<<<<<<<<<
 *     range(65280, 65520)   # HALFWIDTH AND FULLWIDTH FORMS
 * )
 */
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_tuple__513, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);

  /* "neologdn.pyx":98
 *     range(12448, 12544),  # KATAKANA
 *     range(12289, 12352),  # CJK SYMBOLS AND PUNCTUATION
 *     range(65280, 65520)   # HALFWIDTH AND FULLWIDTH FORMS             # <<<<<<<<<<<<<<
 * )
 * for c in map(chr, char_codes):
 */
  __pyx_t_12 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_tuple__514, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);

  /* "neologdn.pyx":93
 *     kana_maru_map[before] = after
 * 
 * char_codes = itertools.chain(             # <<<<<<<<<<<<<<
 *     range(19968, 40960),  # CJK UNIFIED IDEOGRAPHS
 *     range(12352, 12448),  # HIRAGANA
 */
  __pyx_t_13 = PyTuple_New(5); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_2)) __PYX_ERR(0, 93, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_7);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_13, 1, __pyx_t_7)) __PYX_ERR(0, 93, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_13, 2, __pyx_t_4)) __PYX_ERR(0, 93, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_8);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_13, 3, __pyx_t_8)) __PYX_ERR(0, 93, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_12);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_13, 4, __pyx_t_12)) __PYX_ERR(0, 93, __pyx_L1_error);
  __pyx_t_2 = 0;
  __pyx_t_7 = 0;
  __pyx_t_4 = 0;
  __pyx_t_8 = 0;
  __pyx_t_12 = 0;
  __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_13, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_char_codes, __pyx_t_12) < 0) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

  /* "neologdn.pyx":100
 *     range(65280, 65520)   # HALFWIDTH AND FULLWIDTH FORMS
 * )
 * for c in map(chr, char_codes):             # <<<<<<<<<<<<<<
 *     blocks.insert(c)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_char_codes); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_13 = PyTuple_New(2); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_INCREF(__pyx_builtin_chr);
  __Pyx_GIVEREF(__pyx_builtin_chr);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_builtin_chr)) __PYX_ERR(0, 100, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_12);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_13, 1, __pyx_t_12)) __PYX_ERR(0, 100, __pyx_L1_error);
  __pyx_t_12 = 0;
  __pyx_t_12 = __Pyx_PyObject_Call(__pyx_builtin_map, __pyx_t_13, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  if (likely(PyList_CheckExact(__pyx_t_12)) || PyTuple_CheckExact(__pyx_t_12)) {
    __pyx_t_13 = __pyx_t_12; __Pyx_INCREF(__pyx_t_13);
    __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_13 = PyObject_GetIter(__pyx_t_12); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 100, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_6 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_13); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 100, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_13))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_13);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 100, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_12 = PyList_GET_ITEM(__pyx_t_13, __pyx_t_5); __Pyx_INCREF(__pyx_t_12); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 100, __pyx_L1_error)
        #else
        __pyx_t_12 = __Pyx_PySequence_ITEM(__pyx_t_13, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 100, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_13);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 100, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_12 = PyTuple_GET_ITEM(__pyx_t_13, __pyx_t_5); __Pyx_INCREF(__pyx_t_12); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 100, __pyx_L1_error)
        #else
        __pyx_t_12 = __Pyx_PySequence_ITEM(__pyx_t_13, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 100, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        #endif
      }
    } else {
      __pyx_t_12 = __pyx_t_6(__pyx_t_13);
      if (unlikely(!__pyx_t_12)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 100, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_12);
    }
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_c, __pyx_t_12) < 0) __PYX_ERR(0, 100, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

    /* "neologdn.pyx":101
 * )
 * for c in map(chr, char_codes):
 *     blocks.insert(c)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_c); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 101, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_10 = __Pyx_PyObject_AsPy_UCS4(__pyx_t_12); if (unlikely((__pyx_t_10 == (Py_UCS4)-1) && PyErr_Occurred())) __PYX_ERR(0, 101, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    try {
      __pyx_v_8neologdn_blocks.insert(__pyx_t_10);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 101, __pyx_L1_error)
    }

    /* "neologdn.pyx":100
 *     range(65280, 65520)   # HALFWIDTH AND FULLWIDTH FORMS
 * )
 * for c in map(chr, char_codes):             # <<<<<<<<<<<<<<
 *     blocks.insert(c)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

  /* "neologdn.pyx":104
 * 
 * 
 * for c in map(chr, range(128)):             # <<<<<<<<<<<<<<
 *     basic_latin.insert(c)
 * 
 */
  __pyx_t_13 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_tuple__515, NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_12 = PyTuple_New(2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_INCREF(__pyx_builtin_chr);
  __Pyx_GIVEREF(__pyx_builtin_chr);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_builtin_chr)) __PYX_ERR(0, 104, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_13);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_t_13)) __PYX_ERR(0, 104, __pyx_L1_error);
  __pyx_t_13 = 0;
  __pyx_t_13 = __Pyx_PyObject_Call(__pyx_builtin_map, __pyx_t_12, NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  if (likely(PyList_CheckExact(__pyx_t_13)) || PyTuple_CheckExact(__pyx_t_13)) {
    __pyx_t_12 = __pyx_t_13; __Pyx_INCREF(__pyx_t_12);
    __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_12 = PyObject_GetIter(__pyx_t_13); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 104, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_6 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_12); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 104, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_12))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_12);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 104, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_13 = PyList_GET_ITEM(__pyx_t_12, __pyx_t_5); __Pyx_INCREF(__pyx_t_13); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 104, __pyx_L1_error)
        #else
        __pyx_t_13 = __Pyx_PySequence_ITEM(__pyx_t_12, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 104, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_12);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 104, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_13 = PyTuple_GET_ITEM(__pyx_t_12, __pyx_t_5); __Pyx_INCREF(__pyx_t_13); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 104, __pyx_L1_error)
        #else
        __pyx_t_13 = __Pyx_PySequence_ITEM(__pyx_t_12, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 104, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        #endif
      }
    } else {
      __pyx_t_13 = __pyx_t_6(__pyx_t_12);
      if (unlikely(!__pyx_t_13)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 104, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_13);
    }
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_c, __pyx_t_13) < 0) __PYX_ERR(0, 104, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

    /* "neologdn.pyx":105
 * 
 * for c in map(chr, range(128)):
 *     basic_latin.insert(c)             # <<<<<<<<<<<<<<
 * 
 * del ASCII, KANA, DIGIT, KANA_TEN, KANA_MARU, char_codes, version_info
 */
    __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_c); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 105, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_10 = __Pyx_PyObject_AsPy_UCS4(__pyx_t_13); if (unlikely((__pyx_t_10 == (Py_UCS4)-1) && PyErr_Occurred())) __PYX_ERR(0, 105, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    try {
      __pyx_v_8neologdn_basic_latin.insert(__pyx_t_10);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 105, __pyx_L1_error)
    }

    /* "neologdn.pyx":104
 * 
 * 
 * for c in map(chr, range(128)):             # <<<<<<<<<<<<<<
 *     basic_latin.insert(c)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

  /* "neologdn.pyx":107
 *     basic_latin.insert(c)
 * 
 * del ASCII, KANA, DIGIT, KANA_TEN, KANA_MARU, char_codes, version_info             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (__Pyx_PyObject_DelAttrStr(__pyx_m, __pyx_n_s_ASCII) < 0) __PYX_ERR(0, 107, __pyx_L1_error)
  if (__Pyx_PyObject_DelAttrStr(__pyx_m, __pyx_n_s_KANA) < 0) __PYX_ERR(0, 107, __pyx_L1_error)
  if (__Pyx_PyObject_DelAttrStr(__pyx_m, __pyx_n_s_DIGIT) < 0) __PYX_ERR(0, 107, __pyx_L1_error)
  if (__Pyx_PyObject_DelAttrStr(__pyx_m, __pyx_n_s_KANA_TEN) < 0) __PYX_ERR(0, 107, __pyx_L1_error)
  if (__Pyx_PyObject_DelAttrStr(__pyx_m, __pyx_n_s_KANA_MARU) < 0) __PYX_ERR(0, 107, __pyx_L1_error)
  if (__Pyx_PyObject_DelAttrStr(__pyx_m, __pyx_n_s_char_codes) < 0) __PYX_ERR(0, 107, __pyx_L1_error)
  if (__Pyx_PyObject_DelAttrStr(__pyx_m, __pyx_n_s_version_info) < 0) __PYX_ERR(0, 107, __pyx_L1_error)

  /* "neologdn.pyx":110
 * 
 * 
 * cpdef unicode shorten_repeat(unicode text, int repeat_threshould, int max_repeat_substr_length=8):             # <<<<<<<<<<<<<<
 *     cdef int text_length, i, repeat_length, right_start, right_end, num_repeat_substrs
 *     cdef int upper_repeat_substr_length
 */
  __pyx_t_12 = __Pyx_CyFunction_New(&__pyx_mdef_8neologdn_1shorten_repeat, 0, __pyx_n_s_shorten_repeat, NULL, __pyx_n_s_neologdn, __pyx_d, ((PyObject *)__pyx_codeobj__517)); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_12, __pyx_tuple__518);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_shorten_repeat, __pyx_t_12) < 0) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

  /* "neologdn.pyx":140
 * 
 * 
 * cpdef unicode normalize(unicode text, int repeat=0, bint remove_space=True,             # <<<<<<<<<<<<<<
 *                         int max_repeat_substr_length=8, unicode tilde='remove'):
 *     cdef Py_UCS4 *buf = <Py_UCS4 *>malloc(sizeof(Py_UCS4) * (len(text) + 1))
 */
  __pyx_t_12 = __Pyx_CyFunction_New(&__pyx_mdef_8neologdn_3normalize, 0, __pyx_n_s_normalize, NULL, __pyx_n_s_neologdn, __pyx_d, ((PyObject *)__pyx_codeobj__520)); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_12, __pyx_tuple__521);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_normalize, __pyx_t_12) < 0) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

  /* "neologdn.pyx":1
 * # distutils: language=c++             # <<<<<<<<<<<<<<
 * # cython: language_level=3
 * # -*- coding: utf-8 -*-
 */
  __pyx_t_12 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_12) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  if (__pyx_m) {
    if (__pyx_d && stringtab_initialized) {
      __Pyx_AddTraceback("init neologdn", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    #if !CYTHON_USE_MODULE_STATE
    Py_CLEAR(__pyx_m);
    #else
    Py_DECREF(__pyx_m);
    if (pystate_addmodule_run) {
      PyObject *tp, *value, *tb;
      PyErr_Fetch(&tp, &value, &tb);
      PyState_RemoveModule(&__pyx_moduledef);
      PyErr_Restore(tp, value, tb);
    }
    #endif
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init neologdn");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}
/* #### Code section: cleanup_globals ### */
/* #### Code section: cleanup_module ### */
/* #### Code section: main_method ### */
/* #### Code section: utility_code_pragmas ### */
#ifdef _MSC_VER
#pragma warning( push )
/* Warning 4127: conditional expression is constant
 * Cython uses constant conditional expressions to allow in inline functions to be optimized at
 * compile-time, so this warning is not useful
 */
#pragma warning( disable : 4127 )
#endif



/* #### Code section: utility_code_def ### */

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    int result;
    PyObject *exc_type;
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *current_exception = tstate->current_exception;
    if (unlikely(!current_exception)) return 0;
    exc_type = (PyObject*) Py_TYPE(current_exception);
    if (exc_type == err) return 1;
#else
    exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
#endif
    #if CYTHON_AVOID_BORROWED_REFS
    Py_INCREF(exc_type);
    #endif
    if (unlikely(PyTuple_Check(err))) {
        result = __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    } else {
        result = __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
    }
    #if CYTHON_AVOID_BORROWED_REFS
    Py_DECREF(exc_type);
    #endif
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *tmp_value;
    assert(type == NULL || (value != NULL && type == (PyObject*) Py_TYPE(value)));
    if (value) {
        #if CYTHON_COMPILING_IN_CPYTHON
        if (unlikely(((PyBaseExceptionObject*) value)->traceback != tb))
        #endif
            PyException_SetTraceback(value, tb);
    }
    tmp_value = tstate->current_exception;
    tstate->current_exception = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
#else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject* exc_value;
    exc_value = tstate->current_exception;
    tstate->current_exception = 0;
    *value = exc_value;
    *type = NULL;
    *tb = NULL;
    if (exc_value) {
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        #if CYTHON_COMPILING_IN_CPYTHON
        *tb = ((PyBaseExceptionObject*) exc_value)->traceback;
        Py_XINCREF(*tb);
        #else
        *tb = PyException_GetTraceback(exc_value);
        #endif
    }
#else
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#endif
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
#if __PYX_LIMITED_VERSION_HEX < 0x030d00A1
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
    (void) PyObject_GetOptionalAttr(obj, attr_name, &result);
    return result;
#else
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
#endif
}

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStrNoError(__pyx_b, name);
    if (unlikely(!result) && !PyErr_Occurred()) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* DivInt[long] */
static CYTHON_INLINE long __Pyx_div_long(long a, long b) {
    long q = a / b;
    long r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

/* PyUnicode_Substring */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_Substring(
            PyObject* text, Py_ssize_t start, Py_ssize_t stop) {
    Py_ssize_t length;
    if (unlikely(__Pyx_PyUnicode_READY(text) == -1)) return NULL;
    length = __Pyx_PyUnicode_GET_LENGTH(text);
    if (start < 0) {
        start += length;
        if (start < 0)
            start = 0;
    }
    if (stop < 0)
        stop += length;
    else if (stop > length)
        stop = length;
    if (stop <= start)
        return __Pyx_NewRef(__pyx_empty_unicode);
    if (start == 0 && stop == length)
        return __Pyx_NewRef(text);
#if CYTHON_PEP393_ENABLED
    return PyUnicode_FromKindAndData(PyUnicode_KIND(text),
        PyUnicode_1BYTE_DATA(text) + start*PyUnicode_KIND(text), stop-start);
#else
    return PyUnicode_FromUnicode(PyUnicode_AS_UNICODE(text)+start, stop-start);
#endif
}

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS && (PY_VERSION_HEX < 0x030B0000)
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* UnicodeConcatInPlace */
# if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
static int
__Pyx_unicode_modifiable(PyObject *unicode)
{
    if (Py_REFCNT(unicode) != 1)
        return 0;
    if (!PyUnicode_CheckExact(unicode))
        return 0;
    if (PyUnicode_CHECK_INTERNED(unicode))
        return 0;
    return 1;
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **p_left, PyObject *right
        #if CYTHON_REFNANNY
        , void* __pyx_refnanny
        #endif
    ) {
    PyObject *left = *p_left;
    Py_ssize_t left_len, right_len, new_len;
    if (unlikely(__Pyx_PyUnicode_READY(left) == -1))
        return NULL;
    if (unlikely(__Pyx_PyUnicode_READY(right) == -1))
        return NULL;
    left_len = PyUnicode_GET_LENGTH(left);
    if (left_len == 0) {
        Py_INCREF(right);
        return right;
    }
    right_len = PyUnicode_GET_LENGTH(right);
    if (right_len == 0) {
        Py_INCREF(left);
        return left;
    }
    if (unlikely(left_len > PY_SSIZE_T_MAX - right_len)) {
        PyErr_SetString(PyExc_OverflowError,
                        "strings are too large to concat");
        return NULL;
    }
    new_len = left_len + right_len;
    if (__Pyx_unicode_modifiable(left)
            && PyUnicode_CheckExact(right)
            && PyUnicode_KIND(right) <= PyUnicode_KIND(left)
            && !(PyUnicode_IS_ASCII(left) && !PyUnicode_IS_ASCII(right))) {
        int ret;
        __Pyx_GIVEREF(*p_left);
        ret = PyUnicode_Resize(p_left, new_len);
        __Pyx_GOTREF(*p_left);
        if (unlikely(ret != 0))
            return NULL;
        #if PY_VERSION_HEX >= 0x030d0000
        if (unlikely(PyUnicode_CopyCharacters(*p_left, left_len, right, 0, right_len) < 0)) return NULL;
        #else
        _PyUnicode_FastCopyCharacters(*p_left, left_len, right, 0, right_len);
        #endif
        __Pyx_INCREF(*p_left);
        __Pyx_GIVEREF(*p_left);
        return *p_left;
    } else {
        return __Pyx_PyUnicode_Concat(left, right);
    }
  }
#endif

/* TupleAndListFromArray */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject *const *CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject *
__Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        Py_INCREF(__pyx_empty_tuple);
        return __pyx_empty_tuple;
    }
    res = PyTuple_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyTupleObject*)res)->ob_item, n);
    return res;
}
static CYTHON_INLINE PyObject *
__Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        return PyList_New(0);
    }
    res = PyList_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyListObject*)res)->ob_item, n);
    return res;
}
#endif

/* fastcall */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s)
{
    Py_ssize_t i, n = PyTuple_GET_SIZE(kwnames);
    for (i = 0; i < n; i++)
    {
        if (s == PyTuple_GET_ITEM(kwnames, i)) return kwvalues[i];
    }
    for (i = 0; i < n; i++)
    {
        int eq = __Pyx_PyUnicode_Equals(s, PyTuple_GET_ITEM(kwnames, i), Py_EQ);
        if (unlikely(eq != 0)) {
            if (unlikely(eq < 0)) return NULL;
            return kwvalues[i];
        }
    }
    return NULL;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues) {
    Py_ssize_t i, nkwargs = PyTuple_GET_SIZE(kwnames);
    PyObject *dict;
    dict = PyDict_New();
    if (unlikely(!dict))
        return NULL;
    for (i=0; i<nkwargs; i++) {
        PyObject *key = PyTuple_GET_ITEM(kwnames, i);
        if (unlikely(PyDict_SetItem(dict, key, kwvalues[i]) < 0))
            goto bad;
    }
    return dict;
bad:
    Py_DECREF(dict);
    return NULL;
}
#endif
#endif

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    int kwds_is_tuple = CYTHON_METH_FASTCALL && likely(PyTuple_Check(kwds));
    while (1) {
        Py_XDECREF(key); key = NULL;
        Py_XDECREF(value); value = NULL;
        if (kwds_is_tuple) {
            Py_ssize_t size;
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(kwds);
#else
            size = PyTuple_Size(kwds);
            if (size < 0) goto bad;
#endif
            if (pos >= size) break;
#if CYTHON_AVOID_BORROWED_REFS
            key = __Pyx_PySequence_ITEM(kwds, pos);
            if (!key) goto bad;
#elif CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kwds, pos);
#else
            key = PyTuple_GetItem(kwds, pos);
            if (!key) goto bad;
#endif
            value = kwvalues[pos];
            pos++;
        }
        else
        {
            if (!PyDict_Next(kwds, &pos, &key, &value)) break;
#if CYTHON_AVOID_BORROWED_REFS
            Py_INCREF(key);
#endif
        }
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
            Py_INCREF(value);
            Py_DECREF(key);
#endif
            key = NULL;
            value = NULL;
            continue;
        }
#if !CYTHON_AVOID_BORROWED_REFS
        Py_INCREF(key);
#endif
        Py_INCREF(value);
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
                    value = NULL;
#endif
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key)
                );
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
                    value = NULL;
#endif
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    Py_XDECREF(key);
    Py_XDECREF(value);
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    Py_XDECREF(key);
    Py_XDECREF(value);
    return -1;
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    __Pyx_TypeName type_name;
    __Pyx_TypeName obj_type_name;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    type_name = __Pyx_PyType_GetName(type);
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected " __Pyx_FMT_TYPENAME
        ", got " __Pyx_FMT_TYPENAME ")", name, type_name, obj_type_name);
    __Pyx_DECREF_TypeName(type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* unicode_iter */
static CYTHON_INLINE int __Pyx_init_unicode_iteration(
    PyObject* ustring, Py_ssize_t *length, void** data, int *kind) {
#if CYTHON_COMPILING_IN_LIMITED_API
    *kind   = 0;
    *length = PyUnicode_GetLength(ustring);
    *data   = (void*)ustring;
#elif CYTHON_PEP393_ENABLED
    if (unlikely(__Pyx_PyUnicode_READY(ustring) < 0)) return -1;
    *kind   = PyUnicode_KIND(ustring);
    *length = PyUnicode_GET_LENGTH(ustring);
    *data   = PyUnicode_DATA(ustring);
#else
    *kind   = 0;
    *length = PyUnicode_GET_SIZE(ustring);
    *data   = (void*)PyUnicode_AS_UNICODE(ustring);
#endif
    return 0;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && PY_VERSION_HEX < 0x030d0000
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#elif CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(!__pyx_m)) {
        return NULL;
    }
    result = PyObject_GetAttr(__pyx_m, name);
    if (likely(result)) {
        return result;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* RaiseUnexpectedTypeError */
static int
__Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj)
{
    __Pyx_TypeName obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError, "Expected %s, got " __Pyx_FMT_TYPENAME,
                 expected, obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *module = 0;
    PyObject *empty_dict = 0;
    PyObject *empty_list = 0;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (unlikely(!py_import))
        goto bad;
    if (!from_list) {
        empty_list = PyList_New(0);
        if (unlikely(!empty_list))
            goto bad;
        from_list = empty_list;
    }
    #endif
    empty_dict = PyDict_New();
    if (unlikely(!empty_dict))
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.') != NULL) {
                module = PyImport_ImportModuleLevelObject(
                    name, __pyx_d, empty_dict, from_list, 1);
                if (unlikely(!module)) {
                    if (unlikely(!PyErr_ExceptionMatches(PyExc_ImportError)))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (unlikely(!py_level))
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, __pyx_d, empty_dict, from_list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, __pyx_d, empty_dict, from_list, level);
            #endif
        }
    }
bad:
    Py_XDECREF(empty_dict);
    Py_XDECREF(empty_list);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    return module;
}

/* ImportDottedModule */
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Error(PyObject *name, PyObject *parts_tuple, Py_ssize_t count) {
    PyObject *partial_name = NULL, *slice = NULL, *sep = NULL;
    if (unlikely(PyErr_Occurred())) {
        PyErr_Clear();
    }
    if (likely(PyTuple_GET_SIZE(parts_tuple) == count)) {
        partial_name = name;
    } else {
        slice = PySequence_GetSlice(parts_tuple, 0, count);
        if (unlikely(!slice))
            goto bad;
        sep = PyUnicode_FromStringAndSize(".", 1);
        if (unlikely(!sep))
            goto bad;
        partial_name = PyUnicode_Join(sep, slice);
    }
    PyErr_Format(
#if PY_MAJOR_VERSION < 3
        PyExc_ImportError,
        "No module named '%s'", PyString_AS_STRING(partial_name));
#else
#if PY_VERSION_HEX >= 0x030600B1
        PyExc_ModuleNotFoundError,
#else
        PyExc_ImportError,
#endif
        "No module named '%U'", partial_name);
#endif
bad:
    Py_XDECREF(sep);
    Py_XDECREF(slice);
    Py_XDECREF(partial_name);
    return NULL;
}
#endif
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Lookup(PyObject *name) {
    PyObject *imported_module;
#if PY_VERSION_HEX < 0x030700A1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400)
    PyObject *modules = PyImport_GetModuleDict();
    if (unlikely(!modules))
        return NULL;
    imported_module = __Pyx_PyDict_GetItemStr(modules, name);
    Py_XINCREF(imported_module);
#else
    imported_module = PyImport_GetModule(name);
#endif
    return imported_module;
}
#endif
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple) {
    Py_ssize_t i, nparts;
    nparts = PyTuple_GET_SIZE(parts_tuple);
    for (i=1; i < nparts && module; i++) {
        PyObject *part, *submodule;
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        part = PyTuple_GET_ITEM(parts_tuple, i);
#else
        part = PySequence_ITEM(parts_tuple, i);
#endif
        submodule = __Pyx_PyObject_GetAttrStrNoError(module, part);
#if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
        Py_DECREF(part);
#endif
        Py_DECREF(module);
        module = submodule;
    }
    if (unlikely(!module)) {
        return __Pyx__ImportDottedModule_Error(name, parts_tuple, i);
    }
    return module;
}
#endif
static PyObject *__Pyx__ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if PY_MAJOR_VERSION < 3
    PyObject *module, *from_list, *star = __pyx_n_s_;
    CYTHON_UNUSED_VAR(parts_tuple);
    from_list = PyList_New(1);
    if (unlikely(!from_list))
        return NULL;
    Py_INCREF(star);
    PyList_SET_ITEM(from_list, 0, star);
    module = __Pyx_Import(name, from_list, 0);
    Py_DECREF(from_list);
    return module;
#else
    PyObject *imported_module;
    PyObject *module = __Pyx_Import(name, NULL, 0);
    if (!parts_tuple || unlikely(!module))
        return module;
    imported_module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(imported_module)) {
        Py_DECREF(module);
        return imported_module;
    }
    PyErr_Clear();
    return __Pyx_ImportDottedModule_WalkParts(module, name, parts_tuple);
#endif
}
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030400B1
    PyObject *module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(module)) {
        PyObject *spec = __Pyx_PyObject_GetAttrStrNoError(module, __pyx_n_s_spec);
        if (likely(spec)) {
            PyObject *unsafe = __Pyx_PyObject_GetAttrStrNoError(spec, __pyx_n_s_initializing);
            if (likely(!unsafe || !__Pyx_PyObject_IsTrue(unsafe))) {
                Py_DECREF(spec);
                spec = NULL;
            }
            Py_XDECREF(unsafe);
        }
        if (likely(!spec)) {
            PyErr_Clear();
            return module;
        }
        Py_DECREF(spec);
        Py_DECREF(module);
    } else if (PyErr_Occurred()) {
        PyErr_Clear();
    }
#endif
    return __Pyx__ImportDottedModule(name, parts_tuple);
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        const char* module_name_str = 0;
        PyObject* module_name = 0;
        PyObject* module_dot = 0;
        PyObject* full_name = 0;
        PyErr_Clear();
        module_name_str = PyModule_GetName(module);
        if (unlikely(!module_name_str)) { goto modbad; }
        module_name = PyUnicode_FromString(module_name_str);
        if (unlikely(!module_name)) { goto modbad; }
        module_dot = PyUnicode_Concat(module_name, __pyx_kp_u__2);
        if (unlikely(!module_dot)) { goto modbad; }
        full_name = PyUnicode_Concat(module_dot, name);
        if (unlikely(!full_name)) { goto modbad; }
        #if PY_VERSION_HEX < 0x030700A1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400)
        {
            PyObject *modules = PyImport_GetModuleDict();
            if (unlikely(!modules))
                goto modbad;
            value = PyObject_GetItem(modules, full_name);
        }
        #else
        value = PyImport_GetModule(full_name);
        #endif
      modbad:
        Py_XDECREF(full_name);
        Py_XDECREF(module_dot);
        Py_XDECREF(module_name);
    }
    if (unlikely(!value)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
    PyObject* exc_type;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    exc_type = __Pyx_PyErr_CurrentExceptionType();
    if (unlikely(exc_type)) {
        if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))
            return -1;
        __Pyx_PyErr_Clear();
        return 0;
    }
    return 0;
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    }
    return __Pyx_IterFinish();
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    #endif
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* FixUpExtensionType */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type) {
#if PY_VERSION_HEX > 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    CYTHON_UNUSED_VAR(spec);
    CYTHON_UNUSED_VAR(type);
#else
    const PyType_Slot *slot = spec->slots;
    while (slot && slot->slot && slot->slot != Py_tp_members)
        slot++;
    if (slot && slot->slot == Py_tp_members) {
        int changed = 0;
#if !(PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON)
        const
#endif
            PyMemberDef *memb = (PyMemberDef*) slot->pfunc;
        while (memb && memb->name) {
            if (memb->name[0] == '_' && memb->name[1] == '_') {
#if PY_VERSION_HEX < 0x030900b1
                if (strcmp(memb->name, "__weaklistoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_weaklistoffset = memb->offset;
                    changed = 1;
                }
                else if (strcmp(memb->name, "__dictoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_dictoffset = memb->offset;
                    changed = 1;
                }
#if CYTHON_METH_FASTCALL
                else if (strcmp(memb->name, "__vectorcalloffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
#if PY_VERSION_HEX >= 0x030800b4
                    type->tp_vectorcall_offset = memb->offset;
#else
                    type->tp_print = (printfunc) memb->offset;
#endif
                    changed = 1;
                }
#endif
#else
                if ((0));
#endif
#if PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON
                else if (strcmp(memb->name, "__module__") == 0) {
                    PyObject *descr;
                    assert(memb->type == T_OBJECT);
                    assert(memb->flags == 0 || memb->flags == READONLY);
                    descr = PyDescr_NewMember(type, memb);
                    if (unlikely(!descr))
                        return -1;
                    if (unlikely(PyDict_SetItem(type->tp_dict, PyDescr_NAME(descr), descr) < 0)) {
                        Py_DECREF(descr);
                        return -1;
                    }
                    Py_DECREF(descr);
                    changed = 1;
                }
#endif
            }
            memb++;
        }
        if (changed)
            PyType_Modified(type);
    }
#endif
    return 0;
}
#endif

/* FetchSharedCythonModule */
static PyObject *__Pyx_FetchSharedCythonABIModule(void) {
    return __Pyx_PyImport_AddModuleRef((char*) __PYX_ABI_MODULE_NAME);
}

/* FetchCommonType */
static int __Pyx_VerifyCachedType(PyObject *cached_type,
                               const char *name,
                               Py_ssize_t basicsize,
                               Py_ssize_t expected_basicsize) {
    if (!PyType_Check(cached_type)) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s is not a type object", name);
        return -1;
    }
    if (basicsize != expected_basicsize) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s has the wrong size, try recompiling",
            name);
        return -1;
    }
    return 0;
}
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* abi_module;
    const char* object_name;
    PyTypeObject *cached_type = NULL;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    object_name = strrchr(type->tp_name, '.');
    object_name = object_name ? object_name+1 : type->tp_name;
    cached_type = (PyTypeObject*) PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        if (__Pyx_VerifyCachedType(
              (PyObject *)cached_type,
              object_name,
              cached_type->tp_basicsize,
              type->tp_basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    if (PyType_Ready(type) < 0) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, (PyObject *)type) < 0)
        goto bad;
    Py_INCREF(type);
    cached_type = type;
done:
    Py_DECREF(abi_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#else
static PyTypeObject *__Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases) {
    PyObject *abi_module, *cached_type = NULL;
    const char* object_name = strrchr(spec->name, '.');
    object_name = object_name ? object_name+1 : spec->name;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    cached_type = PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        Py_ssize_t basicsize;
#if CYTHON_COMPILING_IN_LIMITED_API
        PyObject *py_basicsize;
        py_basicsize = PyObject_GetAttrString(cached_type, "__basicsize__");
        if (unlikely(!py_basicsize)) goto bad;
        basicsize = PyLong_AsSsize_t(py_basicsize);
        Py_DECREF(py_basicsize);
        py_basicsize = 0;
        if (unlikely(basicsize == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
#else
        basicsize = likely(PyType_Check(cached_type)) ? ((PyTypeObject*) cached_type)->tp_basicsize : -1;
#endif
        if (__Pyx_VerifyCachedType(
              cached_type,
              object_name,
              basicsize,
              spec->basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    CYTHON_UNUSED_VAR(module);
    cached_type = __Pyx_PyType_FromModuleAndSpec(abi_module, spec, bases);
    if (unlikely(!cached_type)) goto bad;
    if (unlikely(__Pyx_fix_up_extension_type_from_spec(spec, (PyTypeObject *) cached_type) < 0)) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, cached_type) < 0) goto bad;
done:
    Py_DECREF(abi_module);
    assert(cached_type == NULL || PyType_Check(cached_type));
    return (PyTypeObject *) cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#endif

/* PyVectorcallFastCallDict */
#if CYTHON_METH_FASTCALL
static PyObject *__Pyx_PyVectorcall_FastCallDict_kw(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    PyObject *res = NULL;
    PyObject *kwnames;
    PyObject **newargs;
    PyObject **kwvalues;
    Py_ssize_t i, pos;
    size_t j;
    PyObject *key, *value;
    unsigned long keys_are_strings;
    Py_ssize_t nkw = PyDict_GET_SIZE(kw);
    newargs = (PyObject **)PyMem_Malloc((nargs + (size_t)nkw) * sizeof(args[0]));
    if (unlikely(newargs == NULL)) {
        PyErr_NoMemory();
        return NULL;
    }
    for (j = 0; j < nargs; j++) newargs[j] = args[j];
    kwnames = PyTuple_New(nkw);
    if (unlikely(kwnames == NULL)) {
        PyMem_Free(newargs);
        return NULL;
    }
    kwvalues = newargs + nargs;
    pos = i = 0;
    keys_are_strings = Py_TPFLAGS_UNICODE_SUBCLASS;
    while (PyDict_Next(kw, &pos, &key, &value)) {
        keys_are_strings &= Py_TYPE(key)->tp_flags;
        Py_INCREF(key);
        Py_INCREF(value);
        PyTuple_SET_ITEM(kwnames, i, key);
        kwvalues[i] = value;
        i++;
    }
    if (unlikely(!keys_are_strings)) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        goto cleanup;
    }
    res = vc(func, newargs, nargs, kwnames);
cleanup:
    Py_DECREF(kwnames);
    for (i = 0; i < nkw; i++)
        Py_DECREF(kwvalues[i]);
    PyMem_Free(newargs);
    return res;
}
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    if (likely(kw == NULL) || PyDict_GET_SIZE(kw) == 0) {
        return vc(func, args, nargs, NULL);
    }
    return __Pyx_PyVectorcall_FastCallDict_kw(func, vc, args, nargs, kw);
}
#endif

/* CythonFunctionShared */
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc) {
    if (__Pyx_CyFunction_Check(func)) {
        return PyCFunction_GetFunction(((__pyx_CyFunctionObject*)func)->func) == (PyCFunction) cfunc;
    } else if (PyCFunction_Check(func)) {
        return PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
    }
    return 0;
}
#else
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc) {
    return __Pyx_CyOrPyCFunction_Check(func) && __Pyx_CyOrPyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
}
#endif
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj) {
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    __Pyx_Py_XDECREF_SET(
        __Pyx_CyFunction_GetClassObj(f),
            ((classobj) ? __Pyx_NewRef(classobj) : NULL));
#else
    __Pyx_Py_XDECREF_SET(
        ((PyCMethodObject *) (f))->mm_class,
        (PyTypeObject*)((classobj) ? __Pyx_NewRef(classobj) : NULL));
#endif
}
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, void *closure)
{
    CYTHON_UNUSED_VAR(closure);
    if (unlikely(op->func_doc == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_doc = PyObject_GetAttrString(op->func, "__doc__");
        if (unlikely(!op->func_doc)) return NULL;
#else
        if (((PyCFunctionObject*)op)->m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
#endif
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_doc, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_name == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_name = PyObject_GetAttrString(op->func, "__name__");
#elif PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_name, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_qualname, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_dict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(op);
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = __Pyx_PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = __Pyx_PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyTuple_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__defaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_tuple, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_tuple;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__kwdefaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_kwdict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_kwdict;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value || value == Py_None) {
        value = NULL;
    } else if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_annotations, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->func_annotations;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyObject *
__Pyx_CyFunction_get_is_coroutine(__pyx_CyFunctionObject *op, void *context) {
    int is_coroutine;
    CYTHON_UNUSED_VAR(context);
    if (op->func_is_coroutine) {
        return __Pyx_NewRef(op->func_is_coroutine);
    }
    is_coroutine = op->flags & __Pyx_CYFUNCTION_COROUTINE;
#if PY_VERSION_HEX >= 0x03050000
    if (is_coroutine) {
        PyObject *module, *fromlist, *marker = __pyx_n_s_is_coroutine;
        fromlist = PyList_New(1);
        if (unlikely(!fromlist)) return NULL;
        Py_INCREF(marker);
#if CYTHON_ASSUME_SAFE_MACROS
        PyList_SET_ITEM(fromlist, 0, marker);
#else
        if (unlikely(PyList_SetItem(fromlist, 0, marker) < 0)) {
            Py_DECREF(marker);
            Py_DECREF(fromlist);
            return NULL;
        }
#endif
        module = PyImport_ImportModuleLevelObject(__pyx_n_s_asyncio_coroutines, NULL, NULL, fromlist, 0);
        Py_DECREF(fromlist);
        if (unlikely(!module)) goto ignore;
        op->func_is_coroutine = __Pyx_PyObject_GetAttrStr(module, marker);
        Py_DECREF(module);
        if (likely(op->func_is_coroutine)) {
            return __Pyx_NewRef(op->func_is_coroutine);
        }
ignore:
        PyErr_Clear();
    }
#endif
    op->func_is_coroutine = __Pyx_PyBool_FromLong(is_coroutine);
    return __Pyx_NewRef(op->func_is_coroutine);
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *
__Pyx_CyFunction_get_module(__pyx_CyFunctionObject *op, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_GetAttrString(op->func, "__module__");
}
static int
__Pyx_CyFunction_set_module(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_SetAttrString(op->func, "__module__", value);
}
#endif
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {(char *) "_is_coroutine", (getter)__Pyx_CyFunction_get_is_coroutine, 0, 0, 0},
#if CYTHON_COMPILING_IN_LIMITED_API
    {"__module__", (getter)__Pyx_CyFunction_get_module, (setter)__Pyx_CyFunction_set_module, 0, 0},
#endif
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
#if !CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), 0, 0},
#endif
#if CYTHON_USE_TYPE_SPECS
    {(char *) "__dictoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_dict), READONLY, 0},
#if CYTHON_METH_FASTCALL
#if CYTHON_BACKPORT_VECTORCALL
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_vectorcall), READONLY, 0},
#else
#if !CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(PyCFunctionObject, vectorcall), READONLY, 0},
#endif
#endif
#endif
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_weakreflist), READONLY, 0},
#else
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(PyCFunctionObject, m_weakreflist), READONLY, 0},
#endif
#endif
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, PyObject *args)
{
    CYTHON_UNUSED_VAR(args);
#if PY_MAJOR_VERSION >= 3
    Py_INCREF(m->func_qualname);
    return m->func_qualname;
#else
    return PyString_FromString(((PyCFunctionObject*)m)->m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) (((PyCFunctionObject*)cyfunc)->m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
#if !CYTHON_COMPILING_IN_LIMITED_API
    PyCFunctionObject *cf = (PyCFunctionObject*) op;
#endif
    if (unlikely(op == NULL))
        return NULL;
#if CYTHON_COMPILING_IN_LIMITED_API
    op->func = PyCFunction_NewEx(ml, (PyObject*)op, module);
    if (unlikely(!op->func)) return NULL;
#endif
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
#if !CYTHON_COMPILING_IN_LIMITED_API
    cf->m_ml = ml;
    cf->m_self = (PyObject *) op;
#endif
    Py_XINCREF(closure);
    op->func_closure = closure;
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_XINCREF(module);
    cf->m_module = module;
#endif
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    op->func_classobj = NULL;
#else
    ((PyCMethodObject*)op)->mm_class = NULL;
#endif
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    op->func_is_coroutine = NULL;
#if CYTHON_METH_FASTCALL
    switch (ml->ml_flags & (METH_VARARGS | METH_FASTCALL | METH_NOARGS | METH_O | METH_KEYWORDS | METH_METHOD)) {
    case METH_NOARGS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_NOARGS;
        break;
    case METH_O:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_O;
        break;
    case METH_METHOD | METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD;
        break;
    case METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS;
        break;
    case METH_VARARGS | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = NULL;
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        Py_DECREF(op);
        return NULL;
    }
#endif
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_CLEAR(m->func);
#else
    Py_CLEAR(((PyCFunctionObject*)m)->m_module);
#endif
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
#if PY_VERSION_HEX < 0x030900B1
    Py_CLEAR(__Pyx_CyFunction_GetClassObj(m));
#else
    {
        PyObject *cls = (PyObject*) ((PyCMethodObject *) (m))->mm_class;
        ((PyCMethodObject *) (m))->mm_class = NULL;
        Py_XDECREF(cls);
    }
#endif
#endif
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    Py_CLEAR(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    __Pyx_PyHeapTypeObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(m->func);
#else
    Py_VISIT(((PyCFunctionObject*)m)->m_module);
#endif
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(__Pyx_CyFunction_GetClassObj(m));
#endif
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    Py_VISIT(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *f = ((__pyx_CyFunctionObject*)func)->func;
    PyObject *py_name = NULL;
    PyCFunction meth;
    int flags;
    meth = PyCFunction_GetFunction(f);
    if (unlikely(!meth)) return NULL;
    flags = PyCFunction_GetFlags(f);
    if (unlikely(flags < 0)) return NULL;
#else
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    int flags = f->m_ml->ml_flags;
#endif
    Py_ssize_t size;
    switch (flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 0))
                return (*meth)(self, NULL);
#if CYTHON_COMPILING_IN_LIMITED_API
            py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
            if (!py_name) return NULL;
            PyErr_Format(PyExc_TypeError,
                "%.200S() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                py_name, size);
            Py_DECREF(py_name);
#else
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
#endif
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = __Pyx_PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
#if CYTHON_COMPILING_IN_LIMITED_API
            py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
            if (!py_name) return NULL;
            PyErr_Format(PyExc_TypeError,
                "%.200S() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                py_name, size);
            Py_DECREF(py_name);
#else
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
#endif
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        return NULL;
    }
#if CYTHON_COMPILING_IN_LIMITED_API
    py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
    if (!py_name) return NULL;
    PyErr_Format(PyExc_TypeError, "%.200S() takes no keyword arguments",
                 py_name);
    Py_DECREF(py_name);
#else
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
#endif
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *self, *result;
#if CYTHON_COMPILING_IN_LIMITED_API
    self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)func)->func);
    if (unlikely(!self) && PyErr_Occurred()) return NULL;
#else
    self = ((PyCFunctionObject*)func)->m_self;
#endif
    result = __Pyx_CyFunction_CallMethod(func, self, arg, kw);
    return result;
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
#if CYTHON_METH_FASTCALL
     __pyx_vectorcallfunc vc = __Pyx_CyFunction_func_vectorcall(cyfunc);
    if (vc) {
#if CYTHON_ASSUME_SAFE_MACROS
        return __Pyx_PyVectorcall_FastCallDict(func, vc, &PyTuple_GET_ITEM(args, 0), (size_t)PyTuple_GET_SIZE(args), kw);
#else
        (void) &__Pyx_PyVectorcall_FastCallDict;
        return PyVectorcall_Call(func, args, kw);
#endif
    }
#endif
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
#if CYTHON_ASSUME_SAFE_MACROS
        argc = PyTuple_GET_SIZE(args);
#else
        argc = PyTuple_Size(args);
        if (unlikely(!argc) < 0) return NULL;
#endif
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
#if PY_MAJOR_VERSION > 2
            PyErr_Format(PyExc_TypeError,
                         "unbound method %.200S() needs an argument",
                         cyfunc->func_qualname);
#else
            PyErr_SetString(PyExc_TypeError,
                            "unbound method needs an argument");
#endif
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE int __Pyx_CyFunction_Vectorcall_CheckArgs(__pyx_CyFunctionObject *cyfunc, Py_ssize_t nargs, PyObject *kwnames)
{
    int ret = 0;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        if (unlikely(nargs < 1)) {
            PyErr_Format(PyExc_TypeError, "%.200s() needs an argument",
                         ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
            return -1;
        }
        ret = 1;
    }
    if (unlikely(kwnames) && unlikely(PyTuple_GET_SIZE(kwnames))) {
        PyErr_Format(PyExc_TypeError,
                     "%.200s() takes no keyword arguments", ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
        return -1;
    }
    return ret;
}
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 0)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, NULL);
}
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 1)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, args[0]);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((__Pyx_PyCFunctionFastWithKeywords)(void(*)(void))def->ml_meth)(self, args, nargs, kwnames);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
    PyTypeObject *cls = (PyTypeObject *) __Pyx_CyFunction_GetClassObj(cyfunc);
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((__Pyx_PyCMethod)(void(*)(void))def->ml_meth)(self, cls, args, (size_t)nargs, kwnames);
}
#endif
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_CyFunctionType_slots[] = {
    {Py_tp_dealloc, (void *)__Pyx_CyFunction_dealloc},
    {Py_tp_repr, (void *)__Pyx_CyFunction_repr},
    {Py_tp_call, (void *)__Pyx_CyFunction_CallAsMethod},
    {Py_tp_traverse, (void *)__Pyx_CyFunction_traverse},
    {Py_tp_clear, (void *)__Pyx_CyFunction_clear},
    {Py_tp_methods, (void *)__pyx_CyFunction_methods},
    {Py_tp_members, (void *)__pyx_CyFunction_members},
    {Py_tp_getset, (void *)__pyx_CyFunction_getsets},
    {Py_tp_descr_get, (void *)__Pyx_PyMethod_New},
    {0, 0},
};
static PyType_Spec __pyx_CyFunctionType_spec = {
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if (defined(_Py_TPFLAGS_HAVE_VECTORCALL) && CYTHON_METH_FASTCALL)
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    __pyx_CyFunctionType_slots
};
#else
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
#if !CYTHON_METH_FASTCALL
    0,
#elif CYTHON_BACKPORT_VECTORCALL
    (printfunc)offsetof(__pyx_CyFunctionObject, func_vectorcall),
#else
    offsetof(PyCFunctionObject, vectorcall),
#endif
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if defined(_Py_TPFLAGS_HAVE_VECTORCALL) && CYTHON_METH_FASTCALL
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_PyMethod_New,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if __PYX_NEED_TP_PRINT_SLOT
    0,
#endif
#if PY_VERSION_HEX >= 0x030C0000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
    0,
#endif
};
#endif
static int __pyx_CyFunction_init(PyObject *module) {
#if CYTHON_USE_TYPE_SPECS
    __pyx_CyFunctionType = __Pyx_FetchCommonTypeFromSpec(module, &__pyx_CyFunctionType_spec, NULL);
#else
    CYTHON_UNUSED_VAR(module);
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
#endif
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    CYTHON_MAYBE_UNUSED_VAR(tstate);
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStrNoError(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}
#endif

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyCode_Replace_For_AddTraceback(PyObject *code, PyObject *scratch_dict,
                                                       PyObject *firstlineno, PyObject *name) {
    PyObject *replace = NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_firstlineno", firstlineno))) return NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_name", name))) return NULL;
    replace = PyObject_GetAttrString(code, "replace");
    if (likely(replace)) {
        PyObject *result;
        result = PyObject_Call(replace, __pyx_empty_tuple, scratch_dict);
        Py_DECREF(replace);
        return result;
    }
    PyErr_Clear();
    #if __PYX_LIMITED_VERSION_HEX < 0x030780000
    {
        PyObject *compiled = NULL, *result = NULL;
        if (unlikely(PyDict_SetItemString(scratch_dict, "code", code))) return NULL;
        if (unlikely(PyDict_SetItemString(scratch_dict, "type", (PyObject*)(&PyType_Type)))) return NULL;
        compiled = Py_CompileString(
            "out = type(code)(\n"
            "  code.co_argcount, code.co_kwonlyargcount, code.co_nlocals, code.co_stacksize,\n"
            "  code.co_flags, code.co_code, code.co_consts, code.co_names,\n"
            "  code.co_varnames, code.co_filename, co_name, co_firstlineno,\n"
            "  code.co_lnotab)\n", "<dummy>", Py_file_input);
        if (!compiled) return NULL;
        result = PyEval_EvalCode(compiled, scratch_dict, scratch_dict);
        Py_DECREF(compiled);
        if (!result) PyErr_Print();
        Py_DECREF(result);
        result = PyDict_GetItemString(scratch_dict, "out");
        if (result) Py_INCREF(result);
        return result;
    }
    #else
    return NULL;
    #endif
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyObject *code_object = NULL, *py_py_line = NULL, *py_funcname = NULL, *dict = NULL;
    PyObject *replace = NULL, *getframe = NULL, *frame = NULL;
    PyObject *exc_type, *exc_value, *exc_traceback;
    int success = 0;
    if (c_line) {
        (void) __pyx_cfilenm;
        (void) __Pyx_CLineForTraceback(__Pyx_PyThreadState_Current, c_line);
    }
    PyErr_Fetch(&exc_type, &exc_value, &exc_traceback);
    code_object = Py_CompileString("_getframe()", filename, Py_eval_input);
    if (unlikely(!code_object)) goto bad;
    py_py_line = PyLong_FromLong(py_line);
    if (unlikely(!py_py_line)) goto bad;
    py_funcname = PyUnicode_FromString(funcname);
    if (unlikely(!py_funcname)) goto bad;
    dict = PyDict_New();
    if (unlikely(!dict)) goto bad;
    {
        PyObject *old_code_object = code_object;
        code_object = __Pyx_PyCode_Replace_For_AddTraceback(code_object, dict, py_py_line, py_funcname);
        Py_DECREF(old_code_object);
    }
    if (unlikely(!code_object)) goto bad;
    getframe = PySys_GetObject("_getframe");
    if (unlikely(!getframe)) goto bad;
    if (unlikely(PyDict_SetItemString(dict, "_getframe", getframe))) goto bad;
    frame = PyEval_EvalCode(code_object, dict, dict);
    if (unlikely(!frame) || frame == Py_None) goto bad;
    success = 1;
  bad:
    PyErr_Restore(exc_type, exc_value, exc_traceback);
    Py_XDECREF(code_object);
    Py_XDECREF(py_py_line);
    Py_XDECREF(py_funcname);
    Py_XDECREF(dict);
    Py_XDECREF(replace);
    if (success) {
        PyTraceBack_Here(
            (struct _frame*)frame);
    }
    Py_XDECREF(frame);
}
#else
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}
#endif

/* UnicodeAsUCS4 */
static CYTHON_INLINE Py_UCS4 __Pyx_PyUnicode_AsPy_UCS4(PyObject* x) {
   Py_ssize_t length;
   #if CYTHON_PEP393_ENABLED
   length = PyUnicode_GET_LENGTH(x);
   if (likely(length == 1)) {
       return PyUnicode_READ_CHAR(x, 0);
   }
   #else
   length = PyUnicode_GET_SIZE(x);
   if (likely(length == 1)) {
       return PyUnicode_AS_UNICODE(x)[0];
   }
   #if Py_UNICODE_SIZE == 2
   else if (PyUnicode_GET_SIZE(x) == 2) {
       Py_UCS4 high_val = PyUnicode_AS_UNICODE(x)[0];
       if (high_val >= 0xD800 && high_val <= 0xDBFF) {
           Py_UCS4 low_val = PyUnicode_AS_UNICODE(x)[1];
           if (low_val >= 0xDC00 && low_val <= 0xDFFF) {
               return 0x10000 + (((high_val & ((1<<10)-1)) << 10) | (low_val & ((1<<10)-1)));
           }
       }
   }
   #endif
   #endif
   PyErr_Format(PyExc_ValueError,
                "only single character unicode strings can be converted to Py_UCS4, "
                "got length %" CYTHON_FORMAT_SSIZE_T "d", length);
   return (Py_UCS4)-1;
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* ObjectAsUCS4 */
static Py_UCS4 __Pyx__PyObject_AsPy_UCS4_raise_error(long ival) {
   if (ival < 0) {
       if (!PyErr_Occurred())
           PyErr_SetString(PyExc_OverflowError,
                           "cannot convert negative value to Py_UCS4");
   } else {
       PyErr_SetString(PyExc_OverflowError,
                       "value too large to convert to Py_UCS4");
   }
   return (Py_UCS4)-1;
}
static Py_UCS4 __Pyx__PyObject_AsPy_UCS4(PyObject* x) {
   long ival;
   ival = __Pyx_PyInt_As_long(x);
   if (unlikely(!__Pyx_is_valid_index(ival, 1114111 + 1))) {
       return __Pyx__PyObject_AsPy_UCS4_raise_error(ival);
   }
   return (Py_UCS4)ival;
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(int) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 2 * PyLong_SHIFT)) {
                                return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 3 * PyLong_SHIFT)) {
                                return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 4 * PyLong_SHIFT)) {
                                return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(int) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(int) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                                return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                                return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                                return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(int) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (int) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (int) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (int) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (int) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (int) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(int) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((int) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(int) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((int) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((int) 1) << (sizeof(int) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(int));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* FormatTypeName */
#if CYTHON_COMPILING_IN_LIMITED_API
static __Pyx_TypeName
__Pyx_PyType_GetName(PyTypeObject* tp)
{
    PyObject *name = __Pyx_PyObject_GetAttrStr((PyObject *)tp,
                                               __pyx_n_s_name);
    if (unlikely(name == NULL) || unlikely(!PyUnicode_Check(name))) {
        PyErr_Clear();
        Py_XDECREF(name);
        name = __Pyx_NewRef(__pyx_n_s__167);
    }
    return name;
}
#endif

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(long));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(long) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 2 * PyLong_SHIFT)) {
                                return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 3 * PyLong_SHIFT)) {
                                return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 4 * PyLong_SHIFT)) {
                                return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(long) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(long) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                                return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                                return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                                return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(long) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (long) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (long) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (long) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (long) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (long) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(long) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((long) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(long) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((long) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((long) 1) << (sizeof(long) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = __Pyx_PyType_GetSlot(a, tp_base, PyTypeObject*);
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (cls == a || cls == b) return 1;
    mro = cls->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            PyObject *base = PyTuple_GET_ITEM(mro, i);
            if (base == (PyObject *)a || base == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(cls, a) || __Pyx_InBases(cls, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    if (exc_type1) {
        return __Pyx_IsAnySubtype2((PyTypeObject*)err, (PyTypeObject*)exc_type1, (PyTypeObject*)exc_type2);
    } else {
        return __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static unsigned long __Pyx_get_runtime_version(void) {
#if __PYX_LIMITED_VERSION_HEX >= 0x030B00A4
    return Py_Version & ~0xFFUL;
#else
    const char* rt_version = Py_GetVersion();
    unsigned long version = 0;
    unsigned long factor = 0x01000000UL;
    unsigned int digit = 0;
    int i = 0;
    while (factor) {
        while ('0' <= rt_version[i] && rt_version[i] <= '9') {
            digit = digit * 10 + (unsigned int) (rt_version[i] - '0');
            ++i;
        }
        version += factor * digit;
        if (rt_version[i] != '.')
            break;
        digit = 0;
        factor >>= 8;
        ++i;
    }
    return version;
#endif
}
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer) {
    const unsigned long MAJOR_MINOR = 0xFFFF0000UL;
    if ((rt_version & MAJOR_MINOR) == (ct_version & MAJOR_MINOR))
        return 0;
    if (likely(allow_newer && (rt_version & MAJOR_MINOR) > (ct_version & MAJOR_MINOR)))
        return 1;
    {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compile time Python version %d.%d "
                      "of module '%.100s' "
                      "%s "
                      "runtime version %d.%d",
                       (int) (ct_version >> 24), (int) ((ct_version >> 16) & 0xFF),
                       __Pyx_MODULE_NAME,
                       (allow_newer) ? "was newer than" : "does not match",
                       (int) (rt_version >> 24), (int) ((rt_version >> 16) & 0xFF)
       );
        return PyErr_WarnEx(NULL, message, 1);
    }
}

/* InitStrings */
#if PY_MAJOR_VERSION >= 3
static int __Pyx_InitString(__Pyx_StringTabEntry t, PyObject **str) {
    if (t.is_unicode | t.is_str) {
        if (t.intern) {
            *str = PyUnicode_InternFromString(t.s);
        } else if (t.encoding) {
            *str = PyUnicode_Decode(t.s, t.n - 1, t.encoding, NULL);
        } else {
            *str = PyUnicode_FromStringAndSize(t.s, t.n - 1);
        }
    } else {
        *str = PyBytes_FromStringAndSize(t.s, t.n - 1);
    }
    if (!*str)
        return -1;
    if (PyObject_Hash(*str) == -1)
        return -1;
    return 0;
}
#endif
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION >= 3
        __Pyx_InitString(*t, t->p);
        #else
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        #endif
        ++t;
    }
    return 0;
}

#include <string.h>
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s) {
    size_t len = strlen(s);
    if (unlikely(len > (size_t) PY_SSIZE_T_MAX)) {
        PyErr_SetString(PyExc_OverflowError, "byte string is too long");
        return -1;
    }
    return (Py_ssize_t) len;
}
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return __Pyx_PyUnicode_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return PyByteArray_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY && !CYTHON_COMPILING_IN_LIMITED_API) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
    __Pyx_TypeName result_type_name = __Pyx_PyType_GetName(Py_TYPE(result));
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ").  "
                "The ability to return an instance of a strict subclass of int is deprecated, "
                "and may be removed in a future version of Python.",
                result_type_name)) {
            __Pyx_DECREF_TypeName(result_type_name);
            Py_DECREF(result);
            return NULL;
        }
        __Pyx_DECREF_TypeName(result_type_name);
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type " __Pyx_FMT_TYPENAME ")",
                 type_name, type_name, result_type_name);
    __Pyx_DECREF_TypeName(result_type_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(__Pyx_PyLong_IsCompact(b))) {
        return __Pyx_PyLong_CompactValue(b);
    } else {
      const digit* digits = __Pyx_PyLong_Digits(b);
      const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(b);
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


/* #### Code section: utility_code_pragmas_end ### */
#ifdef _MSC_VER
#pragma warning( pop )
#endif



/* #### Code section: end ### */
#endif /* Py_PYTHON_H */
